/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */
(function (window, undefined) {
    var readyList, rootjQuery, core_strundefined = typeof undefined, location = window.location, document = window.document, docElem = document.documentElement, _jQuery = window.jQuery, _$ = window.$, class2type = {}, core_deletedIds = [], core_version = "1.10.2", core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim, jQuery = function (selector, context) {
        return new jQuery.fn.init(selector, context, rootjQuery)
    }, core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, core_rnotwhite = /\S+/g, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, rvalidchars = /^[\],:{}\s]*$/, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
        return letter.toUpperCase()
    }, completed = function (event) {
        if (document.addEventListener || event.type === "load" || document.readyState === "complete") {
            detach();
            jQuery.ready()
        }
    }, detach = function () {
        if (document.addEventListener) {
            document.removeEventListener("DOMContentLoaded", completed, false);
            window.removeEventListener("load", completed, false)
        } else {
            document.detachEvent("onreadystatechange", completed);
            window.detachEvent("onload", completed)
        }
    };
    jQuery.fn = jQuery.prototype = {
        jquery: core_version,
        constructor: jQuery,
        init: function (selector, context, rootjQuery) {
            var match, elem;
            if (!selector) {
                return this
            }
            if (typeof selector === "string") {
                if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                    match = [null, selector, null]
                } else {
                    match = rquickExpr.exec(selector)
                }
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match])
                                } else {
                                    this.attr(match, context[match])
                                }
                            }
                        }
                        return this
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem && elem.parentNode) {
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector)
                            }
                            this.length = 1;
                            this[0] = elem
                        }
                        this.context = document;
                        this.selector = selector;
                        return this
                    }
                } else {
                    if (!context || context.jquery) {
                        return (context || rootjQuery).find(selector)
                    } else {
                        return this.constructor(context).find(selector)
                    }
                }
            } else {
                if (selector.nodeType) {
                    this.context = this[0] = selector;
                    this.length = 1;
                    return this
                } else {
                    if (jQuery.isFunction(selector)) {
                        return rootjQuery.ready(selector)
                    }
                }
            }
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context
            }
            return jQuery.makeArray(selector, this)
        },
        selector: "",
        length: 0,
        toArray: function () {
            return core_slice.call(this)
        },
        get: function (num) {
            return num == null ? this.toArray() : (num < 0 ? this[this.length + num] : this[num])
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret
        },
        each: function (callback, args) {
            return jQuery.each(this, callback, args)
        },
        ready: function (fn) {
            jQuery.ready.promise().done(fn);
            return this
        },
        slice: function () {
            return this.pushStack(core_slice.apply(this, arguments))
        },
        first: function () {
            return this.eq(0)
        },
        last: function () {
            return this.eq(-1)
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : [])
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem)
            }))
        },
        end: function () {
            return this.prevObject || this.constructor(null)
        },
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function () {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
            deep = target;
            target = arguments[1] || {};
            i = 2
        }
        if (typeof target !== "object" && !jQuery.isFunction(target)) {
            target = {}
        }
        if (length === i) {
            target = this;
            --i
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : []
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {}
                        }
                        target[name] = jQuery.extend(deep, clone, copy)
                    } else {
                        if (copy !== undefined) {
                            target[name] = copy
                        }
                    }
                }
            }
        }
        return target
    };
    jQuery.extend({
        expando: "jQuery" + (core_version + Math.random()).replace(/\D/g, ""), noConflict: function (deep) {
            if (window.$ === jQuery) {
                window.$ = _$
            }
            if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery
            }
            return jQuery
        }, isReady: false, readyWait: 1, holdReady: function (hold) {
            if (hold) {
                jQuery.readyWait++
            } else {
                jQuery.ready(true)
            }
        }, ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return
            }
            if (!document.body) {
                return setTimeout(jQuery.ready)
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return
            }
            readyList.resolveWith(document, [jQuery]);
            if (jQuery.fn.trigger) {
                jQuery(document).trigger("ready").off("ready")
            }
        }, isFunction: function (obj) {
            return jQuery.type(obj) === "function"
        }, isArray: Array.isArray || function (obj) {
            return jQuery.type(obj) === "array"
        }, isWindow: function (obj) {
            return obj != null && obj == obj.window
        }, isNumeric: function (obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj)
        }, type: function (obj) {
            if (obj == null) {
                return String(obj)
            }
            return typeof obj === "object" || typeof obj === "function" ? class2type[core_toString.call(obj)] || "object" : typeof obj
        }, isPlainObject: function (obj) {
            var key;
            if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                return false
            }
            try {
                if (obj.constructor && !core_hasOwn.call(obj, "constructor") && !core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                    return false
                }
            } catch (e) {
                return false
            }
            if (jQuery.support.ownLast) {
                for (key in obj) {
                    return core_hasOwn.call(obj, key)
                }
            }
            for (key in obj) {
            }
            return key === undefined || core_hasOwn.call(obj, key)
        }, isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false
            }
            return true
        }, error: function (msg) {
            throw new Error(msg)
        }, parseHTML: function (data, context, keepScripts) {
            if (!data || typeof data !== "string") {
                return null
            }
            if (typeof context === "boolean") {
                keepScripts = context;
                context = false
            }
            context = context || document;
            var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
            if (parsed) {
                return [context.createElement(parsed[1])]
            }
            parsed = jQuery.buildFragment([data], context, scripts);
            if (scripts) {
                jQuery(scripts).remove()
            }
            return jQuery.merge([], parsed.childNodes)
        }, parseJSON: function (data) {
            if (window.JSON && window.JSON.parse) {
                return window.JSON.parse(data)
            }
            if (data === null) {
                return data
            }
            if (typeof data === "string") {
                data = jQuery.trim(data);
                if (data) {
                    if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                        return (new Function("return " + data))()
                    }
                }
            }
            jQuery.error("Invalid JSON: " + data)
        }, parseXML: function (data) {
            var xml, tmp;
            if (!data || typeof data !== "string") {
                return null
            }
            try {
                if (window.DOMParser) {
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, "text/xml")
                } else {
                    xml = new ActiveXObject("Microsoft.XMLDOM");
                    xml.async = "false";
                    xml.loadXML(data)
                }
            } catch (e) {
                xml = undefined
            }
            if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                jQuery.error("Invalid XML: " + data)
            }
            return xml
        }, noop: function () {
        }, globalEval: function (data) {
            if (data && jQuery.trim(data)) {
                (window.execScript || function (data) {
                    window["eval"].call(window, data)
                })(data)
            }
        }, camelCase: function (string) {
            return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase)
        }, nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase()
        }, each: function (obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break
                        }
                    }
                }
            }
            return obj
        }, trim: core_trim && !core_trim.call("\uFEFF\xA0") ? function (text) {
            return text == null ? "" : core_trim.call(text)
        } : function (text) {
            return text == null ? "" : (text + "").replace(rtrim, "")
        }, makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === "string" ? [arr] : arr)
                } else {
                    core_push.call(ret, arr)
                }
            }
            return ret
        }, inArray: function (elem, arr, i) {
            var len;
            if (arr) {
                if (core_indexOf) {
                    return core_indexOf.call(arr, elem, i)
                }
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (; i < len; i++) {
                    if (i in arr && arr[i] === elem) {
                        return i
                    }
                }
            }
            return -1
        }, merge: function (first, second) {
            var l = second.length, i = first.length, j = 0;
            if (typeof l === "number") {
                for (; j < l; j++) {
                    first[i++] = second[j]
                }
            } else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++]
                }
            }
            first.length = i;
            return first
        }, grep: function (elems, callback, inv) {
            var retVal, ret = [], i = 0, length = elems.length;
            inv = !!inv;
            for (; i < length; i++) {
                retVal = !!callback(elems[i], i);
                if (inv !== retVal) {
                    ret.push(elems[i])
                }
            }
            return ret
        }, map: function (elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) {
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value
                    }
                }
            }
            return core_concat.apply([], ret)
        }, guid: 1, proxy: function (fn, context) {
            var args, proxy, tmp;
            if (typeof context === "string") {
                tmp = fn[context];
                context = fn;
                fn = tmp
            }
            if (!jQuery.isFunction(fn)) {
                return undefined
            }
            args = core_slice.call(arguments, 2);
            proxy = function () {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)))
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy
        }, access: function (elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0, length = elems.length, bulk = key == null;
            if (jQuery.type(key) === "object") {
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw)
                }
            } else {
                if (value !== undefined) {
                    chainable = true;
                    if (!jQuery.isFunction(value)) {
                        raw = true
                    }
                    if (bulk) {
                        if (raw) {
                            fn.call(elems, value);
                            fn = null
                        } else {
                            bulk = fn;
                            fn = function (elem, key, value) {
                                return bulk.call(jQuery(elem), value)
                            }
                        }
                    }
                    if (fn) {
                        for (; i < length; i++) {
                            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)))
                        }
                    }
                }
            }
            return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet
        }, now: function () {
            return (new Date()).getTime()
        }, swap: function (elem, options, callback, args) {
            var ret, name, old = {};
            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name]
            }
            ret = callback.apply(elem, args || []);
            for (name in options) {
                elem.style[name] = old[name]
            }
            return ret
        }
    });
    jQuery.ready.promise = function (obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === "complete") {
                setTimeout(jQuery.ready)
            } else {
                if (document.addEventListener) {
                    document.addEventListener("DOMContentLoaded", completed, false);
                    window.addEventListener("load", completed, false)
                } else {
                    document.attachEvent("onreadystatechange", completed);
                    window.attachEvent("onload", completed);
                    var top = false;
                    try {
                        top = window.frameElement == null && document.documentElement
                    } catch (e) {
                    }
                    if (top && top.doScroll) {
                        (function doScrollCheck() {
                            if (!jQuery.isReady) {
                                try {
                                    top.doScroll("left")
                                } catch (e) {
                                    return setTimeout(doScrollCheck, 50)
                                }
                                detach();
                                jQuery.ready()
                            }
                        })()
                    }
                }
            }
        }
        return readyList.promise(obj)
    };
    jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase()
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) {
            return false
        }
        if (obj.nodeType === 1 && length) {
            return true
        }
        return type === "array" || type !== "function" && (length === 0 || typeof length === "number" && length > 0 && (length - 1) in obj)
    }

    rootjQuery = jQuery(document);
    /*!
     * Sizzle CSS Selector Engine v1.10.2
     * http://sizzlejs.com/
     *
     * Copyright 2013 jQuery Foundation, Inc. and other contributors
     * Released under the MIT license
     * http://jquery.org/license
     *
     * Date: 2013-07-03
     */
    (function (window, undefined) {
        var i, support, cachedruns, Expr, getText, isXML, compile, outermostContext, sortInput, setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains, expando = "sizzle" + -(new Date()), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), hasDuplicate = false, sortOrder = function (a, b) {
            if (a === b) {
                hasDuplicate = true;
                return 0
            }
            return 0
        }, strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, hasOwn = ({}).hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function (elem) {
                var i = 0, len = this.length;
                for (; i < len; i++) {
                    if (this[i] === elem) {
                        return i
                    }
                }
                return -1
            }, booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", whitespace = "[\\x20\\t\\r\\n\\f]", characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", identifier = characterEncoding.replace("w", "w#"), attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace + "*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]", pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace(3, 8) + ")*)|.*)\\)|)", rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"), rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"), rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"), rsibling = new RegExp(whitespace + "*[+~]"), rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g"), rpseudo = new RegExp(pseudos), ridentifier = new RegExp("^" + identifier + "$"), matchExpr = {
            ID: new RegExp("^#(" + characterEncoding + ")"),
            CLASS: new RegExp("^\\.(" + characterEncoding + ")"),
            TAG: new RegExp("^(" + characterEncoding.replace("w", "w*") + ")"),
            ATTR: new RegExp("^" + attributes),
            PSEUDO: new RegExp("^" + pseudos),
            CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
            bool: new RegExp("^(?:" + booleans + ")$", "i"),
            needsContext: new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
        }, rnative = /^[^{]+\{\s*\[native \w/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g, runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"), funescape = function (_, escaped, escapedWhitespace) {
            var high = "0x" + escaped - 65536;
            return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
        };
        try {
            push.apply((arr = slice.call(preferredDoc.childNodes)), preferredDoc.childNodes);
            arr[preferredDoc.childNodes.length].nodeType
        } catch (e) {
            push = {
                apply: arr.length ? function (target, els) {
                    push_native.apply(target, slice.call(els))
                } : function (target, els) {
                    var j = target.length, i = 0;
                    while ((target[j++] = els[i++])) {
                    }
                    target.length = j - 1
                }
            }
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context)
            }
            context = context || document;
            results = results || [];
            if (!selector || typeof selector !== "string") {
                return results
            }
            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return []
            }
            if (documentIsHTML && !seed) {
                if ((match = rquickExpr.exec(selector))) {
                    if ((m = match[1])) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            if (elem && elem.parentNode) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results
                                }
                            } else {
                                return results
                            }
                        } else {
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results
                            }
                        }
                    } else {
                        if (match[2]) {
                            push.apply(results, context.getElementsByTagName(selector));
                            return results
                        } else {
                            if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
                                push.apply(results, context.getElementsByClassName(m));
                                return results
                            }
                        }
                    }
                }
                if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
                    nid = old = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                        groups = tokenize(selector);
                        if ((old = context.getAttribute("id"))) {
                            nid = old.replace(rescape, "\\$&")
                        } else {
                            context.setAttribute("id", nid)
                        }
                        nid = "[id='" + nid + "'] ";
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i])
                        }
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(",")
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, newContext.querySelectorAll(newSelector));
                            return results
                        } catch (qsaError) {
                        } finally {
                            if (!old) {
                                context.removeAttribute("id")
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, "$1"), context, results, seed)
        }

        function createCache() {
            var keys = [];

            function cache(key, value) {
                if (keys.push(key += " ") > Expr.cacheLength) {
                    delete cache[keys.shift()]
                }
                return (cache[key] = value)
            }

            return cache
        }

        function markFunction(fn) {
            fn[expando] = true;
            return fn
        }

        function assert(fn) {
            var div = document.createElement("div");
            try {
                return !!fn(div)
            } catch (e) {
                return false
            } finally {
                if (div.parentNode) {
                    div.parentNode.removeChild(div)
                }
                div = null
            }
        }

        function addHandle(attrs, handler) {
            var arr = attrs.split("|"), i = attrs.length;
            while (i--) {
                Expr.attrHandle[arr[i]] = handler
            }
        }

        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
                return diff
            }
            if (cur) {
                while ((cur = cur.nextSibling)) {
                    if (cur === b) {
                        return -1
                    }
                }
            }
            return a ? 1 : -1
        }

        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === "input" && elem.type === type
            }
        }

        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === "input" || name === "button") && elem.type === type
            }
        }

        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[(j = matchIndexes[i])]) {
                            seed[j] = !(matches[j] = seed[j])
                        }
                    }
                })
            })
        }

        isXML = Sizzle.isXML = function (elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== "HTML" : false
        };
        support = Sizzle.support = {};
        setDocument = Sizzle.setDocument = function (node) {
            var doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document
            }
            document = doc;
            docElem = doc.documentElement;
            documentIsHTML = !isXML(doc);
            if (parent && parent.attachEvent && parent !== parent.top) {
                parent.attachEvent("onbeforeunload", function () {
                    setDocument()
                })
            }
            support.attributes = assert(function (div) {
                div.className = "i";
                return !div.getAttribute("className")
            });
            support.getElementsByTagName = assert(function (div) {
                div.appendChild(doc.createComment(""));
                return !div.getElementsByTagName("*").length
            });
            support.getElementsByClassName = assert(function (div) {
                div.innerHTML = "<div class='a'></div><div class='a i'></div>";
                div.firstChild.className = "i";
                return div.getElementsByClassName("i").length === 2
            });
            support.getById = assert(function (div) {
                docElem.appendChild(div).id = expando;
                return !doc.getElementsByName || !doc.getElementsByName(expando).length
            });
            if (support.getById) {
                Expr.find.ID = function (id, context) {
                    if (typeof context.getElementById !== strundefined && documentIsHTML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [m] : []
                    }
                };
                Expr.filter.ID = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute("id") === attrId
                    }
                }
            } else {
                delete Expr.find.ID;
                Expr.filter.ID = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
                        return node && node.value === attrId
                    }
                }
            }
            Expr.find.TAG = support.getElementsByTagName ? function (tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) {
                    return context.getElementsByTagName(tag)
                }
            } : function (tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === "*") {
                    while ((elem = results[i++])) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem)
                        }
                    }
                    return tmp
                }
                return results
            };
            Expr.find.CLASS = support.getElementsByClassName && function (className, context) {
                    if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
                        return context.getElementsByClassName(className)
                    }
                };
            rbuggyMatches = [];
            rbuggyQSA = [];
            if ((support.qsa = rnative.test(doc.querySelectorAll))) {
                assert(function (div) {
                    div.innerHTML = "<select><option selected=''></option></select>";
                    if (!div.querySelectorAll("[selected]").length) {
                        rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")")
                    }
                    if (!div.querySelectorAll(":checked").length) {
                        rbuggyQSA.push(":checked")
                    }
                });
                assert(function (div) {
                    var input = doc.createElement("input");
                    input.setAttribute("type", "hidden");
                    div.appendChild(input).setAttribute("t", "");
                    if (div.querySelectorAll("[t^='']").length) {
                        rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")")
                    }
                    if (!div.querySelectorAll(":enabled").length) {
                        rbuggyQSA.push(":enabled", ":disabled")
                    }
                    div.querySelectorAll("*,:x");
                    rbuggyQSA.push(",.*:")
                })
            }
            if ((support.matchesSelector = rnative.test((matches = docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)))) {
                assert(function (div) {
                    support.disconnectedMatch = matches.call(div, "div");
                    matches.call(div, "[s!='']:x");
                    rbuggyMatches.push("!=", pseudos)
                })
            }
            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
            contains = rnative.test(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16))
            } : function (a, b) {
                if (b) {
                    while ((b = b.parentNode)) {
                        if (b === a) {
                            return true
                        }
                    }
                }
                return false
            };
            sortOrder = docElem.compareDocumentPosition ? function (a, b) {
                if (a === b) {
                    hasDuplicate = true;
                    return 0
                }
                var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
                if (compare) {
                    if (compare & 1 || (!support.sortDetached && b.compareDocumentPosition(a) === compare)) {
                        if (a === doc || contains(preferredDoc, a)) {
                            return -1
                        }
                        if (b === doc || contains(preferredDoc, b)) {
                            return 1
                        }
                        return sortInput ? (indexOf.call(sortInput, a) - indexOf.call(sortInput, b)) : 0
                    }
                    return compare & 4 ? -1 : 1
                }
                return a.compareDocumentPosition ? -1 : 1
            } : function (a, b) {
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (a === b) {
                    hasDuplicate = true;
                    return 0
                } else {
                    if (!aup || !bup) {
                        return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? (indexOf.call(sortInput, a) - indexOf.call(sortInput, b)) : 0
                    } else {
                        if (aup === bup) {
                            return siblingCheck(a, b)
                        }
                    }
                }
                cur = a;
                while ((cur = cur.parentNode)) {
                    ap.unshift(cur)
                }
                cur = b;
                while ((cur = cur.parentNode)) {
                    bp.unshift(cur)
                }
                while (ap[i] === bp[i]) {
                    i++
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0
            };
            return doc
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements)
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem)
            }
            expr = expr.replace(rattributeQuotes, "='$1']");
            if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret
                    }
                } catch (e) {
                }
            }
            return Sizzle(expr, document, null, [elem]).length > 0
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context)
            }
            return contains(context, elem)
        };
        Sizzle.attr = function (elem, name) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem)
            }
            var fn = Expr.attrHandle[name.toLowerCase()], val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
            return val === undefined ? support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null : val
        };
        Sizzle.error = function (msg) {
            throw new Error("Syntax error, unrecognized expression: " + msg)
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], j = 0, i = 0;
            hasDuplicate = !support.detectDuplicates;
            sortInput = !support.sortStable && results.slice(0);
            results.sort(sortOrder);
            if (hasDuplicate) {
                while ((elem = results[i++])) {
                    if (elem === results[i]) {
                        j = duplicates.push(i)
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1)
                }
            }
            return results
        };
        getText = Sizzle.getText = function (elem) {
            var node, ret = "", i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                for (; (node = elem[i]); i++) {
                    ret += getText(node)
                }
            } else {
                if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                    if (typeof elem.textContent === "string") {
                        return elem.textContent
                    } else {
                        for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                            ret += getText(elem)
                        }
                    }
                } else {
                    if (nodeType === 3 || nodeType === 4) {
                        return elem.nodeValue
                    }
                }
            }
            return ret
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            attrHandle: {},
            find: {},
            relative: {
                ">": {dir: "parentNode", first: true},
                " ": {dir: "parentNode"},
                "+": {dir: "previousSibling", first: true},
                "~": {dir: "previousSibling"}
            },
            preFilter: {
                ATTR: function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[4] || match[5] || "").replace(runescape, funescape);
                    if (match[2] === "~=") {
                        match[3] = " " + match[3] + " "
                    }
                    return match.slice(0, 4)
                }, CHILD: function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === "nth") {
                        if (!match[3]) {
                            Sizzle.error(match[0])
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
                        match[5] = +((match[7] + match[8]) || match[3] === "odd")
                    } else {
                        if (match[3]) {
                            Sizzle.error(match[0])
                        }
                    }
                    return match
                }, PSEUDO: function (match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr.CHILD.test(match[0])) {
                        return null
                    }
                    if (match[3] && match[4] !== undefined) {
                        match[2] = match[4]
                    } else {
                        if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
                            match[0] = match[0].slice(0, excess);
                            match[2] = unquoted.slice(0, excess)
                        }
                    }
                    return match.slice(0, 3)
                }
            },
            filter: {
                TAG: function (nodeNameSelector) {
                    var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
                    return nodeNameSelector === "*" ? function () {
                        return true
                    } : function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName
                    }
                }, CLASS: function (className) {
                    var pattern = classCache[className + " "];
                    return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
                            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "")
                        })
                }, ATTR: function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === "!="
                        }
                        if (!operator) {
                            return true
                        }
                        result += "";
                        return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false
                    }
                }, CHILD: function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== "nth", forward = type.slice(-4) !== "last", ofType = what === "of-type";
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode
                    } : function (elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? "nextSibling" : "previousSibling", parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while ((node = node[dir])) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false
                                        }
                                    }
                                    start = dir = type === "only" && !start && "nextSibling"
                                }
                                return true
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [dirruns, nodeIndex, diff];
                                        break
                                    }
                                }
                            } else {
                                if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                    diff = cache[1]
                                } else {
                                    while ((node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop())) {
                                        if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                            if (useCache) {
                                                (node[expando] || (node[expando] = {}))[type] = [dirruns, diff]
                                            }
                                            if (node === elem) {
                                                break
                                            }
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || (diff % first === 0 && diff / first >= 0)
                        }
                    }
                }, PSEUDO: function (pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);
                    if (fn[expando]) {
                        return fn(argument)
                    }
                    if (fn.length > 1) {
                        args = [pseudo, pseudo, "", argument];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf.call(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i])
                            }
                        }) : function (elem) {
                            return fn(elem, 0, args)
                        }
                    }
                    return fn
                }
            },
            pseudos: {
                not: markFunction(function (selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, "$1"));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if ((elem = unmatched[i])) {
                                seed[i] = !(matches[i] = elem)
                            }
                        }
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop()
                    }
                }), has: markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0
                    }
                }), contains: markFunction(function (text) {
                    return function (elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1
                    }
                }), lang: markFunction(function (lang) {
                    if (!ridentifier.test(lang || "")) {
                        Sizzle.error("unsupported lang: " + lang)
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if ((elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang"))) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + "-") === 0
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false
                    }
                }), target: function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id
                }, root: function (elem) {
                    return elem === docElem
                }, focus: function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex)
                }, enabled: function (elem) {
                    return elem.disabled === false
                }, disabled: function (elem) {
                    return elem.disabled === true
                }, checked: function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected)
                }, selected: function (elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex
                    }
                    return elem.selected === true
                }, empty: function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4) {
                            return false
                        }
                    }
                    return true
                }, parent: function (elem) {
                    return !Expr.pseudos.empty(elem)
                }, header: function (elem) {
                    return rheader.test(elem.nodeName)
                }, input: function (elem) {
                    return rinputs.test(elem.nodeName)
                }, button: function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === "input" && elem.type === "button" || name === "button"
                }, text: function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ((attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type)
                }, first: createPositionalPseudo(function () {
                    return [0]
                }), last: createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1]
                }), eq: createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument]
                }), even: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i)
                    }
                    return matchIndexes
                }), odd: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i)
                    }
                    return matchIndexes
                }), lt: createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i)
                    }
                    return matchIndexes
                }), gt: createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i)
                    }
                    return matchIndexes
                })
            }
        };
        Expr.pseudos.nth = Expr.pseudos.eq;
        for (i in {radio: true, checkbox: true, file: true, password: true, image: true}) {
            Expr.pseudos[i] = createInputPseudo(i)
        }
        for (i in {submit: true, reset: true}) {
            Expr.pseudos[i] = createButtonPseudo(i)
        }
        function setFilters() {
        }

        setFilters.prototype = Expr.filters = Expr.pseudos;
        Expr.setFilters = new setFilters();
        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + " "];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0)
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar
                    }
                    groups.push(tokens = [])
                }
                matched = false;
                if ((match = rcombinators.exec(soFar))) {
                    matched = match.shift();
                    tokens.push({value: matched, type: match[0].replace(rtrim, " ")});
                    soFar = soFar.slice(matched.length)
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({value: matched, type: type, matches: match});
                        soFar = soFar.slice(matched.length)
                    }
                }
                if (!matched) {
                    break
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0)
        }

        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = "";
            for (; i < len; i++) {
                selector += tokens[i].value
            }
            return selector
        }

        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === "parentNode", doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while ((elem = elem[dir])) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml)
                    }
                }
            } : function (elem, context, xml) {
                var data, cache, outerCache, dirkey = dirruns + " " + doneName;
                if (xml) {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true
                            }
                        }
                    }
                } else {
                    while ((elem = elem[dir])) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                if ((data = cache[1]) === true || data === cachedruns) {
                                    return data === true
                                }
                            } else {
                                cache = outerCache[dir] = [dirkey];
                                cache[1] = matcher(elem, context, xml) || cachedruns;
                                if (cache[1] === true) {
                                    return true
                                }
                            }
                        }
                    }
                }
            }
        }

        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false
                    }
                }
                return true
            } : matchers[0]
        }

        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
                if ((elem = unmatched[i])) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i)
                        }
                    }
                }
            }
            return newUnmatched
        }

        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter)
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector)
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml)
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if ((elem = temp[i])) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem)
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if ((elem = matcherOut[i])) {
                                    temp.push((matcherIn[i] = elem))
                                }
                            }
                            postFinder(null, (matcherOut = []), temp, xml)
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem)
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml)
                    } else {
                        push.apply(results, matcherOut)
                    }
                }
            })
        }

        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[" "], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                return elem === checkContext
            }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                return indexOf.call(checkContext, elem) > -1
            }, implicitRelative, true), matchers = [function (elem, context, xml) {
                return (!leadingRelative && (xml || context !== outermostContext)) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml))
            }];
            for (; i < len; i++) {
                if ((matcher = Expr.relative[tokens[i].type])) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)]
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({value: tokens[i - 2].type === " " ? "*" : ""})).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens((tokens = tokens.slice(j))), j < len && toSelector(tokens))
                    }
                    matchers.push(matcher)
                }
            }
            return elementMatcher(matchers)
        }

        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, expandContext) {
                var elem, j, matcher, setMatched = [], matchedCount = 0, i = "0", unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext, elems = seed || byElement && Expr.find.TAG("*", expandContext && context.parentNode || context), dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);
                if (outermost) {
                    outermostContext = context !== document && context;
                    cachedruns = matcherCachedRuns
                }
                for (; (elem = elems[i]) != null; i++) {
                    if (byElement && elem) {
                        j = 0;
                        while ((matcher = elementMatchers[j++])) {
                            if (matcher(elem, context, xml)) {
                                results.push(elem);
                                break
                            }
                        }
                        if (outermost) {
                            dirruns = dirrunsUnique;
                            cachedruns = ++matcherCachedRuns
                        }
                    }
                    if (bySet) {
                        if ((elem = !matcher && elem)) {
                            matchedCount--
                        }
                        if (seed) {
                            unmatched.push(elem)
                        }
                    }
                }
                matchedCount += i;
                if (bySet && i !== matchedCount) {
                    j = 0;
                    while ((matcher = setMatchers[j++])) {
                        matcher(unmatched, setMatched, context, xml)
                    }
                    if (seed) {
                        if (matchedCount > 0) {
                            while (i--) {
                                if (!(unmatched[i] || setMatched[i])) {
                                    setMatched[i] = pop.call(results)
                                }
                            }
                        }
                        setMatched = condense(setMatched)
                    }
                    push.apply(results, setMatched);
                    if (outermost && !seed && setMatched.length > 0 && (matchedCount + setMatchers.length) > 1) {
                        Sizzle.uniqueSort(results)
                    }
                }
                if (outermost) {
                    dirruns = dirrunsUnique;
                    outermostContext = contextBackup
                }
                return unmatched
            };
            return bySet ? markFunction(superMatcher) : superMatcher
        }

        compile = Sizzle.compile = function (selector, group) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + " "];
            if (!cached) {
                if (!group) {
                    group = tokenize(selector)
                }
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached)
                    } else {
                        elementMatchers.push(cached)
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers))
            }
            return cached
        };
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results)
            }
            return results
        }

        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed) {
                if (match.length === 1) {
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
                        context = (Expr.find.ID(token.matches[0].replace(runescape, funescape), context) || [])[0];
                        if (!context) {
                            return results
                        }
                        selector = selector.slice(tokens.shift().value.length)
                    }
                    i = matchExpr.needsContext.test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];
                        if (Expr.relative[(type = token.type)]) {
                            break
                        }
                        if ((find = Expr.find[type])) {
                            if ((seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context))) {
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, seed);
                                    return results
                                }
                                break
                            }
                        }
                    }
                }
            }
            compile(selector, match)(seed, context, !documentIsHTML, results, rsibling.test(selector));
            return results
        }

        support.sortStable = expando.split("").sort(sortOrder).join("") === expando;
        support.detectDuplicates = hasDuplicate;
        setDocument();
        support.sortDetached = assert(function (div1) {
            return div1.compareDocumentPosition(document.createElement("div")) & 1
        });
        if (!assert(function (div) {
                div.innerHTML = "<a href='#'></a>";
                return div.firstChild.getAttribute("href") === "#"
            })) {
            addHandle("type|href|height|width", function (elem, name, isXML) {
                if (!isXML) {
                    return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2)
                }
            })
        }
        if (!support.attributes || !assert(function (div) {
                div.innerHTML = "<input/>";
                div.firstChild.setAttribute("value", "");
                return div.firstChild.getAttribute("value") === ""
            })) {
            addHandle("value", function (elem, name, isXML) {
                if (!isXML && elem.nodeName.toLowerCase() === "input") {
                    return elem.defaultValue
                }
            })
        }
        if (!assert(function (div) {
                return div.getAttribute("disabled") == null
            })) {
            addHandle(booleans, function (elem, name, isXML) {
                var val;
                if (!isXML) {
                    return (val = elem.getAttributeNode(name)) && val.specified ? val.value : elem[name] === true ? name.toLowerCase() : null
                }
            })
        }
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[":"] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains
    })(window);
    var optionsCache = {};

    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {
            object[flag] = true
        });
        return object
    }

    jQuery.Callbacks = function (options) {
        options = typeof options === "string" ? (optionsCache[options] || createOptions(options)) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function (data) {
            memory = options.memory && data;
            fired = true;
            firingIndex = firingStart || 0;
            firingStart = 0;
            firingLength = list.length;
            firing = true;
            for (; list && firingIndex < firingLength; firingIndex++) {
                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                    memory = false;
                    break
                }
            }
            firing = false;
            if (list) {
                if (stack) {
                    if (stack.length) {
                        fire(stack.shift())
                    }
                } else {
                    if (memory) {
                        list = []
                    } else {
                        self.disable()
                    }
                }
            }
        }, self = {
            add: function () {
                if (list) {
                    var start = list.length;
                    (function add(args) {
                        jQuery.each(args, function (_, arg) {
                            var type = jQuery.type(arg);
                            if (type === "function") {
                                if (!options.unique || !self.has(arg)) {
                                    list.push(arg)
                                }
                            } else {
                                if (arg && arg.length && type !== "string") {
                                    add(arg)
                                }
                            }
                        })
                    })(arguments);
                    if (firing) {
                        firingLength = list.length
                    } else {
                        if (memory) {
                            firingStart = start;
                            fire(memory)
                        }
                    }
                }
                return this
            }, remove: function () {
                if (list) {
                    jQuery.each(arguments, function (_, arg) {
                        var index;
                        while ((index = jQuery.inArray(arg, list, index)) > -1) {
                            list.splice(index, 1);
                            if (firing) {
                                if (index <= firingLength) {
                                    firingLength--
                                }
                                if (index <= firingIndex) {
                                    firingIndex--
                                }
                            }
                        }
                    })
                }
                return this
            }, has: function (fn) {
                return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length)
            }, empty: function () {
                list = [];
                firingLength = 0;
                return this
            }, disable: function () {
                list = stack = memory = undefined;
                return this
            }, disabled: function () {
                return !list
            }, lock: function () {
                stack = undefined;
                if (!memory) {
                    self.disable()
                }
                return this
            }, locked: function () {
                return !stack
            }, fireWith: function (context, args) {
                if (list && (!fired || stack)) {
                    args = args || [];
                    args = [context, args.slice ? args.slice() : args];
                    if (firing) {
                        stack.push(args)
                    } else {
                        fire(args)
                    }
                }
                return this
            }, fire: function () {
                self.fireWith(this, arguments);
                return this
            }, fired: function () {
                return !!fired
            }
        };
        return self
    };
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [["resolve", "done", jQuery.Callbacks("once memory"), "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), "rejected"], ["notify", "progress", jQuery.Callbacks("memory")]], state = "pending", promise = {
                state: function () {
                    return state
                }, always: function () {
                    deferred.done(arguments).fail(arguments);
                    return this
                }, then: function () {
                    var fns = arguments;
                    return jQuery.Deferred(function (newDefer) {
                        jQuery.each(tuples, function (i, tuple) {
                            var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                            deferred[tuple[1]](function () {
                                var returned = fn && fn.apply(this, arguments);
                                if (returned && jQuery.isFunction(returned.promise)) {
                                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify)
                                } else {
                                    newDefer[action + "With"](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments)
                                }
                            })
                        });
                        fns = null
                    }).promise()
                }, promise: function (obj) {
                    return obj != null ? jQuery.extend(obj, promise) : promise
                }
            }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock)
                }
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + "With"](this === deferred ? promise : this, arguments);
                    return this
                };
                deferred[tuple[0] + "With"] = list.fireWith
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred)
            }
            return deferred
        }, when: function (subordinate) {
            var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || (subordinate && jQuery.isFunction(subordinate.promise)) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
                return function (value) {
                    contexts[i] = this;
                    values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                    if (values === progressValues) {
                        deferred.notifyWith(contexts, values)
                    } else {
                        if (!(--remaining)) {
                            deferred.resolveWith(contexts, values)
                        }
                    }
                }
            }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues))
                    } else {
                        --remaining
                    }
                }
            }
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues)
            }
            return deferred.promise()
        }
    });
    jQuery.support = (function (support) {
        var all, a, input, select, fragment, opt, eventName, isSupported, i, div = document.createElement("div");
        div.setAttribute("className", "t");
        div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
        all = div.getElementsByTagName("*") || [];
        a = div.getElementsByTagName("a")[0];
        if (!a || !a.style || !all.length) {
            return support
        }
        select = document.createElement("select");
        opt = select.appendChild(document.createElement("option"));
        input = div.getElementsByTagName("input")[0];
        a.style.cssText = "top:1px;float:left;opacity:.5";
        support.getSetAttribute = div.className !== "t";
        support.leadingWhitespace = div.firstChild.nodeType === 3;
        support.tbody = !div.getElementsByTagName("tbody").length;
        support.htmlSerialize = !!div.getElementsByTagName("link").length;
        support.style = /top/.test(a.getAttribute("style"));
        support.hrefNormalized = a.getAttribute("href") === "/a";
        support.opacity = /^0.5/.test(a.style.opacity);
        support.cssFloat = !!a.style.cssFloat;
        support.checkOn = !!input.value;
        support.optSelected = opt.selected;
        support.enctype = !!document.createElement("form").enctype;
        support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>";
        support.inlineBlockNeedsLayout = false;
        support.shrinkWrapBlocks = false;
        support.pixelPosition = false;
        support.deleteExpando = true;
        support.noCloneEvent = true;
        support.reliableMarginRight = true;
        support.boxSizingReliable = true;
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        try {
            delete div.test
        } catch (e) {
            support.deleteExpando = false
        }
        input = document.createElement("input");
        input.setAttribute("value", "");
        support.input = input.getAttribute("value") === "";
        input.value = "t";
        input.setAttribute("type", "radio");
        support.radioValue = input.value === "t";
        input.setAttribute("checked", "t");
        input.setAttribute("name", "t");
        fragment = document.createDocumentFragment();
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        if (div.attachEvent) {
            div.attachEvent("onclick", function () {
                support.noCloneEvent = false
            });
            div.cloneNode(true).click()
        }
        for (i in {submit: true, change: true, focusin: true}) {
            div.setAttribute(eventName = "on" + i, "t");
            support[i + "Bubbles"] = eventName in window || div.attributes[eventName].expando === false
        }
        div.style.backgroundClip = "content-box";
        div.cloneNode(true).style.backgroundClip = "";
        support.clearCloneStyle = div.style.backgroundClip === "content-box";
        for (i in jQuery(support)) {
            break
        }
        support.ownLast = i !== "0";
        jQuery(function () {
            var container, marginDiv, tds, divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;", body = document.getElementsByTagName("body")[0];
            if (!body) {
                return
            }
            container = document.createElement("div");
            container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";
            body.appendChild(container).appendChild(div);
            div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
            tds = div.getElementsByTagName("td");
            tds[0].style.cssText = "padding:0;margin:0;border:0;display:none";
            isSupported = (tds[0].offsetHeight === 0);
            tds[0].style.display = "";
            tds[1].style.display = "none";
            support.reliableHiddenOffsets = isSupported && (tds[0].offsetHeight === 0);
            div.innerHTML = "";
            div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
            jQuery.swap(body, body.style.zoom != null ? {zoom: 1} : {}, function () {
                support.boxSizing = div.offsetWidth === 4
            });
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== "1%";
                support.boxSizingReliable = (window.getComputedStyle(div, null) || {width: "4px"}).width === "4px";
                marginDiv = div.appendChild(document.createElement("div"));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = "0";
                div.style.width = "1px";
                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight)
            }
            if (typeof div.style.zoom !== core_strundefined) {
                div.innerHTML = "";
                div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
                support.inlineBlockNeedsLayout = (div.offsetWidth === 3);
                div.style.display = "block";
                div.innerHTML = "<div></div>";
                div.firstChild.style.width = "5px";
                support.shrinkWrapBlocks = (div.offsetWidth !== 3);
                if (support.inlineBlockNeedsLayout) {
                    body.style.zoom = 1
                }
            }
            body.removeChild(container);
            container = div = tds = marginDiv = null
        });
        all = select = fragment = opt = a = input = null;
        return support
    })({});
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;

    function internalData(elem, name, data, pvt) {
        if (!jQuery.acceptData(elem)) {
            return
        }
        var ret, thisCache, internalKey = jQuery.expando, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        if ((!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string") {
            return
        }
        if (!id) {
            if (isNode) {
                id = elem[internalKey] = core_deletedIds.pop() || jQuery.guid++
            } else {
                id = internalKey
            }
        }
        if (!cache[id]) {
            cache[id] = isNode ? {} : {toJSON: jQuery.noop}
        }
        if (typeof name === "object" || typeof name === "function") {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name)
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name)
            }
        }
        thisCache = cache[id];
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {}
            }
            thisCache = thisCache.data
        }
        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data
        }
        if (typeof name === "string") {
            ret = thisCache[name];
            if (ret == null) {
                ret = thisCache[jQuery.camelCase(name)]
            }
        } else {
            ret = thisCache
        }
        return ret
    }

    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return
        }
        var thisCache, i, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        if (!cache[id]) {
            return
        }
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                if (!jQuery.isArray(name)) {
                    if (name in thisCache) {
                        name = [name]
                    } else {
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [name]
                        } else {
                            name = name.split(" ")
                        }
                    }
                } else {
                    name = name.concat(jQuery.map(name, jQuery.camelCase))
                }
                i = name.length;
                while (i--) {
                    delete thisCache[name[i]]
                }
                if (pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache)) {
                    return
                }
            }
        }
        if (!pvt) {
            delete cache[id].data;
            if (!isEmptyDataObject(cache[id])) {
                return
            }
        }
        if (isNode) {
            jQuery.cleanData([elem], true)
        } else {
            if (jQuery.support.deleteExpando || cache != cache.window) {
                delete cache[id]
            } else {
                cache[id] = null
            }
        }
    }

    jQuery.extend({
        cache: {},
        noData: {applet: true, embed: true, object: "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},
        hasData: function (elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem)
        },
        data: function (elem, name, data) {
            return internalData(elem, name, data)
        },
        removeData: function (elem, name) {
            return internalRemoveData(elem, name)
        },
        _data: function (elem, name, data) {
            return internalData(elem, name, data, true)
        },
        _removeData: function (elem, name) {
            return internalRemoveData(elem, name, true)
        },
        acceptData: function (elem) {
            if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {
                return false
            }
            var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
            return !noData || noData !== true && elem.getAttribute("classid") === noData
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var attrs, name, data = null, i = 0, elem = this[0];
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                        attrs = elem.attributes;
                        for (; i < attrs.length; i++) {
                            name = attrs[i].name;
                            if (name.indexOf("data-") === 0) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name])
                            }
                        }
                        jQuery._data(elem, "parsedAttrs", true)
                    }
                }
                return data
            }
            if (typeof key === "object") {
                return this.each(function () {
                    jQuery.data(this, key)
                })
            }
            return arguments.length > 1 ? this.each(function () {
                jQuery.data(this, key, value)
            }) : elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null
        }, removeData: function (key) {
            return this.each(function () {
                jQuery.removeData(this, key)
            })
        }
    });
    function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === "string") {
                try {
                    data = data === "true" ? true : data === "false" ? false : data === "null" ? null : +data + "" === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data
                } catch (e) {
                }
                jQuery.data(elem, key, data)
            } else {
                data = undefined
            }
        }
        return data
    }

    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            if (name === "data" && jQuery.isEmptyObject(obj[name])) {
                continue
            }
            if (name !== "toJSON") {
                return false
            }
        }
        return true
    }

    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || "fx") + "queue";
                queue = jQuery._data(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data))
                    } else {
                        queue.push(data)
                    }
                }
                return queue || []
            }
        }, dequeue: function (elem, type) {
            type = type || "fx";
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                jQuery.dequeue(elem, type)
            };
            if (fn === "inprogress") {
                fn = queue.shift();
                startLength--
            }
            if (fn) {
                if (type === "fx") {
                    queue.unshift("inprogress")
                }
                delete hooks.stop;
                fn.call(elem, next, hooks)
            }
            if (!startLength && hooks) {
                hooks.empty.fire()
            }
        }, _queueHooks: function (elem, type) {
            var key = type + "queueHooks";
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                    empty: jQuery.Callbacks("once memory").add(function () {
                        jQuery._removeData(elem, type + "queue");
                        jQuery._removeData(elem, key)
                    })
                })
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== "string") {
                data = type;
                type = "fx";
                setter--
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type)
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === "fx" && queue[0] !== "inprogress") {
                    jQuery.dequeue(this, type)
                }
            })
        }, dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type)
            })
        }, delay: function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || "fx";
            return this.queue(type, function (next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function () {
                    clearTimeout(timeout)
                }
            })
        }, clearQueue: function (type) {
            return this.queue(type || "fx", [])
        }, promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                if (!(--count)) {
                    defer.resolveWith(elements, [elements])
                }
            };
            if (typeof type !== "string") {
                obj = type;
                type = undefined
            }
            type = type || "fx";
            while (i--) {
                tmp = jQuery._data(elements[i], type + "queueHooks");
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve)
                }
            }
            resolve();
            return defer.promise(obj)
        }
    });
    var nodeHook, boolHook, rclass = /[\t\r\n\f]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, getSetInput = jQuery.support.input;
    jQuery.fn.extend({
        attr: function (name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1)
        }, removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name)
            })
        }, prop: function (name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1)
        }, removeProp: function (name) {
            name = jQuery.propFix[name] || name;
            return this.each(function () {
                try {
                    this[name] = undefined;
                    delete this[name]
                } catch (e) {
                }
            })
        }, addClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, this.className))
                })
            }
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : " ");
                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            if (cur.indexOf(" " + clazz + " ") < 0) {
                                cur += clazz + " "
                            }
                        }
                        elem.className = jQuery.trim(cur)
                    }
                }
            }
            return this
        }, removeClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === "string" && value;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, this.className))
                })
            }
            if (proceed) {
                classes = (value || "").match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (" " + elem.className + " ").replace(rclass, " ") : "");
                    if (cur) {
                        j = 0;
                        while ((clazz = classes[j++])) {
                            while (cur.indexOf(" " + clazz + " ") >= 0) {
                                cur = cur.replace(" " + clazz + " ", " ")
                            }
                        }
                        elem.className = value ? jQuery.trim(cur) : ""
                    }
                }
            }
            return this
        }, toggleClass: function (value, stateVal) {
            var type = typeof value;
            if (typeof stateVal === "boolean" && type === "string") {
                return stateVal ? this.addClass(value) : this.removeClass(value)
            }
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal)
                })
            }
            return this.each(function () {
                if (type === "string") {
                    var className, i = 0, self = jQuery(this), classNames = value.match(core_rnotwhite) || [];
                    while ((className = classNames[i++])) {
                        if (self.hasClass(className)) {
                            self.removeClass(className)
                        } else {
                            self.addClass(className)
                        }
                    }
                } else {
                    if (type === core_strundefined || type === "boolean") {
                        if (this.className) {
                            jQuery._data(this, "__className__", this.className)
                        }
                        this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || ""
                    }
                }
            })
        }, hasClass: function (selector) {
            var className = " " + selector + " ", i = 0, l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf(className) >= 0) {
                    return true
                }
            }
            return false
        }, val: function (value) {
            var ret, hooks, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                        return ret
                    }
                    ret = elem.value;
                    return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret
                }
                return
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
                var val;
                if (this.nodeType !== 1) {
                    return
                }
                if (isFunction) {
                    val = value.call(this, i, jQuery(this).val())
                } else {
                    val = value
                }
                if (val == null) {
                    val = ""
                } else {
                    if (typeof val === "number") {
                        val += ""
                    } else {
                        if (jQuery.isArray(val)) {
                            val = jQuery.map(val, function (value) {
                                return value == null ? "" : value + ""
                            })
                        }
                    }
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                    this.value = val
                }
            })
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = jQuery.find.attr(elem, "value");
                    return val != null ? val : elem.text
                }
            }, select: {
                get: function (elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === "select-one" || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value
                            }
                            values.push(value)
                        }
                    }
                    return values
                }, set: function (elem, value) {
                    var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
                    while (i--) {
                        option = options[i];
                        if ((option.selected = jQuery.inArray(jQuery(option).val(), values) >= 0)) {
                            optionSet = true
                        }
                    }
                    if (!optionSet) {
                        elem.selectedIndex = -1
                    }
                    return values
                }
            }
        }, attr: function (elem, name, value) {
            var hooks, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return
            }
            if (typeof elem.getAttribute === core_strundefined) {
                return jQuery.prop(elem, name, value)
            }
            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook)
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name)
                } else {
                    if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                        return ret
                    } else {
                        elem.setAttribute(name, value + "");
                        return value
                    }
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                    return ret
                } else {
                    ret = jQuery.find.attr(elem, name);
                    return ret == null ? undefined : ret
                }
            }
        }, removeAttr: function (elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while ((name = attrNames[i++])) {
                    propName = jQuery.propFix[name] || name;
                    if (jQuery.expr.match.bool.test(name)) {
                        if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                            elem[propName] = false
                        } else {
                            elem[jQuery.camelCase("default-" + name)] = elem[propName] = false
                        }
                    } else {
                        jQuery.attr(elem, name, "")
                    }
                    elem.removeAttribute(getSetAttribute ? name : propName)
                }
            }
        }, attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                        var val = elem.value;
                        elem.setAttribute("type", value);
                        if (val) {
                            elem.value = val
                        }
                        return value
                    }
                }
            }
        }, propFix: {"for": "htmlFor", "class": "className"}, prop: function (elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name]
            }
            if (value !== undefined) {
                return hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : (elem[name] = value)
            } else {
                return hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name]
            }
        }, propHooks: {
            tabIndex: {
                get: function (elem) {
                    var tabindex = jQuery.find.attr(elem, "tabindex");
                    return tabindex ? parseInt(tabindex, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : -1
                }
            }
        }
    });
    boolHook = {
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name)
            } else {
                if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                    elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name)
                } else {
                    elem[jQuery.camelCase("default-" + name)] = elem[name] = true
                }
            }
            return name
        }
    };
    jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
        var getter = jQuery.expr.attrHandle[name] || jQuery.find.attr;
        jQuery.expr.attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name) ? function (elem, name, isXML) {
            var fn = jQuery.expr.attrHandle[name], ret = isXML ? undefined : (jQuery.expr.attrHandle[name] = undefined) != getter(elem, name, isXML) ? name.toLowerCase() : null;
            jQuery.expr.attrHandle[name] = fn;
            return ret
        } : function (elem, name, isXML) {
            return isXML ? undefined : elem[jQuery.camelCase("default-" + name)] ? name.toLowerCase() : null
        }
    });
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            set: function (elem, value, name) {
                if (jQuery.nodeName(elem, "input")) {
                    elem.defaultValue = value
                } else {
                    return nodeHook && nodeHook.set(elem, value, name)
                }
            }
        }
    }
    if (!getSetAttribute) {
        nodeHook = {
            set: function (elem, value, name) {
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode((ret = elem.ownerDocument.createAttribute(name)))
                }
                ret.value = value += "";
                return name === "value" || value === elem.getAttribute(name) ? value : undefined
            }
        };
        jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords = function (elem, name, isXML) {
            var ret;
            return isXML ? undefined : (ret = elem.getAttributeNode(name)) && ret.value !== "" ? ret.value : null
        };
        jQuery.valHooks.button = {
            get: function (elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && ret.specified ? ret.value : undefined
            }, set: nodeHook.set
        };
        jQuery.attrHooks.contenteditable = {
            set: function (elem, value, name) {
                nodeHook.set(elem, value === "" ? false : value, name)
            }
        };
        jQuery.each(["width", "height"], function (i, name) {
            jQuery.attrHooks[name] = {
                set: function (elem, value) {
                    if (value === "") {
                        elem.setAttribute(name, "auto");
                        return value
                    }
                }
            }
        })
    }
    if (!jQuery.support.hrefNormalized) {
        jQuery.each(["href", "src"], function (i, name) {
            jQuery.propHooks[name] = {
                get: function (elem) {
                    return elem.getAttribute(name, 4)
                }
            }
        })
    }
    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {
            get: function (elem) {
                return elem.style.cssText || undefined
            }, set: function (elem, value) {
                return (elem.style.cssText = value + "")
            }
        }
    }
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex
                    }
                }
                return null
            }
        }
    }
    jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
        jQuery.propFix[this.toLowerCase()] = this
    });
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = "encoding"
    }
    jQuery.each(["radio", "checkbox"], function () {
        jQuery.valHooks[this] = {
            set: function (elem, value) {
                if (jQuery.isArray(value)) {
                    return (elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0)
                }
            }
        };
        if (!jQuery.support.checkOn) {
            jQuery.valHooks[this].get = function (elem) {
                return elem.getAttribute("value") === null ? "on" : elem.value
            }
        }
    });
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

    function returnTrue() {
        return true
    }

    function returnFalse() {
        return false
    }

    function safeActiveElement() {
        try {
            return document.activeElement
        } catch (err) {
        }
    }

    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (!elemData) {
                return
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {}
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined
                };
                eventHandle.elem = elem
            }
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    continue
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join(".")
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false)
                        } else {
                            if (elem.attachEvent) {
                                elem.attachEvent("on" + type, eventHandle)
                            }
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj)
                } else {
                    handlers.push(handleObj)
                }
                jQuery.event.global[type] = true
            }
            elem = null
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) {
                return
            }
            types = (types || "").match(core_rnotwhite) || [""];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || "").split(".").sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true)
                    }
                    continue
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj)
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle)
                    }
                    delete events[type]
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                jQuery._removeData(elem, "events")
            }
        },
        trigger: function (event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [elem || document], type = core_hasOwn.call(event, "type") ? event.type : event, namespaces = core_hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return
            }
            if (type.indexOf(".") >= 0) {
                namespaces = type.split(".");
                type = namespaces.shift();
                namespaces.sort()
            }
            ontype = type.indexOf(":") < 0 && "on" + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);
            event.isTrigger = onlyHandlers ? 2 : 3;
            event.namespace = namespaces.join(".");
            event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window)
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (jQuery._data(cur, "events") || {})[event.type] && jQuery._data(cur, "handle");
                if (handle) {
                    handle.apply(cur, data)
                }
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                    event.preventDefault()
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null
                        }
                        jQuery.event.triggered = type;
                        try {
                            elem[type]()
                        } catch (e) {
                        }
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp
                        }
                    }
                }
            }
            return event.result
        },
        dispatch: function (event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = core_slice.call(arguments), handlers = (jQuery._data(this, "events") || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation()
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event)
            }
            return event.result
        },
        handlers: function (event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== "click")) {
                for (; cur != this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + " ";
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length
                            }
                            if (matches[sel]) {
                                matches.push(handleObj)
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({elem: cur, handlers: matches})
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({elem: this, handlers: handlers.slice(delegateCount)})
            }
            return handlerQueue
        },
        fix: function (event) {
            if (event[jQuery.expando]) {
                return event
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {}
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop]
            }
            if (!event.target) {
                event.target = originalEvent.srcElement || document
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode
            }
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event
        },
        props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
        fixHooks: {},
        keyHooks: {
            props: "char charCode key keyCode".split(" "), filter: function (event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode
                }
                return event
            }
        },
        mouseHooks: {
            props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
            filter: function (event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0)
                }
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement
                }
                if (!event.which && button !== undefined) {
                    event.which = (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)))
                }
                return event
            }
        },
        special: {
            load: {noBubble: true}, focus: {
                trigger: function () {
                    if (this !== safeActiveElement() && this.focus) {
                        try {
                            this.focus();
                            return false
                        } catch (e) {
                        }
                    }
                }, delegateType: "focusin"
            }, blur: {
                trigger: function () {
                    if (this === safeActiveElement() && this.blur) {
                        this.blur();
                        return false
                    }
                }, delegateType: "focusout"
            }, click: {
                trigger: function () {
                    if (jQuery.nodeName(this, "input") && this.type === "checkbox" && this.click) {
                        this.click();
                        return false
                    }
                }, _default: function (event) {
                    return jQuery.nodeName(event.target, "a")
                }
            }, beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined) {
                        event.originalEvent.returnValue = event.result
                    }
                }
            }
        },
        simulate: function (type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {type: type, isSimulated: true, originalEvent: {}});
            if (bubble) {
                jQuery.event.trigger(e, null, elem)
            } else {
                jQuery.event.dispatch.call(elem, e)
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault()
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false)
        }
    } : function (elem, type, handle) {
        var name = "on" + type;
        if (elem.detachEvent) {
            if (typeof elem[name] === core_strundefined) {
                elem[name] = null
            }
            elem.detachEvent(name, handle)
        }
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props)
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = (src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault()) ? returnTrue : returnFalse
        } else {
            this.type = src
        }
        if (props) {
            jQuery.extend(this, props)
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return
            }
            if (e.preventDefault) {
                e.preventDefault()
            } else {
                e.returnValue = false
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) {
                return
            }
            if (e.stopPropagation) {
                e.stopPropagation()
            }
            e.cancelBubble = true
        },
        stopImmediatePropagation: function () {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation()
        }
    };
    jQuery.each({mouseenter: "mouseover", mouseleave: "mouseout"}, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix, bindType: fix, handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || (related !== target && !jQuery.contains(target, related))) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix
                }
                return ret
            }
        }
    });
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function () {
                if (jQuery.nodeName(this, "form")) {
                    return false
                }
                jQuery.event.add(this, "click._submit keypress._submit", function (e) {
                    var elem = e.target, form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                    if (form && !jQuery._data(form, "submitBubbles")) {
                        jQuery.event.add(form, "submit._submit", function (event) {
                            event._submit_bubble = true
                        });
                        jQuery._data(form, "submitBubbles", true)
                    }
                })
            }, postDispatch: function (event) {
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate("submit", this.parentNode, event, true)
                    }
                }
            }, teardown: function () {
                if (jQuery.nodeName(this, "form")) {
                    return false
                }
                jQuery.event.remove(this, "._submit")
            }
        }
    }
    if (!jQuery.support.changeBubbles) {
        jQuery.event.special.change = {
            setup: function () {
                if (rformElems.test(this.nodeName)) {
                    if (this.type === "checkbox" || this.type === "radio") {
                        jQuery.event.add(this, "propertychange._change", function (event) {
                            if (event.originalEvent.propertyName === "checked") {
                                this._just_changed = true
                            }
                        });
                        jQuery.event.add(this, "click._change", function (event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false
                            }
                            jQuery.event.simulate("change", this, event, true)
                        })
                    }
                    return false
                }
                jQuery.event.add(this, "beforeactivate._change", function (e) {
                    var elem = e.target;
                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, "changeBubbles")) {
                        jQuery.event.add(elem, "change._change", function (event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate("change", this.parentNode, event, true)
                            }
                        });
                        jQuery._data(elem, "changeBubbles", true)
                    }
                })
            }, handle: function (event) {
                var elem = event.target;
                if (this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox")) {
                    return event.handleObj.handler.apply(this, arguments)
                }
            }, teardown: function () {
                jQuery.event.remove(this, "._change");
                return !rformElems.test(this.nodeName)
            }
        }
    }
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({focus: "focusin", blur: "focusout"}, function (orig, fix) {
            var attaches = 0, handler = function (event) {
                jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true)
            };
            jQuery.event.special[fix] = {
                setup: function () {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true)
                    }
                }, teardown: function () {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true)
                    }
                }
            }
        })
    }
    jQuery.fn.extend({
        on: function (types, selector, data, fn, one) {
            var type, origFn;
            if (typeof types === "object") {
                if (typeof selector !== "string") {
                    data = data || selector;
                    selector = undefined
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one)
                }
                return this
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined
            } else {
                if (fn == null) {
                    if (typeof selector === "string") {
                        fn = data;
                        data = undefined
                    } else {
                        fn = data;
                        data = selector;
                        selector = undefined
                    }
                }
            }
            if (fn === false) {
                fn = returnFalse
            } else {
                if (!fn) {
                    return this
                }
            }
            if (one === 1) {
                origFn = fn;
                fn = function (event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments)
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++)
            }
            return this.each(function () {
                jQuery.event.add(this, types, fn, data, selector)
            })
        }, one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1)
        }, off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this
            }
            if (typeof types === "object") {
                for (type in types) {
                    this.off(type, selector, types[type])
                }
                return this
            }
            if (selector === false || typeof selector === "function") {
                fn = selector;
                selector = undefined
            }
            if (fn === false) {
                fn = returnFalse
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector)
            })
        }, trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this)
            })
        }, triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true)
            }
        }
    });
    var isSimple = /^.[^:#\[\.,]*$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, rneedsContext = jQuery.expr.match.needsContext, guaranteedUnique = {
        children: true,
        contents: true,
        next: true,
        prev: true
    };
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret = [], self = this, len = self.length;
            if (typeof selector !== "string") {
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true
                        }
                    }
                }))
            }
            for (i = 0; i < len; i++) {
                jQuery.find(selector, self[i], ret)
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = this.selector ? this.selector + " " + selector : selector;
            return ret
        }, has: function (target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function () {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true
                    }
                }
            })
        }, not: function (selector) {
            return this.pushStack(winnow(this, selector || [], true))
        }, filter: function (selector) {
            return this.pushStack(winnow(this, selector || [], false))
        }, is: function (selector) {
            return !!winnow(this, typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length
        }, closest: function (selectors, context) {
            var cur, i = 0, l = this.length, ret = [], pos = rneedsContext.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
            for (; i < l; i++) {
                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
                    if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
                        cur = ret.push(cur);
                        break
                    }
                }
            }
            return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret)
        }, index: function (elem) {
            if (!elem) {
                return (this[0] && this[0].parentNode) ? this.first().prevAll().length : -1
            }
            if (typeof elem === "string") {
                return jQuery.inArray(this[0], jQuery(elem))
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this)
        }, add: function (selector, context) {
            var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector), all = jQuery.merge(this.get(), set);
            return this.pushStack(jQuery.unique(all))
        }, addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector))
        }
    });
    function sibling(cur, dir) {
        do {
            cur = cur[dir]
        } while (cur && cur.nodeType !== 1);
        return cur
    }

    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null
        }, parents: function (elem) {
            return jQuery.dir(elem, "parentNode")
        }, parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, "parentNode", until)
        }, next: function (elem) {
            return sibling(elem, "nextSibling")
        }, prev: function (elem) {
            return sibling(elem, "previousSibling")
        }, nextAll: function (elem) {
            return jQuery.dir(elem, "nextSibling")
        }, prevAll: function (elem) {
            return jQuery.dir(elem, "previousSibling")
        }, nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, "nextSibling", until)
        }, prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, "previousSibling", until)
        }, siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem)
        }, children: function (elem) {
            return jQuery.sibling(elem.firstChild)
        }, contents: function (elem) {
            return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes)
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (name.slice(-5) !== "Until") {
                selector = until
            }
            if (selector && typeof selector === "string") {
                ret = jQuery.filter(selector, ret)
            }
            if (this.length > 1) {
                if (!guaranteedUnique[name]) {
                    ret = jQuery.unique(ret)
                }
                if (rparentsprev.test(name)) {
                    ret = ret.reverse()
                }
            }
            return this.pushStack(ret)
        }
    });
    jQuery.extend({
        filter: function (expr, elems, not) {
            var elem = elems[0];
            if (not) {
                expr = ":not(" + expr + ")"
            }
            return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
                return elem.nodeType === 1
            }))
        }, dir: function (elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur)
                }
                cur = cur[dir]
            }
            return matched
        }, sibling: function (n, elem) {
            var r = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n)
                }
            }
            return r
        }
    });
    function winnow(elements, qualifier, not) {
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                return !!qualifier.call(elem, i, elem) !== not
            })
        }
        if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return (elem === qualifier) !== not
            })
        }
        if (typeof qualifier === "string") {
            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, elements, not)
            }
            qualifier = jQuery.filter(qualifier, elements)
        }
        return jQuery.grep(elements, function (elem) {
            return (jQuery.inArray(elem, qualifier) >= 0) !== not
        })
    }

    function createSafeFragment(document) {
        var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(list.pop())
            }
        }
        return safeFrag
    }

    var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
        option: [1, "<select multiple='multiple'>", "</select>"],
        legend: [1, "<fieldset>", "</fieldset>"],
        area: [1, "<map>", "</map>"],
        param: [1, "<object>", "</object>"],
        thead: [1, "<table>", "</table>"],
        tr: [2, "<table><tbody>", "</tbody></table>"],
        col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
        td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
        _default: jQuery.support.htmlSerialize ? [0, "", ""] : [1, "X<div>", "</div>"]
    }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement("div"));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.fn.extend({
        text: function (value) {
            return jQuery.access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value))
            }, null, value, arguments.length)
        }, append: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.appendChild(elem)
                }
            })
        }, prepend: function () {
            return this.domManip(arguments, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    var target = manipulationTarget(this, elem);
                    target.insertBefore(elem, target.firstChild)
                }
            })
        }, before: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this)
                }
            })
        }, after: function () {
            return this.domManip(arguments, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling)
                }
            })
        }, remove: function (selector, keepData) {
            var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
            for (; (elem = elems[i]) != null; i++) {
                if (!keepData && elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem))
                }
                if (elem.parentNode) {
                    if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                        setGlobalEval(getAll(elem, "script"))
                    }
                    elem.parentNode.removeChild(elem)
                }
            }
            return this
        }, empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false))
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild)
                }
                if (elem.options && jQuery.nodeName(elem, "select")) {
                    elem.options.length = 0
                }
            }
            return this
        }, clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents)
            })
        }, html: function (value) {
            return jQuery.access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined) {
                    return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, "") : undefined
                }
                if (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, "<$1></$2>");
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value
                            }
                        }
                        elem = 0
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value)
                }
            }, null, value, arguments.length)
        }, replaceWith: function () {
            var args = jQuery.map(this, function (elem) {
                return [elem.nextSibling, elem.parentNode]
            }), i = 0;
            this.domManip(arguments, function (elem) {
                var next = args[i++], parent = args[i++];
                if (parent) {
                    if (next && next.parentNode !== parent) {
                        next = this.nextSibling
                    }
                    jQuery(this).remove();
                    parent.insertBefore(elem, next)
                }
            }, true);
            return i ? this : this.remove()
        }, detach: function (selector) {
            return this.remove(selector, true)
        }, domManip: function (args, callback, allowIntersection) {
            args = core_concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || !(l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test(value))) {
                return this.each(function (index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, self.html())
                    }
                    self.domManip(args, callback, allowIntersection)
                })
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, !allowIntersection && this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first
                }
                if (first) {
                    scripts = jQuery.map(getAll(fragment, "script"), disableScript);
                    hasScripts = scripts.length;
                    for (; i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, "script"))
                            }
                        }
                        callback.call(this[i], node, i)
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || "") && !jQuery._data(node, "globalEval") && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    jQuery._evalUrl(node.src)
                                } else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript, ""))
                                }
                            }
                        }
                    }
                    fragment = first = null
                }
            }
            return this
        }
    });
    function manipulationTarget(elem, content) {
        return jQuery.nodeName(elem, "table") && jQuery.nodeName(content.nodeType === 1 ? content : content.firstChild, "tr") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem
    }

    function disableScript(elem) {
        elem.type = (jQuery.find.attr(elem, "type") !== null) + "/" + elem.type;
        return elem
    }

    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1]
        } else {
            elem.removeAttribute("type")
        }
        return elem
    }

    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (; (elem = elems[i]) != null; i++) {
            jQuery._data(elem, "globalEval", !refElements || jQuery._data(refElements[i], "globalEval"))
        }
    }

    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return
        }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i])
                }
            }
        }
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data)
        }
    }

    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (dest.nodeType !== 1) {
            return
        }
        nodeName = dest.nodeName.toLowerCase();
        if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle)
            }
            dest.removeAttribute(jQuery.expando)
        }
        if (nodeName === "script" && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest)
        } else {
            if (nodeName === "object") {
                if (dest.parentNode) {
                    dest.outerHTML = src.outerHTML
                }
                if (jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))) {
                    dest.innerHTML = src.innerHTML
                }
            } else {
                if (nodeName === "input" && manipulation_rcheckableType.test(src.type)) {
                    dest.defaultChecked = dest.checked = src.checked;
                    if (dest.value !== src.value) {
                        dest.value = src.value
                    }
                } else {
                    if (nodeName === "option") {
                        dest.defaultSelected = dest.selected = src.defaultSelected
                    } else {
                        if (nodeName === "input" || nodeName === "textarea") {
                            dest.defaultValue = src.defaultValue
                        }
                    }
                }
            }
        }
    }

    jQuery.each({
        appendTo: "append",
        prependTo: "prepend",
        insertBefore: "before",
        insertAfter: "after",
        replaceAll: "replaceWith"
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                core_push.apply(ret, elems.get())
            }
            return this.pushStack(ret)
        }
    });
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || "*") : typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || "*") : undefined;
        if (!found) {
            for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem)
                } else {
                    jQuery.merge(found, getAll(elem, tag))
                }
            }
        }
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found
    }

    function fixDefaultChecked(elem) {
        if (manipulation_rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked
        }
    }

    jQuery.extend({
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")) {
                clone = elem.cloneNode(true)
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild)
            }
            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; (node = srcElements[i]) != null; ++i) {
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i])
                    }
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0; (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i])
                    }
                } else {
                    cloneCopyEvent(elem, clone)
                }
            }
            destElements = getAll(clone, "script");
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, "script"))
            }
            destElements = srcElements = node = null;
            return clone
        }, buildFragment: function (elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0;
            for (; i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    if (jQuery.type(elem) === "object") {
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem)
                    } else {
                        if (!rhtml.test(elem)) {
                            nodes.push(context.createTextNode(elem))
                        } else {
                            tmp = tmp || safe.appendChild(context.createElement("div"));
                            tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
                            wrap = wrapMap[tag] || wrapMap._default;
                            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, "<$1></$2>") + wrap[2];
                            j = wrap[0];
                            while (j--) {
                                tmp = tmp.lastChild
                            }
                            if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                                nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]))
                            }
                            if (!jQuery.support.tbody) {
                                elem = tag === "table" && !rtbody.test(elem) ? tmp.firstChild : wrap[1] === "<table>" && !rtbody.test(elem) ? tmp : 0;
                                j = elem && elem.childNodes.length;
                                while (j--) {
                                    if (jQuery.nodeName((tbody = elem.childNodes[j]), "tbody") && !tbody.childNodes.length) {
                                        elem.removeChild(tbody)
                                    }
                                }
                            }
                            jQuery.merge(nodes, tmp.childNodes);
                            tmp.textContent = "";
                            while (tmp.firstChild) {
                                tmp.removeChild(tmp.firstChild)
                            }
                            tmp = safe.lastChild
                        }
                    }
                }
            }
            if (tmp) {
                safe.removeChild(tmp)
            }
            if (!jQuery.support.appendChecked) {
                jQuery.grep(getAll(nodes, "input"), fixDefaultChecked)
            }
            i = 0;
            while ((elem = nodes[i++])) {
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), "script");
                if (contains) {
                    setGlobalEval(tmp)
                }
                if (scripts) {
                    j = 0;
                    while ((elem = tmp[j++])) {
                        if (rscriptType.test(elem.type || "")) {
                            scripts.push(elem)
                        }
                    }
                }
            }
            tmp = null;
            return safe
        }, cleanData: function (elems, acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = jQuery.support.deleteExpando, special = jQuery.event.special;
            for (; (elem = elems[i]) != null; i++) {
                if (acceptData || jQuery.acceptData(elem)) {
                    id = elem[internalKey];
                    data = id && cache[id];
                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type)
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle)
                                }
                            }
                        }
                        if (cache[id]) {
                            delete cache[id];
                            if (deleteExpando) {
                                delete elem[internalKey]
                            } else {
                                if (typeof elem.removeAttribute !== core_strundefined) {
                                    elem.removeAttribute(internalKey)
                                } else {
                                    elem[internalKey] = null
                                }
                            }
                            core_deletedIds.push(id)
                        }
                    }
                }
            }
        }, _evalUrl: function (url) {
            return jQuery.ajax({url: url, type: "GET", dataType: "script", async: false, global: false, "throws": true})
        }
    });
    jQuery.fn.extend({
        wrapAll: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapAll(html.call(this, i))
                })
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0])
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild
                    }
                    return elem
                }).append(this)
            }
            return this
        }, wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i))
                })
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html)
                } else {
                    self.append(html)
                }
            })
        }, wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html)
            })
        }, unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, "body")) {
                    jQuery(this).replaceWith(this.childNodes)
                }
            }).end()
        }
    });
    var iframe, getStyles, curCSS, ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rposition = /^(top|right|bottom|left)$/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp("^(" + core_pnum + ")(.*)$", "i"), rnumnonpx = new RegExp("^(" + core_pnum + ")(?!px)[a-z%]+$", "i"), rrelNum = new RegExp("^([+-])=(" + core_pnum + ")", "i"), elemdisplay = {BODY: "block"}, cssShow = {
        position: "absolute",
        visibility: "hidden",
        display: "block"
    }, cssNormalTransform = {
        letterSpacing: 0,
        fontWeight: 400
    }, cssExpand = ["Top", "Right", "Bottom", "Left"], cssPrefixes = ["Webkit", "O", "Moz", "ms"];

    function vendorPropName(style, name) {
        if (name in style) {
            return name
        }
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name
            }
        }
        return origName
    }

    function isHidden(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument, elem)
    }

    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue
            }
            values[index] = jQuery._data(elem, "olddisplay");
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === "none") {
                    elem.style.display = ""
                }
                if (elem.style.display === "" && isHidden(elem)) {
                    values[index] = jQuery._data(elem, "olddisplay", css_defaultDisplay(elem.nodeName))
                }
            } else {
                if (!values[index]) {
                    hidden = isHidden(elem);
                    if (display && display !== "none" || !hidden) {
                        jQuery._data(elem, "olddisplay", hidden ? display : jQuery.css(elem, "display"))
                    }
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue
            }
            if (!show || elem.style.display === "none" || elem.style.display === "") {
                elem.style.display = show ? values[index] || "" : "none"
            }
        }
        return elements
    }

    jQuery.fn.extend({
        css: function (name, value) {
            return jQuery.access(this, function (elem, name, value) {
                var len, styles, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles)
                    }
                    return map
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name)
            }, name, value, arguments.length > 1)
        }, show: function () {
            return showHide(this, true)
        }, hide: function () {
            return showHide(this)
        }, toggle: function (state) {
            if (typeof state === "boolean") {
                return state ? this.show() : this.hide()
            }
            return this.each(function () {
                if (isHidden(this)) {
                    jQuery(this).show()
                } else {
                    jQuery(this).hide()
                }
            })
        }
    });
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, "opacity");
                        return ret === "" ? "1" : ret
                    }
                }
            }
        },
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: {"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"},
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === "string" && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = "number"
                }
                if (value == null || type === "number" && isNaN(value)) {
                    return
                }
                if (type === "number" && !jQuery.cssNumber[origName]) {
                    value += "px"
                }
                if (!jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
                    style[name] = "inherit"
                }
                if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    try {
                        style[name] = value
                    } catch (e) {
                    }
                }
            } else {
                if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret
                }
                return style[name]
            }
        },
        css: function (elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && "get" in hooks) {
                val = hooks.get(elem, true, extra)
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles)
            }
            if (val === "normal" && name in cssNormalTransform) {
                val = cssNormalTransform[name]
            }
            if (extra === "" || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val
            }
            return val
        }
    });
    if (window.getComputedStyle) {
        getStyles = function (elem) {
            return window.getComputedStyle(elem, null)
        };
        curCSS = function (elem, name, _computed) {
            var width, minWidth, maxWidth, computed = _computed || getStyles(elem), ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
            if (computed) {
                if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name)
                }
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth
                }
            }
            return ret
        }
    } else {
        if (document.documentElement.currentStyle) {
            getStyles = function (elem) {
                return elem.currentStyle
            };
            curCSS = function (elem, name, _computed) {
                var left, rs, rsLeft, computed = _computed || getStyles(elem), ret = computed ? computed[name] : undefined, style = elem.style;
                if (ret == null && style && style[name]) {
                    ret = style[name]
                }
                if (rnumnonpx.test(ret) && !rposition.test(name)) {
                    left = style.left;
                    rs = elem.runtimeStyle;
                    rsLeft = rs && rs.left;
                    if (rsLeft) {
                        rs.left = elem.currentStyle.left
                    }
                    style.left = name === "fontSize" ? "1em" : ret;
                    ret = style.pixelLeft + "px";
                    style.left = left;
                    if (rsLeft) {
                        rs.left = rsLeft
                    }
                }
                return ret === "" ? "auto" : ret
            }
        }
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || "px") : value
    }

    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? "border" : "content") ? 4 : name === "width" ? 1 : 0, val = 0;
        for (; i < 4; i += 2) {
            if (extra === "margin") {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles)
            }
            if (isBorderBox) {
                if (extra === "content") {
                    val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles)
                }
                if (extra !== "margin") {
                    val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                }
            } else {
                val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);
                if (extra !== "padding") {
                    val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles)
                }
            }
        }
        return val
    }

    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === "width" ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box";
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name]
            }
            if (rnumnonpx.test(val)) {
                return val
            }
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
            val = parseFloat(val) || 0
        }
        return (val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles)) + "px"
    }

    function css_defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === "none" || !display) {
                iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>").css("cssText", "display:block !important")).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write("<!doctype html><html><body>");
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach()
            }
            elemdisplay[nodeName] = display
        }
        return display
    }

    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], "display");
        elem.remove();
        return display
    }

    jQuery.each(["height", "width"], function (i, name) {
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, "display")) ? jQuery.swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, name, extra)
                    }) : getWidthOrHeight(elem, name, extra)
                }
            }, set: function (elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles) : 0)
            }
        }
    });
    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function (elem, computed) {
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? (0.01 * parseFloat(RegExp.$1)) + "" : computed ? "1" : ""
            }, set: function (elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                style.zoom = 1;
                if ((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha, "")) === "" && style.removeAttribute) {
                    style.removeAttribute("filter");
                    if (value === "" || currentStyle && !currentStyle.filter) {
                        return
                    }
                }
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity
            }
        }
    }
    jQuery(function () {
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {
                get: function (elem, computed) {
                    if (computed) {
                        return jQuery.swap(elem, {display: "inline-block"}, curCSS, [elem, "marginRight"])
                    }
                }
            }
        }
        if (!jQuery.support.pixelPosition && jQuery.fn.position) {
            jQuery.each(["top", "left"], function (i, prop) {
                jQuery.cssHooks[prop] = {
                    get: function (elem, computed) {
                        if (computed) {
                            computed = curCSS(elem, prop);
                            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed
                        }
                    }
                }
            })
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function (elem) {
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css(elem, "display")) === "none")
        };
        jQuery.expr.filters.visible = function (elem) {
            return !jQuery.expr.filters.hidden(elem)
        }
    }
    jQuery.each({margin: "", padding: "", border: "Width"}, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === "string" ? value.split(" ") : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0]
                }
                return expanded
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber
        }
    });
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray())
        }, serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, "elements");
                return elements ? jQuery.makeArray(elements) : this
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type))
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                    return {name: elem.name, value: val.replace(rCRLF, "\r\n")}
                }) : {name: elem.name, value: val.replace(rCRLF, "\r\n")}
            }).get()
        }
    });
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) {
            value = jQuery.isFunction(value) ? value() : (value == null ? "" : value);
            s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value)
        };
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional
        }
        if (jQuery.isArray(a) || (a.jquery && !jQuery.isPlainObject(a))) {
            jQuery.each(a, function () {
                add(this.name, this.value)
            })
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add)
            }
        }
        return s.join("&").replace(r20, "+")
    };
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v)
                } else {
                    buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add)
                }
            })
        } else {
            if (!traditional && jQuery.type(obj) === "object") {
                for (name in obj) {
                    buildParams(prefix + "[" + name + "]", obj[name], traditional, add)
                }
            } else {
                add(prefix, obj)
            }
        }
    }

    jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name)
        }
    });
    jQuery.fn.extend({
        hover: function (fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver)
        }, bind: function (types, data, fn) {
            return this.on(types, null, data, fn)
        }, unbind: function (types, fn) {
            return this.off(types, null, fn)
        }, delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn)
        }, undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn)
        }
    });
    var ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, _load = jQuery.fn.load, prefilters = {}, transports = {}, allTypes = "*/".concat("*");
    try {
        ajaxLocation = location.href
    } catch (e) {
        ajaxLocation = document.createElement("a");
        ajaxLocation.href = "";
        ajaxLocation = ajaxLocation.href
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*"
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while ((dataType = dataTypes[i++])) {
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func)
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func)
                    }
                }
            }
        }
    }

    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = (structure === transports);

        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false
                } else {
                    if (seekingTransport) {
                        return !(selected = dataTypeOrTransport)
                    }
                }
            });
            return selected
        }

        return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*")
    }

    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key]
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep)
        }
        return target
    }

    jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== "string" && _load) {
            return _load.apply(this, arguments)
        }
        var selector, response, type, self = this, off = url.indexOf(" ");
        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off)
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined
        } else {
            if (params && typeof params === "object") {
                type = "POST"
            }
        }
        if (self.length > 0) {
            jQuery.ajax({url: url, type: type, dataType: "html", data: params}).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) : responseText)
            }).complete(callback && function (jqXHR, status) {
                    self.each(callback, response || [jqXHR.responseText, status, jqXHR])
                })
        }
        return this
    };
    jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn)
        }
    });
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: "GET",
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: "application/x-www-form-urlencoded; charset=UTF-8",
            accepts: {
                "*": allTypes,
                text: "text/plain",
                html: "text/html",
                xml: "application/xml, text/xml",
                json: "application/json, text/javascript"
            },
            contents: {xml: /xml/, html: /html/, json: /json/},
            responseFields: {xml: "responseXML", text: "responseText", json: "responseJSON"},
            converters: {
                "* text": String,
                "text html": true,
                "text json": jQuery.parseJSON,
                "text xml": jQuery.parseXML
            },
            flatOptions: {url: true, context: true}
        },
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target)
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === "object") {
                options = url;
                url = undefined
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = "canceled", jqXHR = {
                readyState: 0,
                getResponseHeader: function (key) {
                    var match;
                    if (state === 2) {
                        if (!responseHeaders) {
                            responseHeaders = {};
                            while ((match = rheaders.exec(responseHeadersString))) {
                                responseHeaders[match[1].toLowerCase()] = match[2]
                            }
                        }
                        match = responseHeaders[key.toLowerCase()]
                    }
                    return match == null ? null : match
                },
                getAllResponseHeaders: function () {
                    return state === 2 ? responseHeadersString : null
                },
                setRequestHeader: function (name, value) {
                    var lname = name.toLowerCase();
                    if (!state) {
                        name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                        requestHeaders[name] = value
                    }
                    return this
                },
                overrideMimeType: function (type) {
                    if (!state) {
                        s.mimeType = type
                    }
                    return this
                },
                statusCode: function (map) {
                    var code;
                    if (map) {
                        if (state < 2) {
                            for (code in map) {
                                statusCode[code] = [statusCode[code], map[code]]
                            }
                        } else {
                            jqXHR.always(map[jqXHR.status])
                        }
                    }
                    return this
                },
                abort: function (statusText) {
                    var finalText = statusText || strAbort;
                    if (transport) {
                        transport.abort(finalText)
                    }
                    done(0, finalText);
                    return this
                }
            };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(core_rnotwhite) || [""];
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? "80" : "443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? "80" : "443"))))
            }
            if (s.data && s.processData && typeof s.data !== "string") {
                s.data = jQuery.param(s.data, s.traditional)
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return jqXHR
            }
            fireGlobals = s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger("ajaxStart")
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = (s.url += (ajax_rquery.test(cacheURL) ? "&" : "?") + s.data);
                    delete s.data
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, "$1_=" + ajax_nonce++) : cacheURL + (ajax_rquery.test(cacheURL) ? "&" : "?") + "_=" + ajax_nonce++
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL])
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL])
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader("Content-Type", s.contentType)
            }
            jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i])
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort()
            }
            strAbort = "abort";
            for (i in {success: 1, error: 1, complete: 1}) {
                jqXHR[i](s[i])
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, "No Transport")
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxSend", [jqXHR, s])
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function () {
                        jqXHR.abort("timeout")
                    }, s.timeout)
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done)
                } catch (e) {
                    if (state < 2) {
                        done(-1, e)
                    } else {
                        throw e
                    }
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer)
                }
                transport = undefined;
                responseHeadersString = headers || "";
                jqXHR.readyState = status > 0 ? 4 : 0;
                isSuccess = status >= 200 && status < 300 || status === 304;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses)
                }
                response = ajaxConvert(s, response, jqXHR, isSuccess);
                if (isSuccess) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader("Last-Modified");
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified
                        }
                        modified = jqXHR.getResponseHeader("etag");
                        if (modified) {
                            jQuery.etag[cacheURL] = modified
                        }
                    }
                    if (status === 204 || s.type === "HEAD") {
                        statusText = "nocontent"
                    } else {
                        if (status === 304) {
                            statusText = "notmodified"
                        } else {
                            statusText = response.state;
                            success = response.data;
                            error = response.error;
                            isSuccess = !error
                        }
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = "error";
                        if (status < 0) {
                            status = 0
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + "";
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [success, statusText, jqXHR])
                } else {
                    deferred.rejectWith(callbackContext, [jqXHR, statusText, error])
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error])
                }
                completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);
                if (fireGlobals) {
                    globalEventContext.trigger("ajaxComplete", [jqXHR, s]);
                    if (!(--jQuery.active)) {
                        jQuery.event.trigger("ajaxStop")
                    }
                }
            }

            return jqXHR
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, "json")
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, "script")
        }
    });
    jQuery.each(["get", "post"], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined
            }
            return jQuery.ajax({url: url, type: method, dataType: type, data: data, success: callback})
        }
    });
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes;
        while (dataTypes[0] === "*") {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader("Content-Type")
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0]
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
                    finalDataType = type;
                    break
                }
                if (!firstDataType) {
                    firstDataType = type
                }
            }
            finalDataType = finalDataType || firstDataType
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType)
            }
            return responses[finalDataType]
        }
    }

    function ajaxConvert(s, response, jqXHR, isSuccess) {
        var conv2, current, conv, tmp, prev, converters = {}, dataTypes = s.dataTypes.slice();
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv]
            }
        }
        current = dataTypes.shift();
        while (current) {
            if (s.responseFields[current]) {
                jqXHR[s.responseFields[current]] = response
            }
            if (!prev && isSuccess && s.dataFilter) {
                response = s.dataFilter(response, s.dataType)
            }
            prev = current;
            current = dataTypes.shift();
            if (current) {
                if (current === "*") {
                    current = prev
                } else {
                    if (prev !== "*" && prev !== current) {
                        conv = converters[prev + " " + current] || converters["* " + current];
                        if (!conv) {
                            for (conv2 in converters) {
                                tmp = conv2.split(" ");
                                if (tmp[1] === current) {
                                    conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
                                    if (conv) {
                                        if (conv === true) {
                                            conv = converters[conv2]
                                        } else {
                                            if (converters[conv2] !== true) {
                                                current = tmp[0];
                                                dataTypes.unshift(tmp[1])
                                            }
                                        }
                                        break
                                    }
                                }
                            }
                        }
                        if (conv !== true) {
                            if (conv && s["throws"]) {
                                response = conv(response)
                            } else {
                                try {
                                    response = conv(response)
                                } catch (e) {
                                    return {
                                        state: "parsererror",
                                        error: conv ? e : "No conversion from " + prev + " to " + current
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return {state: "success", data: response}
    }

    jQuery.ajaxSetup({
        accepts: {script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},
        contents: {script: /(?:java|ecma)script/},
        converters: {
            "text script": function (text) {
                jQuery.globalEval(text);
                return text
            }
        }
    });
    jQuery.ajaxPrefilter("script", function (s) {
        if (s.cache === undefined) {
            s.cache = false
        }
        if (s.crossDomain) {
            s.type = "GET";
            s.global = false
        }
    });
    jQuery.ajaxTransport("script", function (s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery("head")[0] || document.documentElement;
            return {
                send: function (_, callback) {
                    script = document.createElement("script");
                    script.async = true;
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset
                    }
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function (_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (script.parentNode) {
                                script.parentNode.removeChild(script)
                            }
                            script = null;
                            if (!isAbort) {
                                callback(200, "success")
                            }
                        }
                    };
                    head.insertBefore(script, head.firstChild)
                }, abort: function () {
                    if (script) {
                        script.onload(undefined, true)
                    }
                }
            }
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: "callback", jsonpCallback: function () {
            var callback = oldCallbacks.pop() || (jQuery.expando + "_" + (ajax_nonce++));
            this[callback] = true;
            return callback
        }
    });
    jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data");
        if (jsonProp || s.dataTypes[0] === "jsonp") {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName)
            } else {
                if (s.jsonp !== false) {
                    s.url += (ajax_rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName
                }
            }
            s.converters["script json"] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + " was not called")
                }
                return responseContainer[0]
            };
            s.dataTypes[0] = "json";
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments
            };
            jqXHR.always(function () {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName)
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0])
                }
                responseContainer = overwritten = undefined
            });
            return "script"
        }
    });
    var xhrCallbacks, xhrSupported, xhrId = 0, xhrOnUnloadAbort = window.ActiveXObject && function () {
            var key;
            for (key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true)
            }
        };

    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest()
        } catch (e) {
        }
    }

    function createActiveXHR() {
        try {
            return new window.ActiveXObject("Microsoft.XMLHTTP")
        } catch (e) {
        }
    }

    jQuery.ajaxSettings.xhr = window.ActiveXObject ? function () {
        return !this.isLocal && createStandardXHR() || createActiveXHR()
    } : createStandardXHR;
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && ("withCredentials" in xhrSupported);
    xhrSupported = jQuery.support.ajax = !!xhrSupported;
    if (xhrSupported) {
        jQuery.ajaxTransport(function (s) {
            if (!s.crossDomain || jQuery.support.cors) {
                var callback;
                return {
                    send: function (headers, complete) {
                        var handle, i, xhr = s.xhr();
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password)
                        } else {
                            xhr.open(s.type, s.url, s.async)
                        }
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i]
                            }
                        }
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType)
                        }
                        if (!s.crossDomain && !headers["X-Requested-With"]) {
                            headers["X-Requested-With"] = "XMLHttpRequest"
                        }
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i])
                            }
                        } catch (err) {
                        }
                        xhr.send((s.hasContent && s.data) || null);
                        callback = function (_, isAbort) {
                            var status, responseHeaders, statusText, responses;
                            try {
                                if (callback && (isAbort || xhr.readyState === 4)) {
                                    callback = undefined;
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle]
                                        }
                                    }
                                    if (isAbort) {
                                        if (xhr.readyState !== 4) {
                                            xhr.abort()
                                        }
                                    } else {
                                        responses = {};
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        if (typeof xhr.responseText === "string") {
                                            responses.text = xhr.responseText
                                        }
                                        try {
                                            statusText = xhr.statusText
                                        } catch (e) {
                                            statusText = ""
                                        }
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404
                                        } else {
                                            if (status === 1223) {
                                                status = 204
                                            }
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException)
                                }
                            }
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders)
                            }
                        };
                        if (!s.async) {
                            callback()
                        } else {
                            if (xhr.readyState === 4) {
                                setTimeout(callback)
                            } else {
                                handle = ++xhrId;
                                if (xhrOnUnloadAbort) {
                                    if (!xhrCallbacks) {
                                        xhrCallbacks = {};
                                        jQuery(window).unload(xhrOnUnloadAbort)
                                    }
                                    xhrCallbacks[handle] = callback
                                }
                                xhr.onreadystatechange = callback
                            }
                        }
                    }, abort: function () {
                        if (callback) {
                            callback(undefined, true)
                        }
                    }
                }
            }
        })
    }
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp("^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i"), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
        "*": [function (prop, value) {
            var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? "" : "px"), start = (jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
            if (start && start[3] !== unit) {
                unit = unit || start[3];
                parts = parts || [];
                start = +target || 1;
                do {
                    scale = scale || ".5";
                    start = start / scale;
                    jQuery.style(tween.elem, prop, start + unit)
                } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations)
            }
            if (parts) {
                start = tween.start = +start || +target || 0;
                tween.unit = unit;
                tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2]
            }
            return tween
        }]
    };

    function createFxNow() {
        setTimeout(function () {
            fxNow = undefined
        });
        return (fxNow = jQuery.now())
    }

    function createTween(value, prop, animation) {
        var tween, collection = (tweeners[prop] || []).concat(tweeners["*"]), index = 0, length = collection.length;
        for (; index < length; index++) {
            if ((tween = collection[index].call(animation, prop, value))) {
                return tween
            }
        }
    }

    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
            delete tick.elem
        }), tick = function () {
            if (stopped) {
                return false
            }
            var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
            for (; index < length; index++) {
                animation.tweens[index].run(percent)
            }
            deferred.notifyWith(elem, [animation, percent, remaining]);
            if (percent < 1 && length) {
                return remaining
            } else {
                deferred.resolveWith(elem, [animation]);
                return false
            }
        }, animation = deferred.promise({
            elem: elem,
            props: jQuery.extend({}, properties),
            opts: jQuery.extend(true, {specialEasing: {}}, options),
            originalProperties: properties,
            originalOptions: options,
            startTime: fxNow || createFxNow(),
            duration: options.duration,
            tweens: [],
            createTween: function (prop, end) {
                var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                animation.tweens.push(tween);
                return tween
            },
            stop: function (gotoEnd) {
                var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                if (stopped) {
                    return this
                }
                stopped = true;
                for (; index < length; index++) {
                    animation.tweens[index].run(1)
                }
                if (gotoEnd) {
                    deferred.resolveWith(elem, [animation, gotoEnd])
                } else {
                    deferred.rejectWith(elem, [animation, gotoEnd])
                }
                return this
            }
        }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result
            }
        }
        jQuery.map(props, createTween, animation);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation)
        }
        jQuery.fx.timer(jQuery.extend(tick, {elem: elem, anim: animation, queue: animation.opts.queue}));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always)
    }

    function propFilter(props, specialEasing) {
        var index, name, easing, value, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0]
            }
            if (index !== name) {
                props[name] = value;
                delete props[index]
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && "expand" in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing
                    }
                }
            } else {
                specialEasing[name] = easing
            }
        }
    }

    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function (props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ["*"]
            } else {
                props = props.split(" ")
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback)
            }
        }, prefilter: function (callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback)
            } else {
                animationPrefilters.push(callback)
            }
        }
    });
    function defaultPrefilter(elem, props, opts) {
        var prop, value, toggle, tween, hooks, oldfire, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = jQuery._data(elem, "fxshow");
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, "fx");
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire()
                    }
                }
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, "fx").length) {
                        hooks.empty.fire()
                    }
                })
            })
        }
        if (elem.nodeType === 1 && ("height" in props || "width" in props)) {
            opts.overflow = [style.overflow, style.overflowX, style.overflowY];
            if (jQuery.css(elem, "display") === "inline" && jQuery.css(elem, "float") === "none") {
                if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === "inline") {
                    style.display = "inline-block"
                } else {
                    style.zoom = 1
                }
            }
        }
        if (opts.overflow) {
            style.overflow = "hidden";
            if (!jQuery.support.shrinkWrapBlocks) {
                anim.always(function () {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2]
                })
            }
        }
        for (prop in props) {
            value = props[prop];
            if (rfxtypes.exec(value)) {
                delete props[prop];
                toggle = toggle || value === "toggle";
                if (value === (hidden ? "hide" : "show")) {
                    continue
                }
                orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop)
            }
        }
        if (!jQuery.isEmptyObject(orig)) {
            if (dataShow) {
                if ("hidden" in dataShow) {
                    hidden = dataShow.hidden
                }
            } else {
                dataShow = jQuery._data(elem, "fxshow", {})
            }
            if (toggle) {
                dataShow.hidden = !hidden
            }
            if (hidden) {
                jQuery(elem).show()
            } else {
                anim.done(function () {
                    jQuery(elem).hide()
                })
            }
            anim.done(function () {
                var prop;
                jQuery._removeData(elem, "fxshow");
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop])
                }
            });
            for (prop in orig) {
                tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === "width" || prop === "height" ? 1 : 0
                    }
                }
            }
        }
    }

    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing)
    }

    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween, init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || "swing";
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px")
        }, cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this)
        }, run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration)
            } else {
                this.pos = eased = percent
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this)
            }
            if (hooks && hooks.set) {
                hooks.set(this)
            } else {
                Tween.propHooks._default.set(this)
            }
            return this
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop]
                }
                result = jQuery.css(tween.elem, tween.prop, "");
                return !result || result === "auto" ? 0 : result
            }, set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween)
                } else {
                    if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                        jQuery.style(tween.elem, tween.prop, tween.now + tween.unit)
                    } else {
                        tween.elem[tween.prop] = tween.now
                    }
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now
            }
        }
    };
    jQuery.each(["toggle", "show", "hide"], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback)
        }
    });
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHidden).css("opacity", 0).show().end().animate({opacity: to}, speed, easing, callback)
        }, animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                var anim = Animation(this, jQuery.extend({}, prop), optall);
                if (empty || jQuery._data(this, "finish")) {
                    anim.stop(true)
                }
            };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation)
        }, stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd)
            };
            if (typeof type !== "string") {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined
            }
            if (clearQueue && type !== false) {
                this.queue(type || "fx", [])
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + "queueHooks", timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index])
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index])
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1)
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type)
                }
            })
        }, finish: function (type) {
            if (type !== false) {
                type = type || "fx"
            }
            return this.each(function () {
                var index, data = jQuery._data(this), queue = data[type + "queue"], hooks = data[type + "queueHooks"], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.stop) {
                    hooks.stop.call(this, true)
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1)
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this)
                    }
                }
                delete data.finish
            })
        }
    });
    function genFx(type, includeWidth) {
        var which, attrs = {height: type}, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs["margin" + which] = attrs["padding" + which] = type
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type
        }
        return attrs
    }

    jQuery.each({
        slideDown: genFx("show"),
        slideUp: genFx("hide"),
        slideToggle: genFx("toggle"),
        fadeIn: {opacity: "show"},
        fadeOut: {opacity: "hide"},
        fadeToggle: {opacity: "toggle"}
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback)
        }
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
            duration: speed,
            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
        };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = "fx"
        }
        opt.old = opt.complete;
        opt.complete = function () {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this)
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue)
            }
        };
        return opt
    };
    jQuery.easing = {
        linear: function (p) {
            return p
        }, swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2
        }
    };
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function () {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1)
            }
        }
        if (!timers.length) {
            jQuery.fx.stop()
        }
        fxNow = undefined
    };
    jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer)) {
            jQuery.fx.start()
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval)
        }
    };
    jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null
    };
    jQuery.fx.speeds = {slow: 600, fast: 200, _default: 400};
    jQuery.fx.step = {};
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function (elem) {
            return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem
            }).length
        }
    }
    jQuery.fn.offset = function (options) {
        if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
                jQuery.offset.setOffset(this, options, i)
            })
        }
        var docElem, win, box = {top: 0, left: 0}, elem = this[0], doc = elem && elem.ownerDocument;
        if (!doc) {
            return
        }
        docElem = doc.documentElement;
        if (!jQuery.contains(docElem, elem)) {
            return box
        }
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
            box = elem.getBoundingClientRect()
        }
        win = getWindow(doc);
        return {
            top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        }
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var position = jQuery.css(elem, "position");
            if (position === "static") {
                elem.style.position = "relative"
            }
            var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1, props = {}, curPosition = {}, curTop, curLeft;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset)
            }
            if (options.top != null) {
                props.top = (options.top - curOffset.top) + curTop
            }
            if (options.left != null) {
                props.left = (options.left - curOffset.left) + curLeft
            }
            if ("using" in options) {
                options.using.call(elem, props)
            } else {
                curElem.css(props)
            }
        }
    };
    jQuery.fn.extend({
        position: function () {
            if (!this[0]) {
                return
            }
            var offsetParent, offset, parentOffset = {top: 0, left: 0}, elem = this[0];
            if (jQuery.css(elem, "position") === "fixed") {
                offset = elem.getBoundingClientRect()
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], "html")) {
                    parentOffset = offsetParent.offset()
                }
                parentOffset.top += jQuery.css(offsetParent[0], "borderTopWidth", true);
                parentOffset.left += jQuery.css(offsetParent[0], "borderLeftWidth", true)
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
                left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
            }
        }, offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || docElem;
                while (offsetParent && (!jQuery.nodeName(offsetParent, "html") && jQuery.css(offsetParent, "position") === "static")) {
                    offsetParent = offsetParent.offsetParent
                }
                return offsetParent || docElem
            })
        }
    });
    jQuery.each({scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function (method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function (val) {
            return jQuery.access(this, function (elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? (prop in win) ? win[prop] : win.document.documentElement[method] : elem[method]
                }
                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop())
                } else {
                    elem[method] = val
                }
            }, method, val, arguments.length, null)
        }
    });
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false
    }

    jQuery.each({Height: "height", Width: "width"}, function (name, type) {
        jQuery.each({padding: "inner" + name, content: type, "": "outer" + name}, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"), extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
                return jQuery.access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return elem.document.documentElement["client" + name]
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name])
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra)
                }, type, chainable ? margin : undefined, chainable, null)
            }
        })
    });
    jQuery.fn.size = function () {
        return this.length
    };
    jQuery.fn.andSelf = jQuery.fn.addBack;
    if (typeof module === "object" && module && typeof module.exports === "object") {
        module.exports = jQuery
    } else {
        window.jQuery = window.$ = jQuery;
        if (typeof define === "function" && define.amd) {
            define("jquery", [], function () {
                return jQuery
            })
        }
    }
})(window);
if (typeof JSON !== "object") {
    JSON = {}
}
(function () {
    function f(n) {
        return n < 10 ? "0" + n : n
    }

    if (typeof Date.prototype.toJSON !== "function") {
        Date.prototype.toJSON = function (key) {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) {
            return this.valueOf()
        }
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, rep;

    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + string + '"'
    }

    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
            value = value.toJSON(key)
        }
        if (typeof rep === "function") {
            value = rep.call(holder, key, value)
        }
        switch (typeof value) {
            case"string":
                return quote(value);
            case"number":
                return isFinite(value) ? String(value) : "null";
            case"boolean":
            case"null":
                return String(value);
            case"object":
                if (!value) {
                    return "null"
                }
                gap += indent;
                partial = [];
                if (Object.prototype.toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || "null"
                    }
                    v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
                    gap = mind;
                    return v
                }
                if (rep && typeof rep === "object") {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === "string") {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v)
                            }
                        }
                    }
                }
                v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
                gap = mind;
                return v
        }
    }

    if (typeof JSON.stringify !== "function") {
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = "";
            indent = "";
            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " "
                }
            } else {
                if (typeof space === "string") {
                    indent = space
                }
            }
            rep = replacer;
            if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify")
            }
            return str("", {"": value})
        }
    }
    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {
            var j;

            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v
                            } else {
                                delete value[k]
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value)
            }

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
                })
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
                j = eval("(" + text + ")");
                return typeof reviver === "function" ? walk({"": j}, "") : j
            }
            throw new SyntaxError("JSON.parse")
        }
    }
}());
(function (window, undefined) {
    var History = window.History = window.History || {}, jQuery = window.jQuery;
    if (typeof History.Adapter !== "undefined") {
        throw new Error("History.js Adapter has already been loaded...")
    }
    History.Adapter = {
        bind: function (el, event, callback) {
            jQuery(el).bind(event, callback)
        }, trigger: function (el, event, extra) {
            jQuery(el).trigger(event, extra)
        }, extractEventData: function (key, event, extra) {
            var result = (event && event.originalEvent && event.originalEvent[key]) || (extra && extra[key]) || undefined;
            return result
        }, onDomLoad: function (callback) {
            jQuery(callback)
        }
    };
    if (typeof History.init !== "undefined") {
        History.init()
    }
})(window);
(function (window, undefined) {
    var document = window.document, setTimeout = window.setTimeout || setTimeout, clearTimeout = window.clearTimeout || clearTimeout, setInterval = window.setInterval || setInterval, History = window.History = window.History || {};
    if (typeof History.initHtml4 !== "undefined") {
        throw new Error("History.js HTML4 Support has already been loaded...")
    }
    History.initHtml4 = function () {
        if (typeof History.initHtml4.initialized !== "undefined") {
            return false
        } else {
            History.initHtml4.initialized = true
        }
        History.enabled = true;
        History.savedHashes = [];
        History.isLastHash = function (newHash) {
            var oldHash = History.getHashByIndex(), isLast;
            isLast = newHash === oldHash;
            return isLast
        };
        History.isHashEqual = function (newHash, oldHash) {
            newHash = encodeURIComponent(newHash).replace(/%25/g, "%");
            oldHash = encodeURIComponent(oldHash).replace(/%25/g, "%");
            return newHash === oldHash
        };
        History.saveHash = function (newHash) {
            if (History.isLastHash(newHash)) {
                return false
            }
            History.savedHashes.push(newHash);
            return true
        };
        History.getHashByIndex = function (index) {
            var hash = null;
            if (typeof index === "undefined") {
                hash = History.savedHashes[History.savedHashes.length - 1]
            } else {
                if (index < 0) {
                    hash = History.savedHashes[History.savedHashes.length + index]
                } else {
                    hash = History.savedHashes[index]
                }
            }
            return hash
        };
        History.discardedHashes = {};
        History.discardedStates = {};
        History.discardState = function (discardedState, forwardState, backState) {
            var discardedStateHash = History.getHashByState(discardedState), discardObject;
            discardObject = {discardedState: discardedState, backState: backState, forwardState: forwardState};
            History.discardedStates[discardedStateHash] = discardObject;
            return true
        };
        History.discardHash = function (discardedHash, forwardState, backState) {
            var discardObject = {discardedHash: discardedHash, backState: backState, forwardState: forwardState};
            History.discardedHashes[discardedHash] = discardObject;
            return true
        };
        History.discardedState = function (State) {
            var StateHash = History.getHashByState(State), discarded;
            discarded = History.discardedStates[StateHash] || false;
            return discarded
        };
        History.discardedHash = function (hash) {
            var discarded = History.discardedHashes[hash] || false;
            return discarded
        };
        History.recycleState = function (State) {
            var StateHash = History.getHashByState(State);
            if (History.discardedState(State)) {
                delete History.discardedStates[StateHash]
            }
            return true
        };
        if (History.emulated.hashChange) {
            History.hashChangeInit = function () {
                History.checkerFunction = null;
                var lastDocumentHash = "", iframeId, iframe, lastIframeHash, checkerRunning, startedWithHash = Boolean(History.getHash());
                if (History.isInternetExplorer()) {
                    iframeId = "historyjs-iframe";
                    iframe = document.createElement("iframe");
                    iframe.setAttribute("id", iframeId);
                    iframe.setAttribute("src", "#");
                    iframe.style.display = "none";
                    document.body.appendChild(iframe);
                    iframe.contentWindow.document.open();
                    iframe.contentWindow.document.close();
                    lastIframeHash = "";
                    checkerRunning = false;
                    History.checkerFunction = function () {
                        if (checkerRunning) {
                            return false
                        }
                        checkerRunning = true;
                        var documentHash = History.getHash(), iframeHash = History.getHash(iframe.contentWindow.document);
                        if (documentHash !== lastDocumentHash) {
                            lastDocumentHash = documentHash;
                            if (iframeHash !== documentHash) {
                                lastIframeHash = iframeHash = documentHash;
                                iframe.contentWindow.document.open();
                                iframe.contentWindow.document.close();
                                iframe.contentWindow.document.location.hash = History.escapeHash(documentHash)
                            }
                            History.Adapter.trigger(window, "hashchange")
                        } else {
                            if (iframeHash !== lastIframeHash) {
                                lastIframeHash = iframeHash;
                                if (startedWithHash && iframeHash === "") {
                                    History.back()
                                } else {
                                    History.setHash(iframeHash, false)
                                }
                            }
                        }
                        checkerRunning = false;
                        return true
                    }
                } else {
                    History.checkerFunction = function () {
                        var documentHash = History.getHash() || "";
                        if (documentHash !== lastDocumentHash) {
                            lastDocumentHash = documentHash;
                            History.Adapter.trigger(window, "hashchange")
                        }
                        return true
                    }
                }
                History.intervalList.push(setInterval(History.checkerFunction, History.options.hashChangeInterval));
                return true
            };
            History.Adapter.onDomLoad(History.hashChangeInit)
        }
        if (History.emulated.pushState) {
            History.onHashChange = function (event) {
                var currentUrl = ((event && event.newURL) || History.getLocationHref()), currentHash = History.getHashByUrl(currentUrl), currentState = null, currentStateHash = null, currentStateHashExits = null, discardObject;
                if (History.isLastHash(currentHash)) {
                    History.busy(false);
                    return false
                }
                History.doubleCheckComplete();
                History.saveHash(currentHash);
                if (currentHash && History.isTraditionalAnchor(currentHash)) {
                    History.Adapter.trigger(window, "anchorchange");
                    History.busy(false);
                    return false
                }
                currentState = History.extractState(History.getFullUrl(currentHash || History.getLocationHref()), true);
                if (History.isLastSavedState(currentState)) {
                    History.busy(false);
                    return false
                }
                currentStateHash = History.getHashByState(currentState);
                discardObject = History.discardedState(currentState);
                if (discardObject) {
                    if (History.getHashByIndex(-2) === History.getHashByState(discardObject.forwardState)) {
                        History.back(false)
                    } else {
                        History.forward(false)
                    }
                    return false
                }
                History.pushState(currentState.data, currentState.title, encodeURI(currentState.url), false);
                return true
            };
            History.Adapter.bind(window, "hashchange", History.onHashChange);
            History.pushState = function (data, title, url, queue) {
                url = encodeURI(url).replace(/%25/g, "%");
                if (History.getHashByUrl(url)) {
                    throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).")
                }
                if (queue !== false && History.busy()) {
                    History.pushQueue({scope: History, callback: History.pushState, args: arguments, queue: queue});
                    return false
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url), newStateHash = History.getHashByState(newState), oldState = History.getState(false), oldStateHash = History.getHashByState(oldState), html4Hash = History.getHash(), wasExpected = History.expectedStateId == newState.id;
                History.storeState(newState);
                History.expectedStateId = newState.id;
                History.recycleState(newState);
                History.setTitle(newState);
                if (newStateHash === oldStateHash) {
                    History.busy(false);
                    return false
                }
                History.saveState(newState);
                if (!wasExpected) {
                    History.Adapter.trigger(window, "statechange")
                }
                if (!History.isHashEqual(newStateHash, html4Hash) && !History.isHashEqual(newStateHash, History.getShortUrl(History.getLocationHref()))) {
                    History.setHash(newStateHash, false)
                }
                History.busy(false);
                return true
            };
            History.replaceState = function (data, title, url, queue) {
                url = encodeURI(url).replace(/%25/g, "%");
                if (History.getHashByUrl(url)) {
                    throw new Error("History.js does not support states with fragment-identifiers (hashes/anchors).")
                }
                if (queue !== false && History.busy()) {
                    History.pushQueue({scope: History, callback: History.replaceState, args: arguments, queue: queue});
                    return false
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url), newStateHash = History.getHashByState(newState), oldState = History.getState(false), oldStateHash = History.getHashByState(oldState), previousState = History.getStateByIndex(-2);
                History.discardState(oldState, newState, previousState);
                if (newStateHash === oldStateHash) {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    History.recycleState(newState);
                    History.setTitle(newState);
                    History.saveState(newState);
                    History.Adapter.trigger(window, "statechange");
                    History.busy(false)
                } else {
                    History.pushState(newState.data, newState.title, newState.url, false)
                }
                return true
            }
        }
        if (History.emulated.pushState) {
            if (History.getHash() && !History.emulated.hashChange) {
                History.Adapter.onDomLoad(function () {
                    History.Adapter.trigger(window, "hashchange")
                })
            }
        }
    };
    if (typeof History.init !== "undefined") {
        History.init()
    }
})(window);
(function (window, undefined) {
    var console = window.console || undefined, document = window.document, navigator = window.navigator, sessionStorage = false, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, setInterval = window.setInterval, clearInterval = window.clearInterval, JSON = window.JSON, alert = window.alert, History = window.History = window.History || {}, history = window.history;
    try {
        sessionStorage = window.sessionStorage;
        sessionStorage.setItem("TEST", "1");
        sessionStorage.removeItem("TEST")
    } catch (e) {
        sessionStorage = false
    }
    JSON.stringify = JSON.stringify || JSON.encode;
    JSON.parse = JSON.parse || JSON.decode;
    if (typeof History.init !== "undefined") {
        throw new Error("History.js Core has already been loaded...")
    }
    History.init = function (options) {
        if (typeof History.Adapter === "undefined") {
            return false
        }
        if (typeof History.initCore !== "undefined") {
            History.initCore()
        }
        if (typeof History.initHtml4 !== "undefined") {
            History.initHtml4()
        }
        return true
    };
    History.initCore = function (options) {
        if (typeof History.initCore.initialized !== "undefined") {
            return false
        } else {
            History.initCore.initialized = true
        }
        History.options = History.options || {};
        History.options.hashChangeInterval = History.options.hashChangeInterval || 100;
        History.options.safariPollInterval = History.options.safariPollInterval || 500;
        History.options.doubleCheckInterval = History.options.doubleCheckInterval || 500;
        History.options.disableSuid = History.options.disableSuid || false;
        History.options.storeInterval = History.options.storeInterval || 1000;
        History.options.busyDelay = History.options.busyDelay || 250;
        History.options.debug = History.options.debug || false;
        History.options.initialTitle = History.options.initialTitle || document.title;
        History.options.html4Mode = History.options.html4Mode || false;
        History.options.delayInit = History.options.delayInit || false;
        History.intervalList = [];
        History.clearAllIntervals = function () {
            var i, il = History.intervalList;
            if (typeof il !== "undefined" && il !== null) {
                for (i = 0; i < il.length; i++) {
                    clearInterval(il[i])
                }
                History.intervalList = null
            }
        };
        History.debug = function () {
            if ((History.options.debug || false)) {
                History.log.apply(History, arguments)
            }
        };
        History.log = function () {
            var consoleExists = !(typeof console === "undefined" || typeof console.log === "undefined" || typeof console.log.apply === "undefined"), textarea = document.getElementById("log"), message, i, n, args, arg;
            if (consoleExists) {
                args = Array.prototype.slice.call(arguments);
                message = args.shift();
                if (typeof console.debug !== "undefined") {
                    console.debug.apply(console, [message, args])
                } else {
                    console.log.apply(console, [message, args])
                }
            } else {
                message = ("\n" + arguments[0] + "\n")
            }
            for (i = 1, n = arguments.length; i < n; ++i) {
                arg = arguments[i];
                if (typeof arg === "object" && typeof JSON !== "undefined") {
                    try {
                        arg = JSON.stringify(arg)
                    } catch (Exception) {
                    }
                }
                message += "\n" + arg + "\n"
            }
            if (textarea) {
                textarea.value += message + "\n-----\n";
                textarea.scrollTop = textarea.scrollHeight - textarea.clientHeight
            } else {
                if (!consoleExists) {
                    alert(message)
                }
            }
            return true
        };
        History.getInternetExplorerMajorVersion = function () {
            var result = History.getInternetExplorerMajorVersion.cached = (typeof History.getInternetExplorerMajorVersion.cached !== "undefined") ? History.getInternetExplorerMajorVersion.cached : (function () {
                var v = 3, div = document.createElement("div"), all = div.getElementsByTagName("i");
                while ((div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->") && all[0]) {
                }
                return (v > 4) ? v : false
            })();
            return result
        };
        History.isInternetExplorer = function () {
            var result = History.isInternetExplorer.cached = (typeof History.isInternetExplorer.cached !== "undefined") ? History.isInternetExplorer.cached : Boolean(History.getInternetExplorerMajorVersion());
            return result
        };
        if (History.options.html4Mode) {
            History.emulated = {pushState: true, hashChange: true}
        } else {
            History.emulated = {
                pushState: !Boolean(window.history && window.history.pushState && window.history.replaceState && !((/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i).test(navigator.userAgent) || (/AppleWebKit\/5([0-2]|3[0-2])/i).test(navigator.userAgent))),
                hashChange: Boolean(!(("onhashchange" in window) || ("onhashchange" in document)) || (History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8))
            }
        }
        History.enabled = !History.emulated.pushState;
        History.bugs = {
            setHash: Boolean(!History.emulated.pushState && navigator.vendor === "Apple Computer, Inc." && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),
            safariPoll: Boolean(!History.emulated.pushState && navigator.vendor === "Apple Computer, Inc." && /AppleWebKit\/5([0-2]|3[0-3])/.test(navigator.userAgent)),
            ieDoubleCheck: Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 8),
            hashEscape: Boolean(History.isInternetExplorer() && History.getInternetExplorerMajorVersion() < 7)
        };
        History.isEmptyObject = function (obj) {
            for (var name in obj) {
                if (obj.hasOwnProperty(name)) {
                    return false
                }
            }
            return true
        };
        History.cloneObject = function (obj) {
            var hash, newObj;
            if (obj) {
                hash = JSON.stringify(obj);
                newObj = JSON.parse(hash)
            } else {
                newObj = {}
            }
            return newObj
        };
        History.getRootUrl = function () {
            var rootUrl = document.location.protocol + "//" + (document.location.hostname || document.location.host);
            if (document.location.port || false) {
                rootUrl += ":" + document.location.port
            }
            rootUrl += "/";
            return rootUrl
        };
        History.getBaseHref = function () {
            var baseElements = document.getElementsByTagName("base"), baseElement = null, baseHref = "";
            if (baseElements.length === 1) {
                baseElement = baseElements[0];
                baseHref = baseElement.href.replace(/[^\/]+$/, "")
            }
            baseHref = baseHref.replace(/\/+$/, "");
            if (baseHref) {
                baseHref += "/"
            }
            return baseHref
        };
        History.getBaseUrl = function () {
            var baseUrl = History.getBaseHref() || History.getBasePageUrl() || History.getRootUrl();
            return baseUrl
        };
        History.getPageUrl = function () {
            var State = History.getState(false, false), stateUrl = (State || {}).url || History.getLocationHref(), pageUrl;
            pageUrl = stateUrl.replace(/\/+$/, "").replace(/[^\/]+$/, function (part, index, string) {
                return (/\./).test(part) ? part : part + "/"
            });
            return pageUrl
        };
        History.getBasePageUrl = function () {
            var basePageUrl = (History.getLocationHref()).replace(/[#\?].*/, "").replace(/[^\/]+$/, function (part, index, string) {
                    return (/[^\/]$/).test(part) ? "" : part
                }).replace(/\/+$/, "") + "/";
            return basePageUrl
        };
        History.getFullUrl = function (url, allowBaseHref) {
            var fullUrl = url, firstChar = url.substring(0, 1);
            allowBaseHref = (typeof allowBaseHref === "undefined") ? true : allowBaseHref;
            if (/[a-z]+\:\/\//.test(url)) {
            } else {
                if (firstChar === "/") {
                    fullUrl = History.getRootUrl() + url.replace(/^\/+/, "")
                } else {
                    if (firstChar === "#") {
                        fullUrl = History.getPageUrl().replace(/#.*/, "") + url
                    } else {
                        if (firstChar === "?") {
                            fullUrl = History.getPageUrl().replace(/[\?#].*/, "") + url
                        } else {
                            if (allowBaseHref) {
                                fullUrl = History.getBaseUrl() + url.replace(/^(\.\/)+/, "")
                            } else {
                                fullUrl = History.getBasePageUrl() + url.replace(/^(\.\/)+/, "")
                            }
                        }
                    }
                }
            }
            return fullUrl.replace(/\#$/, "")
        };
        History.getShortUrl = function (url) {
            var shortUrl = url, baseUrl = History.getBaseUrl(), rootUrl = History.getRootUrl();
            if (History.emulated.pushState) {
                shortUrl = shortUrl.replace(baseUrl, "")
            }
            shortUrl = shortUrl.replace(rootUrl, "/");
            if (History.isTraditionalAnchor(shortUrl)) {
                shortUrl = "./" + shortUrl
            }
            shortUrl = shortUrl.replace(/^(\.\/)+/g, "./").replace(/\#$/, "");
            return shortUrl
        };
        History.getLocationHref = function (doc) {
            doc = doc || document;
            if (doc.URL === doc.location.href) {
                return doc.location.href
            }
            if (doc.location.href === decodeURIComponent(doc.URL)) {
                return doc.URL
            }
            if (doc.location.hash && decodeURIComponent(doc.location.href.replace(/^[^#]+/, "")) === doc.location.hash) {
                return doc.location.href
            }
            if (doc.URL.indexOf("#") == -1 && doc.location.href.indexOf("#") != -1) {
                return doc.location.href
            }
            return doc.URL || doc.location.href
        };
        History.store = {};
        History.idToState = History.idToState || {};
        History.stateToId = History.stateToId || {};
        History.urlToId = History.urlToId || {};
        History.storedStates = History.storedStates || [];
        History.savedStates = History.savedStates || [];
        History.normalizeStore = function () {
            History.store.idToState = History.store.idToState || {};
            History.store.urlToId = History.store.urlToId || {};
            History.store.stateToId = History.store.stateToId || {}
        };
        History.getState = function (friendly, create) {
            if (typeof friendly === "undefined") {
                friendly = true
            }
            if (typeof create === "undefined") {
                create = true
            }
            var State = History.getLastSavedState();
            if (!State && create) {
                State = History.createStateObject()
            }
            if (friendly) {
                State = History.cloneObject(State);
                State.url = State.cleanUrl || State.url
            }
            return State
        };
        History.getIdByState = function (newState) {
            var id = History.extractId(newState.url), str;
            if (!id) {
                str = History.getStateString(newState);
                if (typeof History.stateToId[str] !== "undefined") {
                    id = History.stateToId[str]
                } else {
                    if (typeof History.store.stateToId[str] !== "undefined") {
                        id = History.store.stateToId[str]
                    } else {
                        while (true) {
                            id = (new Date()).getTime() + String(Math.random()).replace(/\D/g, "");
                            if (typeof History.idToState[id] === "undefined" && typeof History.store.idToState[id] === "undefined") {
                                break
                            }
                        }
                        History.stateToId[str] = id;
                        History.idToState[id] = newState
                    }
                }
            }
            return id
        };
        History.normalizeState = function (oldState) {
            var newState, dataNotEmpty;
            if (!oldState || (typeof oldState !== "object")) {
                oldState = {}
            }
            if (typeof oldState.normalized !== "undefined") {
                return oldState
            }
            if (!oldState.data || (typeof oldState.data !== "object")) {
                oldState.data = {}
            }
            newState = {};
            newState.normalized = true;
            newState.title = oldState.title || "";
            newState.url = History.getFullUrl(oldState.url ? oldState.url : (History.getLocationHref()));
            newState.hash = History.getShortUrl(newState.url);
            newState.data = History.cloneObject(oldState.data);
            newState.id = History.getIdByState(newState);
            newState.cleanUrl = newState.url.replace(/\??\&_suid.*/, "");
            newState.url = newState.cleanUrl;
            dataNotEmpty = !History.isEmptyObject(newState.data);
            if ((newState.title || dataNotEmpty) && History.options.disableSuid !== true) {
                newState.hash = History.getShortUrl(newState.url).replace(/\??\&_suid.*/, "");
                if (!/\?/.test(newState.hash)) {
                    newState.hash += "?"
                }
                newState.hash += "&_suid=" + newState.id
            }
            newState.hashedUrl = History.getFullUrl(newState.hash);
            if ((History.emulated.pushState || History.bugs.safariPoll) && History.hasUrlDuplicate(newState)) {
                newState.url = newState.hashedUrl
            }
            return newState
        };
        History.createStateObject = function (data, title, url) {
            var State = {data: data, title: title, url: url};
            State = History.normalizeState(State);
            return State
        };
        History.getStateById = function (id) {
            id = String(id);
            var State = History.idToState[id] || History.store.idToState[id] || undefined;
            return State
        };
        History.getStateString = function (passedState) {
            var State, cleanedState, str;
            State = History.normalizeState(passedState);
            cleanedState = {data: State.data, title: passedState.title, url: passedState.url};
            str = JSON.stringify(cleanedState);
            return str
        };
        History.getStateId = function (passedState) {
            var State, id;
            State = History.normalizeState(passedState);
            id = State.id;
            return id
        };
        History.getHashByState = function (passedState) {
            var State, hash;
            State = History.normalizeState(passedState);
            hash = State.hash;
            return hash
        };
        History.extractId = function (url_or_hash) {
            var id, parts, url, tmp;
            if (url_or_hash.indexOf("#") != -1) {
                tmp = url_or_hash.split("#")[0]
            } else {
                tmp = url_or_hash
            }
            parts = /(.*)\&_suid=([0-9]+)$/.exec(tmp);
            url = parts ? (parts[1] || url_or_hash) : url_or_hash;
            id = parts ? String(parts[2] || "") : "";
            return id || false
        };
        History.isTraditionalAnchor = function (url_or_hash) {
            var isTraditional = !(/[\/\?\.]/.test(url_or_hash));
            return isTraditional
        };
        History.extractState = function (url_or_hash, create) {
            var State = null, id, url;
            create = create || false;
            id = History.extractId(url_or_hash);
            if (id) {
                State = History.getStateById(id)
            }
            if (!State) {
                url = History.getFullUrl(url_or_hash);
                id = History.getIdByUrl(url) || false;
                if (id) {
                    State = History.getStateById(id)
                }
                if (!State && create && !History.isTraditionalAnchor(url_or_hash)) {
                    State = History.createStateObject(null, null, url)
                }
            }
            return State
        };
        History.getIdByUrl = function (url) {
            var id = History.urlToId[url] || History.store.urlToId[url] || undefined;
            return id
        };
        History.getLastSavedState = function () {
            return History.savedStates[History.savedStates.length - 1] || undefined
        };
        History.getLastStoredState = function () {
            return History.storedStates[History.storedStates.length - 1] || undefined
        };
        History.hasUrlDuplicate = function (newState) {
            var hasDuplicate = false, oldState;
            oldState = History.extractState(newState.url);
            hasDuplicate = oldState && oldState.id !== newState.id;
            return hasDuplicate
        };
        History.storeState = function (newState) {
            History.urlToId[newState.url] = newState.id;
            History.storedStates.push(History.cloneObject(newState));
            return newState
        };
        History.isLastSavedState = function (newState) {
            var isLast = false, newId, oldState, oldId;
            if (History.savedStates.length) {
                newId = newState.id;
                oldState = History.getLastSavedState();
                oldId = oldState.id;
                isLast = (newId === oldId)
            }
            return isLast
        };
        History.saveState = function (newState) {
            if (History.isLastSavedState(newState)) {
                return false
            }
            History.savedStates.push(History.cloneObject(newState));
            return true
        };
        History.getStateByIndex = function (index) {
            var State = null;
            if (typeof index === "undefined") {
                State = History.savedStates[History.savedStates.length - 1]
            } else {
                if (index < 0) {
                    State = History.savedStates[History.savedStates.length + index]
                } else {
                    State = History.savedStates[index]
                }
            }
            return State
        };
        History.getCurrentIndex = function () {
            var index = null;
            if (History.savedStates.length < 1) {
                index = 0
            } else {
                index = History.savedStates.length - 1
            }
            return index
        };
        History.getHash = function (doc) {
            var url = History.getLocationHref(doc), hash;
            hash = History.getHashByUrl(url);
            return hash
        };
        History.unescapeHash = function (hash) {
            var result = History.normalizeHash(hash);
            result = decodeURIComponent(result);
            return result
        };
        History.normalizeHash = function (hash) {
            var result = hash.replace(/[^#]*#/, "").replace(/#.*/, "");
            return result
        };
        History.setHash = function (hash, queue) {
            var State, pageUrl;
            if (queue !== false && History.busy()) {
                History.pushQueue({scope: History, callback: History.setHash, args: arguments, queue: queue});
                return false
            }
            History.busy(true);
            State = History.extractState(hash, true);
            if (State && !History.emulated.pushState) {
                History.pushState(State.data, State.title, State.url, false)
            } else {
                if (History.getHash() !== hash) {
                    if (History.bugs.setHash) {
                        pageUrl = History.getPageUrl();
                        History.pushState(null, null, pageUrl + "#" + hash, false)
                    } else {
                        document.location.hash = hash
                    }
                }
            }
            return History
        };
        History.escapeHash = function (hash) {
            var result = History.normalizeHash(hash);
            result = window.encodeURIComponent(result);
            if (!History.bugs.hashEscape) {
                result = result.replace(/\%21/g, "!").replace(/\%26/g, "&").replace(/\%3D/g, "=").replace(/\%3F/g, "?")
            }
            return result
        };
        History.getHashByUrl = function (url) {
            var hash = String(url).replace(/([^#]*)#?([^#]*)#?(.*)/, "$2");
            hash = History.unescapeHash(hash);
            return hash
        };
        History.setTitle = function (newState) {
            var title = newState.title, firstState;
            if (!title) {
                firstState = History.getStateByIndex(0);
                if (firstState && firstState.url === newState.url) {
                    title = firstState.title || History.options.initialTitle
                }
            }
            try {
                document.getElementsByTagName("title")[0].innerHTML = title.replace("<", "&lt;").replace(">", "&gt;").replace(" & ", " &amp; ")
            } catch (Exception) {
            }
            document.title = title;
            return History
        };
        History.queues = [];
        History.busy = function (value) {
            if (typeof value !== "undefined") {
                History.busy.flag = value
            } else {
                if (typeof History.busy.flag === "undefined") {
                    History.busy.flag = false
                }
            }
            if (!History.busy.flag) {
                clearTimeout(History.busy.timeout);
                var fireNext = function () {
                    var i, queue, item;
                    if (History.busy.flag) {
                        return
                    }
                    for (i = History.queues.length - 1; i >= 0; --i) {
                        queue = History.queues[i];
                        if (queue.length === 0) {
                            continue
                        }
                        item = queue.shift();
                        History.fireQueueItem(item);
                        History.busy.timeout = setTimeout(fireNext, History.options.busyDelay)
                    }
                };
                History.busy.timeout = setTimeout(fireNext, History.options.busyDelay)
            }
            return History.busy.flag
        };
        History.busy.flag = false;
        History.fireQueueItem = function (item) {
            return item.callback.apply(item.scope || History, item.args || [])
        };
        History.pushQueue = function (item) {
            History.queues[item.queue || 0] = History.queues[item.queue || 0] || [];
            History.queues[item.queue || 0].push(item);
            return History
        };
        History.queue = function (item, queue) {
            if (typeof item === "function") {
                item = {callback: item}
            }
            if (typeof queue !== "undefined") {
                item.queue = queue
            }
            if (History.busy()) {
                History.pushQueue(item)
            } else {
                History.fireQueueItem(item)
            }
            return History
        };
        History.clearQueue = function () {
            History.busy.flag = false;
            History.queues = [];
            return History
        };
        History.stateChanged = false;
        History.doubleChecker = false;
        History.doubleCheckComplete = function () {
            History.stateChanged = true;
            History.doubleCheckClear();
            return History
        };
        History.doubleCheckClear = function () {
            if (History.doubleChecker) {
                clearTimeout(History.doubleChecker);
                History.doubleChecker = false
            }
            return History
        };
        History.doubleCheck = function (tryAgain) {
            History.stateChanged = false;
            History.doubleCheckClear();
            if (History.bugs.ieDoubleCheck) {
                History.doubleChecker = setTimeout(function () {
                    History.doubleCheckClear();
                    if (!History.stateChanged) {
                        tryAgain()
                    }
                    return true
                }, History.options.doubleCheckInterval)
            }
            return History
        };
        History.safariStatePoll = function () {
            var urlState = History.extractState(History.getLocationHref()), newState;
            if (!History.isLastSavedState(urlState)) {
                newState = urlState
            } else {
                return
            }
            if (!newState) {
                newState = History.createStateObject()
            }
            History.Adapter.trigger(window, "popstate");
            return History
        };
        History.back = function (queue) {
            if (queue !== false && History.busy()) {
                History.pushQueue({scope: History, callback: History.back, args: arguments, queue: queue});
                return false
            }
            History.busy(true);
            History.doubleCheck(function () {
                History.back(false)
            });
            history.go(-1);
            return true
        };
        History.forward = function (queue) {
            if (queue !== false && History.busy()) {
                History.pushQueue({scope: History, callback: History.forward, args: arguments, queue: queue});
                return false
            }
            History.busy(true);
            History.doubleCheck(function () {
                History.forward(false)
            });
            history.go(1);
            return true
        };
        History.go = function (index, queue) {
            var i;
            if (index > 0) {
                for (i = 1; i <= index; ++i) {
                    History.forward(queue)
                }
            } else {
                if (index < 0) {
                    for (i = -1; i >= index; --i) {
                        History.back(queue)
                    }
                } else {
                    throw new Error("History.go: History.go requires a positive or negative integer passed.")
                }
            }
            return History
        };
        if (History.emulated.pushState) {
            var emptyFunction = function () {
            };
            History.pushState = History.pushState || emptyFunction;
            History.replaceState = History.replaceState || emptyFunction
        } else {
            History.onPopState = function (event, extra) {
                var stateId = false, newState = false, currentHash, currentState;
                History.doubleCheckComplete();
                currentHash = History.getHash();
                if (currentHash) {
                    currentState = History.extractState(currentHash || History.getLocationHref(), true);
                    if (currentState) {
                        History.replaceState(currentState.data, currentState.title, currentState.url, false)
                    } else {
                        History.Adapter.trigger(window, "anchorchange");
                        History.busy(false)
                    }
                    History.expectedStateId = false;
                    return false
                }
                stateId = History.Adapter.extractEventData("state", event, extra) || false;
                if (stateId) {
                    newState = History.getStateById(stateId)
                } else {
                    if (History.expectedStateId) {
                        newState = History.getStateById(History.expectedStateId)
                    } else {
                        newState = History.extractState(History.getLocationHref())
                    }
                }
                if (!newState) {
                    newState = History.createStateObject(null, null, History.getLocationHref())
                }
                History.expectedStateId = false;
                if (History.isLastSavedState(newState)) {
                    History.busy(false);
                    return false
                }
                History.storeState(newState);
                History.saveState(newState);
                History.setTitle(newState);
                History.Adapter.trigger(window, "statechange");
                History.busy(false);
                return true
            };
            History.Adapter.bind(window, "popstate", History.onPopState);
            History.pushState = function (data, title, url, queue) {
                if (History.getHashByUrl(url) && History.emulated.pushState) {
                    throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).")
                }
                if (queue !== false && History.busy()) {
                    History.pushQueue({scope: History, callback: History.pushState, args: arguments, queue: queue});
                    return false
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url);
                if (History.isLastSavedState(newState)) {
                    History.busy(false)
                } else {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    history.pushState(newState.id, newState.title, newState.url);
                    History.Adapter.trigger(window, "popstate")
                }
                return true
            };
            History.replaceState = function (data, title, url, queue) {
                if (History.getHashByUrl(url) && History.emulated.pushState) {
                    throw new Error("History.js does not support states with fragement-identifiers (hashes/anchors).")
                }
                if (queue !== false && History.busy()) {
                    History.pushQueue({scope: History, callback: History.replaceState, args: arguments, queue: queue});
                    return false
                }
                History.busy(true);
                var newState = History.createStateObject(data, title, url);
                if (History.isLastSavedState(newState)) {
                    History.busy(false)
                } else {
                    History.storeState(newState);
                    History.expectedStateId = newState.id;
                    history.replaceState(newState.id, newState.title, newState.url);
                    History.Adapter.trigger(window, "popstate")
                }
                return true
            }
        }
        if (sessionStorage) {
            try {
                History.store = JSON.parse(sessionStorage.getItem("History.store")) || {}
            } catch (err) {
                History.store = {}
            }
            History.normalizeStore()
        } else {
            History.store = {};
            History.normalizeStore()
        }
        History.Adapter.bind(window, "unload", History.clearAllIntervals);
        History.saveState(History.storeState(History.extractState(History.getLocationHref(), true)));
        if (sessionStorage) {
            History.onUnload = function () {
                var currentStore, item, currentStoreString;
                try {
                    currentStore = JSON.parse(sessionStorage.getItem("History.store")) || {}
                } catch (err) {
                    currentStore = {}
                }
                currentStore.idToState = currentStore.idToState || {};
                currentStore.urlToId = currentStore.urlToId || {};
                currentStore.stateToId = currentStore.stateToId || {};
                for (item in History.idToState) {
                    if (!History.idToState.hasOwnProperty(item)) {
                        continue
                    }
                    currentStore.idToState[item] = History.idToState[item]
                }
                for (item in History.urlToId) {
                    if (!History.urlToId.hasOwnProperty(item)) {
                        continue
                    }
                    currentStore.urlToId[item] = History.urlToId[item]
                }
                for (item in History.stateToId) {
                    if (!History.stateToId.hasOwnProperty(item)) {
                        continue
                    }
                    currentStore.stateToId[item] = History.stateToId[item]
                }
                History.store = currentStore;
                History.normalizeStore();
                currentStoreString = JSON.stringify(currentStore);
                try {
                    sessionStorage.setItem("History.store", currentStoreString)
                } catch (e) {
                    if (e.code === DOMException.QUOTA_EXCEEDED_ERR) {
                        if (sessionStorage.length) {
                            sessionStorage.removeItem("History.store");
                            sessionStorage.setItem("History.store", currentStoreString)
                        } else {
                        }
                    } else {
                        throw e
                    }
                }
            };
            History.intervalList.push(setInterval(History.onUnload, History.options.storeInterval));
            History.Adapter.bind(window, "beforeunload", History.onUnload);
            History.Adapter.bind(window, "unload", History.onUnload)
        }
        if (!History.emulated.pushState) {
            if (History.bugs.safariPoll) {
                History.intervalList.push(setInterval(History.safariStatePoll, History.options.safariPollInterval))
            }
            if (navigator.vendor === "Apple Computer, Inc." || (navigator.appCodeName || "") === "Mozilla") {
                History.Adapter.bind(window, "hashchange", function () {
                    History.Adapter.trigger(window, "popstate")
                });
                if (History.getHash()) {
                    History.Adapter.onDomLoad(function () {
                        History.Adapter.trigger(window, "hashchange")
                    })
                }
            }
        }
    };
    if (!History.options || !History.options.delayInit) {
        History.init()
    }
})(window);
(function ($) {
    var escape = /["\\\x00-\x1f\x7f-\x9f]/g, meta = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, hasOwn = Object.prototype.hasOwnProperty;
    $.toJSON = typeof JSON === "object" && JSON.stringify ? JSON.stringify : function (o) {
        if (o === null) {
            return "null"
        }
        var pairs, k, name, val, type = $.type(o);
        if (type === "undefined") {
            return undefined
        }
        if (type === "number" || type === "boolean") {
            return String(o)
        }
        if (type === "string") {
            return $.quoteString(o)
        }
        if (typeof o.toJSON === "function") {
            return $.toJSON(o.toJSON())
        }
        if (type === "date") {
            var month = o.getUTCMonth() + 1, day = o.getUTCDate(), year = o.getUTCFullYear(), hours = o.getUTCHours(), minutes = o.getUTCMinutes(), seconds = o.getUTCSeconds(), milli = o.getUTCMilliseconds();
            if (month < 10) {
                month = "0" + month
            }
            if (day < 10) {
                day = "0" + day
            }
            if (hours < 10) {
                hours = "0" + hours
            }
            if (minutes < 10) {
                minutes = "0" + minutes
            }
            if (seconds < 10) {
                seconds = "0" + seconds
            }
            if (milli < 100) {
                milli = "0" + milli
            }
            if (milli < 10) {
                milli = "0" + milli
            }
            return '"' + year + "-" + month + "-" + day + "T" + hours + ":" + minutes + ":" + seconds + "." + milli + 'Z"'
        }
        pairs = [];
        if ($.isArray(o)) {
            for (k = 0; k < o.length; k++) {
                pairs.push($.toJSON(o[k]) || "null")
            }
            return "[" + pairs.join(",") + "]"
        }
        if (typeof o === "object") {
            for (k in o) {
                if (hasOwn.call(o, k)) {
                    type = typeof k;
                    if (type === "number") {
                        name = '"' + k + '"'
                    } else {
                        if (type === "string") {
                            name = $.quoteString(k)
                        } else {
                            continue
                        }
                    }
                    type = typeof o[k];
                    if (type !== "function" && type !== "undefined") {
                        val = $.toJSON(o[k]);
                        pairs.push(name + ":" + val)
                    }
                }
            }
            return "{" + pairs.join(",") + "}"
        }
    };
    $.evalJSON = typeof JSON === "object" && JSON.parse ? JSON.parse : function (str) {
        return eval("(" + str + ")")
    };
    $.secureEvalJSON = typeof JSON === "object" && JSON.parse ? JSON.parse : function (str) {
        var filtered = str.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "");
        if (/^[\],:{}\s]*$/.test(filtered)) {
            return eval("(" + str + ")")
        }
        throw new SyntaxError("Error parsing JSON, source is not valid.")
    };
    $.quoteString = function (str) {
        if (str.match(escape)) {
            return '"' + str.replace(escape, function (a) {
                    var c = meta[a];
                    if (typeof c === "string") {
                        return c
                    }
                    c = a.charCodeAt();
                    return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
                }) + '"'
        }
        return '"' + str + '"'
    }
}(jQuery));
/*!
 * accounting.js v0.3.2
 * Copyright 2011, Joss Crowcroft
 *
 * Freely distributable under the MIT license.
 * Portions of accounting.js are inspired or borrowed from underscore.js
 *
 * Full details and documentation:
 * http://josscrowcroft.github.com/accounting.js/
 */
(function (root, undefined) {
    var lib = {};
    lib.version = "0.3.2";
    lib.settings = {
        currency: {symbol: "$", format: "%s%v", decimal: ".", thousand: ",", precision: 2, grouping: 3},
        number: {precision: 0, grouping: 3, thousand: ",", decimal: "."}
    };
    var nativeMap = Array.prototype.map, nativeIsArray = Array.isArray, toString = Object.prototype.toString;

    function isString(obj) {
        return !!(obj === "" || (obj && obj.charCodeAt && obj.substr))
    }

    function isArray(obj) {
        return nativeIsArray ? nativeIsArray(obj) : toString.call(obj) === "[object Array]"
    }

    function isObject(obj) {
        return obj && toString.call(obj) === "[object Object]"
    }

    function defaults(object, defs) {
        var key;
        object = object || {};
        defs = defs || {};
        for (key in defs) {
            if (defs.hasOwnProperty(key)) {
                if (object[key] == null) {
                    object[key] = defs[key]
                }
            }
        }
        return object
    }

    function map(obj, iterator, context) {
        var results = [], i, j;
        if (!obj) {
            return results
        }
        if (nativeMap && obj.map === nativeMap) {
            return obj.map(iterator, context)
        }
        for (i = 0, j = obj.length; i < j; i++) {
            results[i] = iterator.call(context, obj[i], i, obj)
        }
        return results
    }

    function checkPrecision(val, base) {
        val = Math.round(Math.abs(val));
        return isNaN(val) ? base : val
    }

    function checkCurrencyFormat(format) {
        var defaults = lib.settings.currency.format;
        if (typeof format === "function") {
            format = format()
        }
        if (isString(format) && format.match("%v")) {
            return {pos: format, neg: format.replace("-", "").replace("%v", "-%v"), zero: format}
        } else {
            if (!format || !format.pos || !format.pos.match("%v")) {
                return (!isString(defaults)) ? defaults : lib.settings.currency.format = {
                    pos: defaults,
                    neg: defaults.replace("%v", "-%v"),
                    zero: defaults
                }
            }
        }
        return format
    }

    var unformat = lib.unformat = lib.parse = function (value, decimal) {
        if (isArray(value)) {
            return map(value, function (val) {
                return unformat(val, decimal)
            })
        }
        value = value || 0;
        if (typeof value === "number") {
            return value
        }
        decimal = decimal || lib.settings.number.decimal;
        var regex = new RegExp("[^0-9-" + decimal + "]", ["g"]), unformatted = parseFloat(("" + value).replace(/\((.*)\)/, "-$1").replace(regex, "").replace(decimal, "."));
        return !isNaN(unformatted) ? unformatted : 0
    };
    var toFixed = lib.toFixed = function (value, precision) {
        precision = checkPrecision(precision, lib.settings.number.precision);
        var power = Math.pow(10, precision);
        return (Math.round(lib.unformat(value) * power) / power).toFixed(precision)
    };
    var formatNumber = lib.formatNumber = function (number, precision, thousand, decimal) {
        if (isArray(number)) {
            return map(number, function (val) {
                return formatNumber(val, precision, thousand, decimal)
            })
        }
        number = unformat(number);
        var opts = defaults((isObject(precision) ? precision : {
            precision: precision,
            thousand: thousand,
            decimal: decimal
        }), lib.settings.number), usePrecision = checkPrecision(opts.precision), negative = number < 0 ? "-" : "", base = parseInt(toFixed(Math.abs(number || 0), usePrecision), 10) + "", mod = base.length > 3 ? base.length % 3 : 0;
        return negative + (mod ? base.substr(0, mod) + opts.thousand : "") + base.substr(mod).replace(/(\d{3})(?=\d)/g, "$1" + opts.thousand) + (usePrecision ? opts.decimal + toFixed(Math.abs(number), usePrecision).split(".")[1] : "")
    };
    var formatMoney = lib.formatMoney = function (number, symbol, precision, thousand, decimal, format) {
        if (isArray(number)) {
            return map(number, function (val) {
                return formatMoney(val, symbol, precision, thousand, decimal, format)
            })
        }
        number = unformat(number);
        var opts = defaults((isObject(symbol) ? symbol : {
            symbol: symbol,
            precision: precision,
            thousand: thousand,
            decimal: decimal,
            format: format
        }), lib.settings.currency), formats = checkCurrencyFormat(opts.format), useFormat = number > 0 ? formats.pos : number < 0 ? formats.neg : formats.zero;
        return useFormat.replace("%s", opts.symbol).replace("%v", formatNumber(Math.abs(number), checkPrecision(opts.precision), opts.thousand, opts.decimal))
    };
    lib.formatColumn = function (list, symbol, precision, thousand, decimal, format) {
        if (!list) {
            return []
        }
        var opts = defaults((isObject(symbol) ? symbol : {
            symbol: symbol,
            precision: precision,
            thousand: thousand,
            decimal: decimal,
            format: format
        }), lib.settings.currency), formats = checkCurrencyFormat(opts.format), padAfterSymbol = formats.pos.indexOf("%s") < formats.pos.indexOf("%v") ? true : false, maxLength = 0, formatted = map(list, function (val, i) {
            if (isArray(val)) {
                return lib.formatColumn(val, opts)
            } else {
                val = unformat(val);
                var useFormat = val > 0 ? formats.pos : val < 0 ? formats.neg : formats.zero, fVal = useFormat.replace("%s", opts.symbol).replace("%v", formatNumber(Math.abs(val), checkPrecision(opts.precision), opts.thousand, opts.decimal));
                if (fVal.length > maxLength) {
                    maxLength = fVal.length
                }
                return fVal
            }
        });
        return map(formatted, function (val, i) {
            if (isString(val) && val.length < maxLength) {
                return padAfterSymbol ? val.replace(opts.symbol, opts.symbol + (new Array(maxLength - val.length + 1).join(" "))) : (new Array(maxLength - val.length + 1).join(" ")) + val
            }
            return val
        })
    };
    if (typeof exports !== "undefined") {
        if (typeof module !== "undefined" && module.exports) {
            exports = module.exports = lib
        }
        exports.accounting = lib
    } else {
        if (typeof define === "function" && define.amd) {
            define([], function () {
                return lib
            })
        } else {
            lib.noConflict = (function (oldAccounting) {
                return function () {
                    root.accounting = oldAccounting;
                    lib.noConflict = undefined;
                    return lib
                }
            })(root.accounting);
            root.accounting = lib
        }
    }
}(this));
(function () {
    var undefined;
    var arrayPool = [], objectPool = [];
    var idCounter = 0;
    var keyPrefix = +new Date + "";
    var largeArraySize = 75;
    var maxPoolSize = 40;
    var whitespace = (" \t\x0B\f\xA0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000");
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reFuncName = /^\s*function[ \n\r\t]+\w/;
    var reInterpolate = /<%=([\s\S]+?)%>/g;
    var reLeadingSpacesAndZeros = RegExp("^[" + whitespace + "]*0+(?=.$)");
    var reNoMatch = /($^)/;
    var reThis = /\bthis\b/;
    var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;
    var contextProps = ["Array", "Boolean", "Date", "Function", "Math", "Number", "Object", "RegExp", "String", "_", "attachEvent", "clearTimeout", "isFinite", "isNaN", "parseInt", "setTimeout"];
    var templateCounter = 0;
    var argsClass = "[object Arguments]", arrayClass = "[object Array]", boolClass = "[object Boolean]", dateClass = "[object Date]", funcClass = "[object Function]", numberClass = "[object Number]", objectClass = "[object Object]", regexpClass = "[object RegExp]", stringClass = "[object String]";
    var cloneableClasses = {};
    cloneableClasses[funcClass] = false;
    cloneableClasses[argsClass] = cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] = cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;
    var debounceOptions = {leading: false, maxWait: 0, trailing: false};
    var descriptor = {configurable: false, enumerable: false, value: null, writable: false};
    var objectTypes = {
        "boolean": false,
        "function": true,
        object: true,
        number: false,
        string: false,
        "undefined": false
    };
    var stringEscapes = {"\\": "\\", "'": "'", "\n": "n", "\r": "r", "\t": "t", "\u2028": "u2028", "\u2029": "u2029"};
    var root = (objectTypes[typeof window] && window) || this;
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
    var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        root = freeGlobal
    }
    function baseIndexOf(array, value, fromIndex) {
        var index = (fromIndex || 0) - 1, length = array ? array.length : 0;
        while (++index < length) {
            if (array[index] === value) {
                return index
            }
        }
        return -1
    }

    function cacheIndexOf(cache, value) {
        var type = typeof value;
        cache = cache.cache;
        if (type == "boolean" || value == null) {
            return cache[value] ? 0 : -1
        }
        if (type != "number" && type != "string") {
            type = "object"
        }
        var key = type == "number" ? value : keyPrefix + value;
        cache = (cache = cache[type]) && cache[key];
        return type == "object" ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1) : (cache ? 0 : -1)
    }

    function cachePush(value) {
        var cache = this.cache, type = typeof value;
        if (type == "boolean" || value == null) {
            cache[value] = true
        } else {
            if (type != "number" && type != "string") {
                type = "object"
            }
            var key = type == "number" ? value : keyPrefix + value, typeCache = cache[type] || (cache[type] = {});
            if (type == "object") {
                (typeCache[key] || (typeCache[key] = [])).push(value)
            } else {
                typeCache[key] = true
            }
        }
    }

    function charAtCallback(value) {
        return value.charCodeAt(0)
    }

    function compareAscending(a, b) {
        var ac = a.criteria, bc = b.criteria, index = -1, length = ac.length;
        while (++index < length) {
            var value = ac[index], other = bc[index];
            if (value !== other) {
                if (value > other || typeof value == "undefined") {
                    return 1
                }
                if (value < other || typeof other == "undefined") {
                    return -1
                }
            }
        }
        return a.index - b.index
    }

    function createCache(array) {
        var index = -1, length = array.length, first = array[0], mid = array[(length / 2) | 0], last = array[length - 1];
        if (first && typeof first == "object" && mid && typeof mid == "object" && last && typeof last == "object") {
            return false
        }
        var cache = getObject();
        cache["false"] = cache["null"] = cache["true"] = cache["undefined"] = false;
        var result = getObject();
        result.array = array;
        result.cache = cache;
        result.push = cachePush;
        while (++index < length) {
            result.push(array[index])
        }
        return result
    }

    function escapeStringChar(match) {
        return "\\" + stringEscapes[match]
    }

    function getArray() {
        return arrayPool.pop() || []
    }

    function getObject() {
        return objectPool.pop() || {
                array: null,
                cache: null,
                criteria: null,
                "false": false,
                index: 0,
                "null": false,
                number: null,
                object: null,
                push: null,
                string: null,
                "true": false,
                "undefined": false,
                value: null
            }
    }

    function releaseArray(array) {
        array.length = 0;
        if (arrayPool.length < maxPoolSize) {
            arrayPool.push(array)
        }
    }

    function releaseObject(object) {
        var cache = object.cache;
        if (cache) {
            releaseObject(cache)
        }
        object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
        if (objectPool.length < maxPoolSize) {
            objectPool.push(object)
        }
    }

    function slice(array, start, end) {
        start || (start = 0);
        if (typeof end == "undefined") {
            end = array ? array.length : 0
        }
        var index = -1, length = end - start || 0, result = Array(length < 0 ? 0 : length);
        while (++index < length) {
            result[index] = array[start + index]
        }
        return result
    }

    function runInContext(context) {
        context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
        var Array = context.Array, Boolean = context.Boolean, Date = context.Date, Function = context.Function, Math = context.Math, Number = context.Number, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        var arrayRef = [];
        var objectProto = Object.prototype;
        var oldDash = context._;
        var toString = objectProto.toString;
        var reNative = RegExp("^" + String(toString).replace(/[.*+?^${}()|[\]\\]/g, "\\$&").replace(/toString| for [^\]]+/g, ".*?") + "$");
        var ceil = Math.ceil, clearTimeout = context.clearTimeout, floor = Math.floor, fnToString = Function.prototype.toString, getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf, hasOwnProperty = objectProto.hasOwnProperty, push = arrayRef.push, setTimeout = context.setTimeout, splice = arrayRef.splice, unshift = arrayRef.unshift;
        var defineProperty = (function () {
            try {
                var o = {}, func = isNative(func = Object.defineProperty) && func, result = func(o, o, o) && func
            } catch (e) {
            }
            return result
        }());
        var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate, nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray, nativeIsFinite = context.isFinite, nativeIsNaN = context.isNaN, nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys, nativeMax = Math.max, nativeMin = Math.min, nativeParseInt = context.parseInt, nativeRandom = Math.random;
        var ctorByClass = {};
        ctorByClass[arrayClass] = Array;
        ctorByClass[boolClass] = Boolean;
        ctorByClass[dateClass] = Date;
        ctorByClass[funcClass] = Function;
        ctorByClass[objectClass] = Object;
        ctorByClass[numberClass] = Number;
        ctorByClass[regexpClass] = RegExp;
        ctorByClass[stringClass] = String;
        function lodash(value) {
            return (value && typeof value == "object" && !isArray(value) && hasOwnProperty.call(value, "__wrapped__")) ? value : new lodashWrapper(value)
        }

        function lodashWrapper(value, chainAll) {
            this.__chain__ = !!chainAll;
            this.__wrapped__ = value
        }

        lodashWrapper.prototype = lodash.prototype;
        var support = lodash.support = {};
        support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);
        support.funcNames = typeof Function.name == "string";
        lodash.templateSettings = {
            escape: /<%-([\s\S]+?)%>/g,
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: reInterpolate,
            variable: "",
            imports: {_: lodash}
        };
        function baseBind(bindData) {
            var func = bindData[0], partialArgs = bindData[2], thisArg = bindData[4];

            function bound() {
                if (partialArgs) {
                    var args = slice(partialArgs);
                    push.apply(args, arguments)
                }
                if (this instanceof bound) {
                    var thisBinding = baseCreate(func.prototype), result = func.apply(thisBinding, args || arguments);
                    return isObject(result) ? result : thisBinding
                }
                return func.apply(thisArg, args || arguments)
            }

            setBindData(bound, bindData);
            return bound
        }

        function baseClone(value, isDeep, callback, stackA, stackB) {
            if (callback) {
                var result = callback(value);
                if (typeof result != "undefined") {
                    return result
                }
            }
            var isObj = isObject(value);
            if (isObj) {
                var className = toString.call(value);
                if (!cloneableClasses[className]) {
                    return value
                }
                var ctor = ctorByClass[className];
                switch (className) {
                    case boolClass:
                    case dateClass:
                        return new ctor(+value);
                    case numberClass:
                    case stringClass:
                        return new ctor(value);
                    case regexpClass:
                        result = ctor(value.source, reFlags.exec(value));
                        result.lastIndex = value.lastIndex;
                        return result
                }
            } else {
                return value
            }
            var isArr = isArray(value);
            if (isDeep) {
                var initedStack = !stackA;
                stackA || (stackA = getArray());
                stackB || (stackB = getArray());
                var length = stackA.length;
                while (length--) {
                    if (stackA[length] == value) {
                        return stackB[length]
                    }
                }
                result = isArr ? ctor(value.length) : {}
            } else {
                result = isArr ? slice(value) : assign({}, value)
            }
            if (isArr) {
                if (hasOwnProperty.call(value, "index")) {
                    result.index = value.index
                }
                if (hasOwnProperty.call(value, "input")) {
                    result.input = value.input
                }
            }
            if (!isDeep) {
                return result
            }
            stackA.push(value);
            stackB.push(result);
            (isArr ? forEach : forOwn)(value, function (objValue, key) {
                result[key] = baseClone(objValue, isDeep, callback, stackA, stackB)
            });
            if (initedStack) {
                releaseArray(stackA);
                releaseArray(stackB)
            }
            return result
        }

        function baseCreate(prototype, properties) {
            return isObject(prototype) ? nativeCreate(prototype) : {}
        }

        if (!nativeCreate) {
            baseCreate = (function () {
                function Object() {
                }

                return function (prototype) {
                    if (isObject(prototype)) {
                        Object.prototype = prototype;
                        var result = new Object;
                        Object.prototype = null
                    }
                    return result || context.Object()
                }
            }())
        }
        function baseCreateCallback(func, thisArg, argCount) {
            if (typeof func != "function") {
                return identity
            }
            if (typeof thisArg == "undefined" || !("prototype" in func)) {
                return func
            }
            var bindData = func.__bindData__;
            if (typeof bindData == "undefined") {
                if (support.funcNames) {
                    bindData = !func.name
                }
                bindData = bindData || !support.funcDecomp;
                if (!bindData) {
                    var source = fnToString.call(func);
                    if (!support.funcNames) {
                        bindData = !reFuncName.test(source)
                    }
                    if (!bindData) {
                        bindData = reThis.test(source);
                        setBindData(func, bindData)
                    }
                }
            }
            if (bindData === false || (bindData !== true && bindData[1] & 1)) {
                return func
            }
            switch (argCount) {
                case 1:
                    return function (value) {
                        return func.call(thisArg, value)
                    };
                case 2:
                    return function (a, b) {
                        return func.call(thisArg, a, b)
                    };
                case 3:
                    return function (value, index, collection) {
                        return func.call(thisArg, value, index, collection)
                    };
                case 4:
                    return function (accumulator, value, index, collection) {
                        return func.call(thisArg, accumulator, value, index, collection)
                    }
            }
            return bind(func, thisArg)
        }

        function baseCreateWrapper(bindData) {
            var func = bindData[0], bitmask = bindData[1], partialArgs = bindData[2], partialRightArgs = bindData[3], thisArg = bindData[4], arity = bindData[5];
            var isBind = bitmask & 1, isBindKey = bitmask & 2, isCurry = bitmask & 4, isCurryBound = bitmask & 8, key = func;

            function bound() {
                var thisBinding = isBind ? thisArg : this;
                if (partialArgs) {
                    var args = slice(partialArgs);
                    push.apply(args, arguments)
                }
                if (partialRightArgs || isCurry) {
                    args || (args = slice(arguments));
                    if (partialRightArgs) {
                        push.apply(args, partialRightArgs)
                    }
                    if (isCurry && args.length < arity) {
                        bitmask |= 16 & ~32;
                        return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity])
                    }
                }
                args || (args = arguments);
                if (isBindKey) {
                    func = thisBinding[key]
                }
                if (this instanceof bound) {
                    thisBinding = baseCreate(func.prototype);
                    var result = func.apply(thisBinding, args);
                    return isObject(result) ? result : thisBinding
                }
                return func.apply(thisBinding, args)
            }

            setBindData(bound, bindData);
            return bound
        }

        function baseDifference(array, values) {
            var index = -1, indexOf = getIndexOf(), length = array ? array.length : 0, isLarge = length >= largeArraySize && indexOf === baseIndexOf, result = [];
            if (isLarge) {
                var cache = createCache(values);
                if (cache) {
                    indexOf = cacheIndexOf;
                    values = cache
                } else {
                    isLarge = false
                }
            }
            while (++index < length) {
                var value = array[index];
                if (indexOf(values, value) < 0) {
                    result.push(value)
                }
            }
            if (isLarge) {
                releaseObject(values)
            }
            return result
        }

        function baseFlatten(array, isShallow, isStrict, fromIndex) {
            var index = (fromIndex || 0) - 1, length = array ? array.length : 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (value && typeof value == "object" && typeof value.length == "number" && (isArray(value) || isArguments(value))) {
                    if (!isShallow) {
                        value = baseFlatten(value, isShallow, isStrict)
                    }
                    var valIndex = -1, valLength = value.length, resIndex = result.length;
                    result.length += valLength;
                    while (++valIndex < valLength) {
                        result[resIndex++] = value[valIndex]
                    }
                } else {
                    if (!isStrict) {
                        result.push(value)
                    }
                }
            }
            return result
        }

        function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
            if (callback) {
                var result = callback(a, b);
                if (typeof result != "undefined") {
                    return !!result
                }
            }
            if (a === b) {
                return a !== 0 || (1 / a == 1 / b)
            }
            var type = typeof a, otherType = typeof b;
            if (a === a && !(a && objectTypes[type]) && !(b && objectTypes[otherType])) {
                return false
            }
            if (a == null || b == null) {
                return a === b
            }
            var className = toString.call(a), otherClass = toString.call(b);
            if (className == argsClass) {
                className = objectClass
            }
            if (otherClass == argsClass) {
                otherClass = objectClass
            }
            if (className != otherClass) {
                return false
            }
            switch (className) {
                case boolClass:
                case dateClass:
                    return +a == +b;
                case numberClass:
                    return (a != +a) ? b != +b : (a == 0 ? (1 / a == 1 / b) : a == +b);
                case regexpClass:
                case stringClass:
                    return a == String(b)
            }
            var isArr = className == arrayClass;
            if (!isArr) {
                var aWrapped = hasOwnProperty.call(a, "__wrapped__"), bWrapped = hasOwnProperty.call(b, "__wrapped__");
                if (aWrapped || bWrapped) {
                    return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB)
                }
                if (className != objectClass) {
                    return false
                }
                var ctorA = a.constructor, ctorB = b.constructor;
                if (ctorA != ctorB && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && ("constructor" in a && "constructor" in b)) {
                    return false
                }
            }
            var initedStack = !stackA;
            stackA || (stackA = getArray());
            stackB || (stackB = getArray());
            var length = stackA.length;
            while (length--) {
                if (stackA[length] == a) {
                    return stackB[length] == b
                }
            }
            var size = 0;
            result = true;
            stackA.push(a);
            stackB.push(b);
            if (isArr) {
                length = a.length;
                size = b.length;
                result = size == length;
                if (result || isWhere) {
                    while (size--) {
                        var index = length, value = b[size];
                        if (isWhere) {
                            while (index--) {
                                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                                    break
                                }
                            }
                        } else {
                            if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
                                break
                            }
                        }
                    }
                }
            } else {
                forIn(b, function (value, key, b) {
                    if (hasOwnProperty.call(b, key)) {
                        size++;
                        return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB))
                    }
                });
                if (result && !isWhere) {
                    forIn(a, function (value, key, a) {
                        if (hasOwnProperty.call(a, key)) {
                            return (result = --size > -1)
                        }
                    })
                }
            }
            stackA.pop();
            stackB.pop();
            if (initedStack) {
                releaseArray(stackA);
                releaseArray(stackB)
            }
            return result
        }

        function baseMerge(object, source, callback, stackA, stackB) {
            (isArray(source) ? forEach : forOwn)(source, function (source, key) {
                var found, isArr, result = source, value = object[key];
                if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
                    var stackLength = stackA.length;
                    while (stackLength--) {
                        if ((found = stackA[stackLength] == source)) {
                            value = stackB[stackLength];
                            break
                        }
                    }
                    if (!found) {
                        var isShallow;
                        if (callback) {
                            result = callback(value, source);
                            if ((isShallow = typeof result != "undefined")) {
                                value = result
                            }
                        }
                        if (!isShallow) {
                            value = isArr ? (isArray(value) ? value : []) : (isPlainObject(value) ? value : {})
                        }
                        stackA.push(source);
                        stackB.push(value);
                        if (!isShallow) {
                            baseMerge(value, source, callback, stackA, stackB)
                        }
                    }
                } else {
                    if (callback) {
                        result = callback(value, source);
                        if (typeof result == "undefined") {
                            result = source
                        }
                    }
                    if (typeof result != "undefined") {
                        value = result
                    }
                }
                object[key] = value
            })
        }

        function baseRandom(min, max) {
            return min + floor(nativeRandom() * (max - min + 1))
        }

        function baseUniq(array, isSorted, callback) {
            var index = -1, indexOf = getIndexOf(), length = array ? array.length : 0, result = [];
            var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf, seen = (callback || isLarge) ? getArray() : result;
            if (isLarge) {
                var cache = createCache(seen);
                indexOf = cacheIndexOf;
                seen = cache
            }
            while (++index < length) {
                var value = array[index], computed = callback ? callback(value, index, array) : value;
                if (isSorted ? !index || seen[seen.length - 1] !== computed : indexOf(seen, computed) < 0) {
                    if (callback || isLarge) {
                        seen.push(computed)
                    }
                    result.push(value)
                }
            }
            if (isLarge) {
                releaseArray(seen.array);
                releaseObject(seen)
            } else {
                if (callback) {
                    releaseArray(seen)
                }
            }
            return result
        }

        function createAggregator(setter) {
            return function (collection, callback, thisArg) {
                var result = {};
                callback = lodash.createCallback(callback, thisArg, 3);
                var index = -1, length = collection ? collection.length : 0;
                if (typeof length == "number") {
                    while (++index < length) {
                        var value = collection[index];
                        setter(result, value, callback(value, index, collection), collection)
                    }
                } else {
                    forOwn(collection, function (value, key, collection) {
                        setter(result, value, callback(value, key, collection), collection)
                    })
                }
                return result
            }
        }

        function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
            var isBind = bitmask & 1, isBindKey = bitmask & 2, isCurry = bitmask & 4, isCurryBound = bitmask & 8, isPartial = bitmask & 16, isPartialRight = bitmask & 32;
            if (!isBindKey && !isFunction(func)) {
                throw new TypeError
            }
            if (isPartial && !partialArgs.length) {
                bitmask &= ~16;
                isPartial = partialArgs = false
            }
            if (isPartialRight && !partialRightArgs.length) {
                bitmask &= ~32;
                isPartialRight = partialRightArgs = false
            }
            var bindData = func && func.__bindData__;
            if (bindData && bindData !== true) {
                bindData = slice(bindData);
                if (bindData[2]) {
                    bindData[2] = slice(bindData[2])
                }
                if (bindData[3]) {
                    bindData[3] = slice(bindData[3])
                }
                if (isBind && !(bindData[1] & 1)) {
                    bindData[4] = thisArg
                }
                if (!isBind && bindData[1] & 1) {
                    bitmask |= 8
                }
                if (isCurry && !(bindData[1] & 4)) {
                    bindData[5] = arity
                }
                if (isPartial) {
                    push.apply(bindData[2] || (bindData[2] = []), partialArgs)
                }
                if (isPartialRight) {
                    unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs)
                }
                bindData[1] |= bitmask;
                return createWrapper.apply(null, bindData)
            }
            var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
            return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity])
        }

        function escapeHtmlChar(match) {
            return htmlEscapes[match]
        }

        function getIndexOf() {
            var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
            return result
        }

        function isNative(value) {
            return typeof value == "function" && reNative.test(value)
        }

        var setBindData = !defineProperty ? noop : function (func, value) {
            descriptor.value = value;
            defineProperty(func, "__bindData__", descriptor)
        };

        function shimIsPlainObject(value) {
            var ctor, result;
            if (!(value && toString.call(value) == objectClass) || (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
                return false
            }
            forIn(value, function (value, key) {
                result = key
            });
            return typeof result == "undefined" || hasOwnProperty.call(value, result)
        }

        function unescapeHtmlChar(match) {
            return htmlUnescapes[match]
        }

        function isArguments(value) {
            return value && typeof value == "object" && typeof value.length == "number" && toString.call(value) == argsClass || false
        }

        var isArray = nativeIsArray || function (value) {
                return value && typeof value == "object" && typeof value.length == "number" && toString.call(value) == arrayClass || false
            };
        var shimKeys = function (object) {
            var index, iterable = object, result = [];
            if (!iterable) {
                return result
            }
            if (!(objectTypes[typeof object])) {
                return result
            }
            for (index in iterable) {
                if (hasOwnProperty.call(iterable, index)) {
                    result.push(index)
                }
            }
            return result
        };
        var keys = !nativeKeys ? shimKeys : function (object) {
            if (!isObject(object)) {
                return []
            }
            return nativeKeys(object)
        };
        var htmlEscapes = {"&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;"};
        var htmlUnescapes = invert(htmlEscapes);
        var reEscapedHtml = RegExp("(" + keys(htmlUnescapes).join("|") + ")", "g"), reUnescapedHtml = RegExp("[" + keys(htmlEscapes).join("") + "]", "g");
        var assign = function (object, source, guard) {
            var index, iterable = object, result = iterable;
            if (!iterable) {
                return result
            }
            var args = arguments, argsIndex = 0, argsLength = typeof guard == "number" ? 2 : args.length;
            if (argsLength > 3 && typeof args[argsLength - 2] == "function") {
                var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2)
            } else {
                if (argsLength > 2 && typeof args[argsLength - 1] == "function") {
                    callback = args[--argsLength]
                }
            }
            while (++argsIndex < argsLength) {
                iterable = args[argsIndex];
                if (iterable && objectTypes[typeof iterable]) {
                    var ownIndex = -1, ownProps = objectTypes[typeof iterable] && keys(iterable), length = ownProps ? ownProps.length : 0;
                    while (++ownIndex < length) {
                        index = ownProps[ownIndex];
                        result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]
                    }
                }
            }
            return result
        };

        function clone(value, isDeep, callback, thisArg) {
            if (typeof isDeep != "boolean" && isDeep != null) {
                thisArg = callback;
                callback = isDeep;
                isDeep = false
            }
            return baseClone(value, isDeep, typeof callback == "function" && baseCreateCallback(callback, thisArg, 1))
        }

        function cloneDeep(value, callback, thisArg) {
            return baseClone(value, true, typeof callback == "function" && baseCreateCallback(callback, thisArg, 1))
        }

        function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties ? assign(result, properties) : result
        }

        var defaults = function (object, source, guard) {
            var index, iterable = object, result = iterable;
            if (!iterable) {
                return result
            }
            var args = arguments, argsIndex = 0, argsLength = typeof guard == "number" ? 2 : args.length;
            while (++argsIndex < argsLength) {
                iterable = args[argsIndex];
                if (iterable && objectTypes[typeof iterable]) {
                    var ownIndex = -1, ownProps = objectTypes[typeof iterable] && keys(iterable), length = ownProps ? ownProps.length : 0;
                    while (++ownIndex < length) {
                        index = ownProps[ownIndex];
                        if (typeof result[index] == "undefined") {
                            result[index] = iterable[index]
                        }
                    }
                }
            }
            return result
        };

        function findKey(object, callback, thisArg) {
            var result;
            callback = lodash.createCallback(callback, thisArg, 3);
            forOwn(object, function (value, key, object) {
                if (callback(value, key, object)) {
                    result = key;
                    return false
                }
            });
            return result
        }

        function findLastKey(object, callback, thisArg) {
            var result;
            callback = lodash.createCallback(callback, thisArg, 3);
            forOwnRight(object, function (value, key, object) {
                if (callback(value, key, object)) {
                    result = key;
                    return false
                }
            });
            return result
        }

        var forIn = function (collection, callback, thisArg) {
            var index, iterable = collection, result = iterable;
            if (!iterable) {
                return result
            }
            if (!objectTypes[typeof iterable]) {
                return result
            }
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            for (index in iterable) {
                if (callback(iterable[index], index, collection) === false) {
                    return result
                }
            }
            return result
        };

        function forInRight(object, callback, thisArg) {
            var pairs = [];
            forIn(object, function (value, key) {
                pairs.push(key, value)
            });
            var length = pairs.length;
            callback = baseCreateCallback(callback, thisArg, 3);
            while (length--) {
                if (callback(pairs[length--], pairs[length], object) === false) {
                    break
                }
            }
            return object
        }

        var forOwn = function (collection, callback, thisArg) {
            var index, iterable = collection, result = iterable;
            if (!iterable) {
                return result
            }
            if (!objectTypes[typeof iterable]) {
                return result
            }
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            var ownIndex = -1, ownProps = objectTypes[typeof iterable] && keys(iterable), length = ownProps ? ownProps.length : 0;
            while (++ownIndex < length) {
                index = ownProps[ownIndex];
                if (callback(iterable[index], index, collection) === false) {
                    return result
                }
            }
            return result
        };

        function forOwnRight(object, callback, thisArg) {
            var props = keys(object), length = props.length;
            callback = baseCreateCallback(callback, thisArg, 3);
            while (length--) {
                var key = props[length];
                if (callback(object[key], key, object) === false) {
                    break
                }
            }
            return object
        }

        function functions(object) {
            var result = [];
            forIn(object, function (value, key) {
                if (isFunction(value)) {
                    result.push(key)
                }
            });
            return result.sort()
        }

        function has(object, key) {
            return object ? hasOwnProperty.call(object, key) : false
        }

        function invert(object) {
            var index = -1, props = keys(object), length = props.length, result = {};
            while (++index < length) {
                var key = props[index];
                result[object[key]] = key
            }
            return result
        }

        function isBoolean(value) {
            return value === true || value === false || value && typeof value == "object" && toString.call(value) == boolClass || false
        }

        function isDate(value) {
            return value && typeof value == "object" && toString.call(value) == dateClass || false
        }

        function isElement(value) {
            return value && value.nodeType === 1 || false
        }

        function isEmpty(value) {
            var result = true;
            if (!value) {
                return result
            }
            var className = toString.call(value), length = value.length;
            if ((className == arrayClass || className == stringClass || className == argsClass) || (className == objectClass && typeof length == "number" && isFunction(value.splice))) {
                return !length
            }
            forOwn(value, function () {
                return (result = false)
            });
            return result
        }

        function isEqual(a, b, callback, thisArg) {
            return baseIsEqual(a, b, typeof callback == "function" && baseCreateCallback(callback, thisArg, 2))
        }

        function isFinite(value) {
            return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value))
        }

        function isFunction(value) {
            return typeof value == "function"
        }

        function isObject(value) {
            return !!(value && objectTypes[typeof value])
        }

        function isNaN(value) {
            return isNumber(value) && value != +value
        }

        function isNull(value) {
            return value === null
        }

        function isNumber(value) {
            return typeof value == "number" || value && typeof value == "object" && toString.call(value) == numberClass || false
        }

        var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function (value) {
            if (!(value && toString.call(value) == objectClass)) {
                return false
            }
            var valueOf = value.valueOf, objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);
            return objProto ? (value == objProto || getPrototypeOf(value) == objProto) : shimIsPlainObject(value)
        };

        function isRegExp(value) {
            return value && typeof value == "object" && toString.call(value) == regexpClass || false
        }

        function isString(value) {
            return typeof value == "string" || value && typeof value == "object" && toString.call(value) == stringClass || false
        }

        function isUndefined(value) {
            return typeof value == "undefined"
        }

        function mapValues(object, callback, thisArg) {
            var result = {};
            callback = lodash.createCallback(callback, thisArg, 3);
            forOwn(object, function (value, key, object) {
                result[key] = callback(value, key, object)
            });
            return result
        }

        function merge(object) {
            var args = arguments, length = 2;
            if (!isObject(object)) {
                return object
            }
            if (typeof args[2] != "number") {
                length = args.length
            }
            if (length > 3 && typeof args[length - 2] == "function") {
                var callback = baseCreateCallback(args[--length - 1], args[length--], 2)
            } else {
                if (length > 2 && typeof args[length - 1] == "function") {
                    callback = args[--length]
                }
            }
            var sources = slice(arguments, 1, length), index = -1, stackA = getArray(), stackB = getArray();
            while (++index < length) {
                baseMerge(object, sources[index], callback, stackA, stackB)
            }
            releaseArray(stackA);
            releaseArray(stackB);
            return object
        }

        function omit(object, callback, thisArg) {
            var result = {};
            if (typeof callback != "function") {
                var props = [];
                forIn(object, function (value, key) {
                    props.push(key)
                });
                props = baseDifference(props, baseFlatten(arguments, true, false, 1));
                var index = -1, length = props.length;
                while (++index < length) {
                    var key = props[index];
                    result[key] = object[key]
                }
            } else {
                callback = lodash.createCallback(callback, thisArg, 3);
                forIn(object, function (value, key, object) {
                    if (!callback(value, key, object)) {
                        result[key] = value
                    }
                })
            }
            return result
        }

        function pairs(object) {
            var index = -1, props = keys(object), length = props.length, result = Array(length);
            while (++index < length) {
                var key = props[index];
                result[index] = [key, object[key]]
            }
            return result
        }

        function pick(object, callback, thisArg) {
            var result = {};
            if (typeof callback != "function") {
                var index = -1, props = baseFlatten(arguments, true, false, 1), length = isObject(object) ? props.length : 0;
                while (++index < length) {
                    var key = props[index];
                    if (key in object) {
                        result[key] = object[key]
                    }
                }
            } else {
                callback = lodash.createCallback(callback, thisArg, 3);
                forIn(object, function (value, key, object) {
                    if (callback(value, key, object)) {
                        result[key] = value
                    }
                })
            }
            return result
        }

        function transform(object, callback, accumulator, thisArg) {
            var isArr = isArray(object);
            if (accumulator == null) {
                if (isArr) {
                    accumulator = []
                } else {
                    var ctor = object && object.constructor, proto = ctor && ctor.prototype;
                    accumulator = baseCreate(proto)
                }
            }
            if (callback) {
                callback = lodash.createCallback(callback, thisArg, 4);
                (isArr ? forEach : forOwn)(object, function (value, index, object) {
                    return callback(accumulator, value, index, object)
                })
            }
            return accumulator
        }

        function values(object) {
            var index = -1, props = keys(object), length = props.length, result = Array(length);
            while (++index < length) {
                result[index] = object[props[index]]
            }
            return result
        }

        function at(collection) {
            var args = arguments, index = -1, props = baseFlatten(args, true, false, 1), length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length, result = Array(length);
            while (++index < length) {
                result[index] = collection[props[index]]
            }
            return result
        }

        function contains(collection, target, fromIndex) {
            var index = -1, indexOf = getIndexOf(), length = collection ? collection.length : 0, result = false;
            fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
            if (isArray(collection)) {
                result = indexOf(collection, target, fromIndex) > -1
            } else {
                if (typeof length == "number") {
                    result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1
                } else {
                    forOwn(collection, function (value) {
                        if (++index >= fromIndex) {
                            return !(result = value === target)
                        }
                    })
                }
            }
            return result
        }

        var countBy = createAggregator(function (result, value, key) {
            (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1)
        });

        function every(collection, callback, thisArg) {
            var result = true;
            callback = lodash.createCallback(callback, thisArg, 3);
            var index = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
                while (++index < length) {
                    if (!(result = !!callback(collection[index], index, collection))) {
                        break
                    }
                }
            } else {
                forOwn(collection, function (value, index, collection) {
                    return (result = !!callback(value, index, collection))
                })
            }
            return result
        }

        function filter(collection, callback, thisArg) {
            var result = [];
            callback = lodash.createCallback(callback, thisArg, 3);
            var index = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
                while (++index < length) {
                    var value = collection[index];
                    if (callback(value, index, collection)) {
                        result.push(value)
                    }
                }
            } else {
                forOwn(collection, function (value, index, collection) {
                    if (callback(value, index, collection)) {
                        result.push(value)
                    }
                })
            }
            return result
        }

        function find(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg, 3);
            var index = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
                while (++index < length) {
                    var value = collection[index];
                    if (callback(value, index, collection)) {
                        return value
                    }
                }
            } else {
                var result;
                forOwn(collection, function (value, index, collection) {
                    if (callback(value, index, collection)) {
                        result = value;
                        return false
                    }
                });
                return result
            }
        }

        function findLast(collection, callback, thisArg) {
            var result;
            callback = lodash.createCallback(callback, thisArg, 3);
            forEachRight(collection, function (value, index, collection) {
                if (callback(value, index, collection)) {
                    result = value;
                    return false
                }
            });
            return result
        }

        function forEach(collection, callback, thisArg) {
            var index = -1, length = collection ? collection.length : 0;
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            if (typeof length == "number") {
                while (++index < length) {
                    if (callback(collection[index], index, collection) === false) {
                        break
                    }
                }
            } else {
                forOwn(collection, callback)
            }
            return collection
        }

        function forEachRight(collection, callback, thisArg) {
            var length = collection ? collection.length : 0;
            callback = callback && typeof thisArg == "undefined" ? callback : baseCreateCallback(callback, thisArg, 3);
            if (typeof length == "number") {
                while (length--) {
                    if (callback(collection[length], length, collection) === false) {
                        break
                    }
                }
            } else {
                var props = keys(collection);
                length = props.length;
                forOwn(collection, function (value, key, collection) {
                    key = props ? props[--length] : --length;
                    return callback(collection[key], key, collection)
                })
            }
            return collection
        }

        var groupBy = createAggregator(function (result, value, key) {
            (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value)
        });
        var indexBy = createAggregator(function (result, value, key) {
            result[key] = value
        });

        function invoke(collection, methodName) {
            var args = slice(arguments, 2), index = -1, isFunc = typeof methodName == "function", length = collection ? collection.length : 0, result = Array(typeof length == "number" ? length : 0);
            forEach(collection, function (value) {
                result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args)
            });
            return result
        }

        function map(collection, callback, thisArg) {
            var index = -1, length = collection ? collection.length : 0;
            callback = lodash.createCallback(callback, thisArg, 3);
            if (typeof length == "number") {
                var result = Array(length);
                while (++index < length) {
                    result[index] = callback(collection[index], index, collection)
                }
            } else {
                result = [];
                forOwn(collection, function (value, key, collection) {
                    result[++index] = callback(value, key, collection)
                })
            }
            return result
        }

        function max(collection, callback, thisArg) {
            var computed = -Infinity, result = computed;
            if (typeof callback != "function" && thisArg && thisArg[callback] === collection) {
                callback = null
            }
            if (callback == null && isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    var value = collection[index];
                    if (value > result) {
                        result = value
                    }
                }
            } else {
                callback = (callback == null && isString(collection)) ? charAtCallback : lodash.createCallback(callback, thisArg, 3);
                forEach(collection, function (value, index, collection) {
                    var current = callback(value, index, collection);
                    if (current > computed) {
                        computed = current;
                        result = value
                    }
                })
            }
            return result
        }

        function min(collection, callback, thisArg) {
            var computed = Infinity, result = computed;
            if (typeof callback != "function" && thisArg && thisArg[callback] === collection) {
                callback = null
            }
            if (callback == null && isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    var value = collection[index];
                    if (value < result) {
                        result = value
                    }
                }
            } else {
                callback = (callback == null && isString(collection)) ? charAtCallback : lodash.createCallback(callback, thisArg, 3);
                forEach(collection, function (value, index, collection) {
                    var current = callback(value, index, collection);
                    if (current < computed) {
                        computed = current;
                        result = value
                    }
                })
            }
            return result
        }

        var pluck = map;

        function reduce(collection, callback, accumulator, thisArg) {
            if (!collection) {
                return accumulator
            }
            var noaccum = arguments.length < 3;
            callback = lodash.createCallback(callback, thisArg, 4);
            var index = -1, length = collection.length;
            if (typeof length == "number") {
                if (noaccum) {
                    accumulator = collection[++index]
                }
                while (++index < length) {
                    accumulator = callback(accumulator, collection[index], index, collection)
                }
            } else {
                forOwn(collection, function (value, index, collection) {
                    accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index, collection)
                })
            }
            return accumulator
        }

        function reduceRight(collection, callback, accumulator, thisArg) {
            var noaccum = arguments.length < 3;
            callback = lodash.createCallback(callback, thisArg, 4);
            forEachRight(collection, function (value, index, collection) {
                accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index, collection)
            });
            return accumulator
        }

        function reject(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg, 3);
            return filter(collection, function (value, index, collection) {
                return !callback(value, index, collection)
            })
        }

        function sample(collection, n, guard) {
            if (collection && typeof collection.length != "number") {
                collection = values(collection)
            }
            if (n == null || guard) {
                return collection ? collection[baseRandom(0, collection.length - 1)] : undefined
            }
            var result = shuffle(collection);
            result.length = nativeMin(nativeMax(0, n), result.length);
            return result
        }

        function shuffle(collection) {
            var index = -1, length = collection ? collection.length : 0, result = Array(typeof length == "number" ? length : 0);
            forEach(collection, function (value) {
                var rand = baseRandom(0, ++index);
                result[index] = result[rand];
                result[rand] = value
            });
            return result
        }

        function size(collection) {
            var length = collection ? collection.length : 0;
            return typeof length == "number" ? length : keys(collection).length
        }

        function some(collection, callback, thisArg) {
            var result;
            callback = lodash.createCallback(callback, thisArg, 3);
            var index = -1, length = collection ? collection.length : 0;
            if (typeof length == "number") {
                while (++index < length) {
                    if ((result = callback(collection[index], index, collection))) {
                        break
                    }
                }
            } else {
                forOwn(collection, function (value, index, collection) {
                    return !(result = callback(value, index, collection))
                })
            }
            return !!result
        }

        function sortBy(collection, callback, thisArg) {
            var index = -1, isArr = isArray(callback), length = collection ? collection.length : 0, result = Array(typeof length == "number" ? length : 0);
            if (!isArr) {
                callback = lodash.createCallback(callback, thisArg, 3)
            }
            forEach(collection, function (value, key, collection) {
                var object = result[++index] = getObject();
                if (isArr) {
                    object.criteria = map(callback, function (key) {
                        return value[key]
                    })
                } else {
                    (object.criteria = getArray())[0] = callback(value, key, collection)
                }
                object.index = index;
                object.value = value
            });
            length = result.length;
            result.sort(compareAscending);
            while (length--) {
                var object = result[length];
                result[length] = object.value;
                if (!isArr) {
                    releaseArray(object.criteria)
                }
                releaseObject(object)
            }
            return result
        }

        function toArray(collection) {
            if (collection && typeof collection.length == "number") {
                return slice(collection)
            }
            return values(collection)
        }

        var where = filter;

        function compact(array) {
            var index = -1, length = array ? array.length : 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (value) {
                    result.push(value)
                }
            }
            return result
        }

        function difference(array) {
            return baseDifference(array, baseFlatten(arguments, true, true, 1))
        }

        function findIndex(array, callback, thisArg) {
            var index = -1, length = array ? array.length : 0;
            callback = lodash.createCallback(callback, thisArg, 3);
            while (++index < length) {
                if (callback(array[index], index, array)) {
                    return index
                }
            }
            return -1
        }

        function findLastIndex(array, callback, thisArg) {
            var length = array ? array.length : 0;
            callback = lodash.createCallback(callback, thisArg, 3);
            while (length--) {
                if (callback(array[length], length, array)) {
                    return length
                }
            }
            return -1
        }

        function first(array, callback, thisArg) {
            var n = 0, length = array ? array.length : 0;
            if (typeof callback != "number" && callback != null) {
                var index = -1;
                callback = lodash.createCallback(callback, thisArg, 3);
                while (++index < length && callback(array[index], index, array)) {
                    n++
                }
            } else {
                n = callback;
                if (n == null || thisArg) {
                    return array ? array[0] : undefined
                }
            }
            return slice(array, 0, nativeMin(nativeMax(0, n), length))
        }

        function flatten(array, isShallow, callback, thisArg) {
            if (typeof isShallow != "boolean" && isShallow != null) {
                thisArg = callback;
                callback = (typeof isShallow != "function" && thisArg && thisArg[isShallow] === array) ? null : isShallow;
                isShallow = false
            }
            if (callback != null) {
                array = map(array, callback, thisArg)
            }
            return baseFlatten(array, isShallow)
        }

        function indexOf(array, value, fromIndex) {
            if (typeof fromIndex == "number") {
                var length = array ? array.length : 0;
                fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0)
            } else {
                if (fromIndex) {
                    var index = sortedIndex(array, value);
                    return array[index] === value ? index : -1
                }
            }
            return baseIndexOf(array, value, fromIndex)
        }

        function initial(array, callback, thisArg) {
            var n = 0, length = array ? array.length : 0;
            if (typeof callback != "number" && callback != null) {
                var index = length;
                callback = lodash.createCallback(callback, thisArg, 3);
                while (index-- && callback(array[index], index, array)) {
                    n++
                }
            } else {
                n = (callback == null || thisArg) ? 1 : callback || n
            }
            return slice(array, 0, nativeMin(nativeMax(0, length - n), length))
        }

        function intersection() {
            var args = [], argsIndex = -1, argsLength = arguments.length, caches = getArray(), indexOf = getIndexOf(), trustIndexOf = indexOf === baseIndexOf, seen = getArray();
            while (++argsIndex < argsLength) {
                var value = arguments[argsIndex];
                if (isArray(value) || isArguments(value)) {
                    args.push(value);
                    caches.push(trustIndexOf && value.length >= largeArraySize && createCache(argsIndex ? args[argsIndex] : seen))
                }
            }
            var array = args[0], index = -1, length = array ? array.length : 0, result = [];
            outer:while (++index < length) {
                var cache = caches[0];
                value = array[index];
                if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
                    argsIndex = argsLength;
                    (cache || seen).push(value);
                    while (--argsIndex) {
                        cache = caches[argsIndex];
                        if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
                            continue outer
                        }
                    }
                    result.push(value)
                }
            }
            while (argsLength--) {
                cache = caches[argsLength];
                if (cache) {
                    releaseObject(cache)
                }
            }
            releaseArray(caches);
            releaseArray(seen);
            return result
        }

        function last(array, callback, thisArg) {
            var n = 0, length = array ? array.length : 0;
            if (typeof callback != "number" && callback != null) {
                var index = length;
                callback = lodash.createCallback(callback, thisArg, 3);
                while (index-- && callback(array[index], index, array)) {
                    n++
                }
            } else {
                n = callback;
                if (n == null || thisArg) {
                    return array ? array[length - 1] : undefined
                }
            }
            return slice(array, nativeMax(0, length - n))
        }

        function lastIndexOf(array, value, fromIndex) {
            var index = array ? array.length : 0;
            if (typeof fromIndex == "number") {
                index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1
            }
            while (index--) {
                if (array[index] === value) {
                    return index
                }
            }
            return -1
        }

        function pull(array) {
            var args = arguments, argsIndex = 0, argsLength = args.length, length = array ? array.length : 0;
            while (++argsIndex < argsLength) {
                var index = -1, value = args[argsIndex];
                while (++index < length) {
                    if (array[index] === value) {
                        splice.call(array, index--, 1);
                        length--
                    }
                }
            }
            return array
        }

        function range(start, end, step) {
            start = +start || 0;
            step = typeof step == "number" ? step : (+step || 1);
            if (end == null) {
                end = start;
                start = 0
            }
            var index = -1, length = nativeMax(0, ceil((end - start) / (step || 1))), result = Array(length);
            while (++index < length) {
                result[index] = start;
                start += step
            }
            return result
        }

        function remove(array, callback, thisArg) {
            var index = -1, length = array ? array.length : 0, result = [];
            callback = lodash.createCallback(callback, thisArg, 3);
            while (++index < length) {
                var value = array[index];
                if (callback(value, index, array)) {
                    result.push(value);
                    splice.call(array, index--, 1);
                    length--
                }
            }
            return result
        }

        function rest(array, callback, thisArg) {
            if (typeof callback != "number" && callback != null) {
                var n = 0, index = -1, length = array ? array.length : 0;
                callback = lodash.createCallback(callback, thisArg, 3);
                while (++index < length && callback(array[index], index, array)) {
                    n++
                }
            } else {
                n = (callback == null || thisArg) ? 1 : nativeMax(0, callback)
            }
            return slice(array, n)
        }

        function sortedIndex(array, value, callback, thisArg) {
            var low = 0, high = array ? array.length : low;
            callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
            value = callback(value);
            while (low < high) {
                var mid = (low + high) >>> 1;
                (callback(array[mid]) < value) ? low = mid + 1 : high = mid
            }
            return low
        }

        function union() {
            return baseUniq(baseFlatten(arguments, true, true))
        }

        function uniq(array, isSorted, callback, thisArg) {
            if (typeof isSorted != "boolean" && isSorted != null) {
                thisArg = callback;
                callback = (typeof isSorted != "function" && thisArg && thisArg[isSorted] === array) ? null : isSorted;
                isSorted = false
            }
            if (callback != null) {
                callback = lodash.createCallback(callback, thisArg, 3)
            }
            return baseUniq(array, isSorted, callback)
        }

        function without(array) {
            return baseDifference(array, slice(arguments, 1))
        }

        function xor() {
            var index = -1, length = arguments.length;
            while (++index < length) {
                var array = arguments[index];
                if (isArray(array) || isArguments(array)) {
                    var result = result ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result))) : array
                }
            }
            return result || []
        }

        function zip() {
            var array = arguments.length > 1 ? arguments : arguments[0], index = -1, length = array ? max(pluck(array, "length")) : 0, result = Array(length < 0 ? 0 : length);
            while (++index < length) {
                result[index] = pluck(array, index)
            }
            return result
        }

        function zipObject(keys, values) {
            var index = -1, length = keys ? keys.length : 0, result = {};
            if (!values && length && !isArray(keys[0])) {
                values = []
            }
            while (++index < length) {
                var key = keys[index];
                if (values) {
                    result[key] = values[index]
                } else {
                    if (key) {
                        result[key[0]] = key[1]
                    }
                }
            }
            return result
        }

        function after(n, func) {
            if (!isFunction(func)) {
                throw new TypeError
            }
            return function () {
                if (--n < 1) {
                    return func.apply(this, arguments)
                }
            }
        }

        function bind(func, thisArg) {
            return arguments.length > 2 ? createWrapper(func, 17, slice(arguments, 2), null, thisArg) : createWrapper(func, 1, null, null, thisArg)
        }

        function bindAll(object) {
            var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object), index = -1, length = funcs.length;
            while (++index < length) {
                var key = funcs[index];
                object[key] = createWrapper(object[key], 1, null, null, object)
            }
            return object
        }

        function bindKey(object, key) {
            return arguments.length > 2 ? createWrapper(key, 19, slice(arguments, 2), null, object) : createWrapper(key, 3, null, null, object)
        }

        function compose() {
            var funcs = arguments, length = funcs.length;
            while (length--) {
                if (!isFunction(funcs[length])) {
                    throw new TypeError
                }
            }
            return function () {
                var args = arguments, length = funcs.length;
                while (length--) {
                    args = [funcs[length].apply(this, args)]
                }
                return args[0]
            }
        }

        function curry(func, arity) {
            arity = typeof arity == "number" ? arity : (+arity || func.length);
            return createWrapper(func, 4, null, null, null, arity)
        }

        function debounce(func, wait, options) {
            var args, maxTimeoutId, result, stamp, thisArg, timeoutId, trailingCall, lastCalled = 0, maxWait = false, trailing = true;
            if (!isFunction(func)) {
                throw new TypeError
            }
            wait = nativeMax(0, wait) || 0;
            if (options === true) {
                var leading = true;
                trailing = false
            } else {
                if (isObject(options)) {
                    leading = options.leading;
                    maxWait = "maxWait" in options && (nativeMax(wait, options.maxWait) || 0);
                    trailing = "trailing" in options ? options.trailing : trailing
                }
            }
            var delayed = function () {
                var remaining = wait - (now() - stamp);
                if (remaining <= 0) {
                    if (maxTimeoutId) {
                        clearTimeout(maxTimeoutId)
                    }
                    var isCalled = trailingCall;
                    maxTimeoutId = timeoutId = trailingCall = undefined;
                    if (isCalled) {
                        lastCalled = now();
                        result = func.apply(thisArg, args);
                        if (!timeoutId && !maxTimeoutId) {
                            args = thisArg = null
                        }
                    }
                } else {
                    timeoutId = setTimeout(delayed, remaining)
                }
            };
            var maxDelayed = function () {
                if (timeoutId) {
                    clearTimeout(timeoutId)
                }
                maxTimeoutId = timeoutId = trailingCall = undefined;
                if (trailing || (maxWait !== wait)) {
                    lastCalled = now();
                    result = func.apply(thisArg, args);
                    if (!timeoutId && !maxTimeoutId) {
                        args = thisArg = null
                    }
                }
            };
            return function () {
                args = arguments;
                stamp = now();
                thisArg = this;
                trailingCall = trailing && (timeoutId || !leading);
                if (maxWait === false) {
                    var leadingCall = leading && !timeoutId
                } else {
                    if (!maxTimeoutId && !leading) {
                        lastCalled = stamp
                    }
                    var remaining = maxWait - (stamp - lastCalled), isCalled = remaining <= 0;
                    if (isCalled) {
                        if (maxTimeoutId) {
                            maxTimeoutId = clearTimeout(maxTimeoutId)
                        }
                        lastCalled = stamp;
                        result = func.apply(thisArg, args)
                    } else {
                        if (!maxTimeoutId) {
                            maxTimeoutId = setTimeout(maxDelayed, remaining)
                        }
                    }
                }
                if (isCalled && timeoutId) {
                    timeoutId = clearTimeout(timeoutId)
                } else {
                    if (!timeoutId && wait !== maxWait) {
                        timeoutId = setTimeout(delayed, wait)
                    }
                }
                if (leadingCall) {
                    isCalled = true;
                    result = func.apply(thisArg, args)
                }
                if (isCalled && !timeoutId && !maxTimeoutId) {
                    args = thisArg = null
                }
                return result
            }
        }

        function defer(func) {
            if (!isFunction(func)) {
                throw new TypeError
            }
            var args = slice(arguments, 1);
            return setTimeout(function () {
                func.apply(undefined, args)
            }, 1)
        }

        function delay(func, wait) {
            if (!isFunction(func)) {
                throw new TypeError
            }
            var args = slice(arguments, 2);
            return setTimeout(function () {
                func.apply(undefined, args)
            }, wait)
        }

        function memoize(func, resolver) {
            if (!isFunction(func)) {
                throw new TypeError
            }
            var memoized = function () {
                var cache = memoized.cache, key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];
                return hasOwnProperty.call(cache, key) ? cache[key] : (cache[key] = func.apply(this, arguments))
            };
            memoized.cache = {};
            return memoized
        }

        function once(func) {
            var ran, result;
            if (!isFunction(func)) {
                throw new TypeError
            }
            return function () {
                if (ran) {
                    return result
                }
                ran = true;
                result = func.apply(this, arguments);
                func = null;
                return result
            }
        }

        function partial(func) {
            return createWrapper(func, 16, slice(arguments, 1))
        }

        function partialRight(func) {
            return createWrapper(func, 32, null, slice(arguments, 1))
        }

        function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (!isFunction(func)) {
                throw new TypeError
            }
            if (options === false) {
                leading = false
            } else {
                if (isObject(options)) {
                    leading = "leading" in options ? options.leading : leading;
                    trailing = "trailing" in options ? options.trailing : trailing
                }
            }
            debounceOptions.leading = leading;
            debounceOptions.maxWait = wait;
            debounceOptions.trailing = trailing;
            return debounce(func, wait, debounceOptions)
        }

        function wrap(value, wrapper) {
            return createWrapper(wrapper, 16, [value])
        }

        function constant(value) {
            return function () {
                return value
            }
        }

        function createCallback(func, thisArg, argCount) {
            var type = typeof func;
            if (func == null || type == "function") {
                return baseCreateCallback(func, thisArg, argCount)
            }
            if (type != "object") {
                return property(func)
            }
            var props = keys(func), key = props[0], a = func[key];
            if (props.length == 1 && a === a && !isObject(a)) {
                return function (object) {
                    var b = object[key];
                    return a === b && (a !== 0 || (1 / a == 1 / b))
                }
            }
            return function (object) {
                var length = props.length, result = false;
                while (length--) {
                    if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
                        break
                    }
                }
                return result
            }
        }

        function escape(string) {
            return string == null ? "" : String(string).replace(reUnescapedHtml, escapeHtmlChar)
        }

        function identity(value) {
            return value
        }

        function mixin(object, source, options) {
            var chain = true, methodNames = source && functions(source);
            if (!source || (!options && !methodNames.length)) {
                if (options == null) {
                    options = source
                }
                ctor = lodashWrapper;
                source = object;
                object = lodash;
                methodNames = functions(source)
            }
            if (options === false) {
                chain = false
            } else {
                if (isObject(options) && "chain" in options) {
                    chain = options.chain
                }
            }
            var ctor = object, isFunc = isFunction(ctor);
            forEach(methodNames, function (methodName) {
                var func = object[methodName] = source[methodName];
                if (isFunc) {
                    ctor.prototype[methodName] = function () {
                        var chainAll = this.__chain__, value = this.__wrapped__, args = [value];
                        push.apply(args, arguments);
                        var result = func.apply(object, args);
                        if (chain || chainAll) {
                            if (value === result && isObject(result)) {
                                return this
                            }
                            result = new ctor(result);
                            result.__chain__ = chainAll
                        }
                        return result
                    }
                }
            })
        }

        function noConflict() {
            context._ = oldDash;
            return this
        }

        function noop() {
        }

        var now = isNative(now = Date.now) && now || function () {
                return new Date().getTime()
            };
        var parseInt = nativeParseInt(whitespace + "08") == 8 ? nativeParseInt : function (value, radix) {
            return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, "") : value, radix || 0)
        };

        function property(key) {
            return function (object) {
                return object[key]
            }
        }

        function random(min, max, floating) {
            var noMin = min == null, noMax = max == null;
            if (floating == null) {
                if (typeof min == "boolean" && noMax) {
                    floating = min;
                    min = 1
                } else {
                    if (!noMax && typeof max == "boolean") {
                        floating = max;
                        noMax = true
                    }
                }
            }
            if (noMin && noMax) {
                max = 1
            }
            min = +min || 0;
            if (noMax) {
                max = min;
                min = 0
            } else {
                max = +max || 0
            }
            if (floating || min % 1 || max % 1) {
                var rand = nativeRandom();
                return nativeMin(min + (rand * (max - min + parseFloat("1e-" + ((rand + "").length - 1)))), max)
            }
            return baseRandom(min, max)
        }

        function result(object, key) {
            if (object) {
                var value = object[key];
                return isFunction(value) ? object[key]() : value
            }
        }

        function template(text, data, options) {
            var settings = lodash.templateSettings;
            text = String(text || "");
            options = defaults({}, options, settings);
            var imports = defaults({}, options.imports, settings.imports), importsKeys = keys(imports), importsValues = values(imports);
            var isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            text.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                    source += "' +\n__e(" + escapeValue + ") +\n'"
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '"
                }
                if (interpolateValue) {
                    source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'"
                }
                index = offset + match.length;
                return match
            });
            source += "';\n";
            var variable = options.variable, hasVariable = variable;
            if (!hasVariable) {
                variable = "obj";
                source = "with (" + variable + ") {\n" + source + "\n}\n"
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + variable + ") {\n" + (hasVariable ? "" : variable + " || (" + variable + " = {});\n") + "var __t, __p = '', __e = _.escape" + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var sourceURL = "\n/*\n//# sourceURL=" + (options.sourceURL || "/lodash/template/source[" + (templateCounter++) + "]") + "\n*/";
            try {
                var result = Function(importsKeys, "return " + source + sourceURL).apply(undefined, importsValues)
            } catch (e) {
                e.source = source;
                throw e
            }
            if (data) {
                return result(data)
            }
            result.source = source;
            return result
        }

        function times(n, callback, thisArg) {
            n = (n = +n) > -1 ? n : 0;
            var index = -1, result = Array(n);
            callback = baseCreateCallback(callback, thisArg, 1);
            while (++index < n) {
                result[index] = callback(index)
            }
            return result
        }

        function unescape(string) {
            return string == null ? "" : String(string).replace(reEscapedHtml, unescapeHtmlChar)
        }

        function uniqueId(prefix) {
            var id = ++idCounter;
            return String(prefix == null ? "" : prefix) + id
        }

        function chain(value) {
            value = new lodashWrapper(value);
            value.__chain__ = true;
            return value
        }

        function tap(value, interceptor) {
            interceptor(value);
            return value
        }

        function wrapperChain() {
            this.__chain__ = true;
            return this
        }

        function wrapperToString() {
            return String(this.__wrapped__)
        }

        function wrapperValueOf() {
            return this.__wrapped__
        }

        lodash.after = after;
        lodash.assign = assign;
        lodash.at = at;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.chain = chain;
        lodash.compact = compact;
        lodash.compose = compose;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.createCallback = createCallback;
        lodash.curry = curry;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.filter = filter;
        lodash.flatten = flatten;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.functions = functions;
        lodash.groupBy = groupBy;
        lodash.indexBy = indexBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.invert = invert;
        lodash.invoke = invoke;
        lodash.keys = keys;
        lodash.map = map;
        lodash.mapValues = mapValues;
        lodash.max = max;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.min = min;
        lodash.omit = omit;
        lodash.once = once;
        lodash.pairs = pairs;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.pick = pick;
        lodash.pluck = pluck;
        lodash.property = property;
        lodash.pull = pull;
        lodash.range = range;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.shuffle = shuffle;
        lodash.sortBy = sortBy;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.times = times;
        lodash.toArray = toArray;
        lodash.transform = transform;
        lodash.union = union;
        lodash.uniq = uniq;
        lodash.values = values;
        lodash.where = where;
        lodash.without = without;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.collect = map;
        lodash.drop = rest;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.extend = assign;
        lodash.methods = functions;
        lodash.object = zipObject;
        lodash.select = filter;
        lodash.tail = rest;
        lodash.unique = uniq;
        lodash.unzip = zip;
        mixin(lodash);
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.contains = contains;
        lodash.escape = escape;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.has = has;
        lodash.identity = identity;
        lodash.indexOf = indexOf;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isBoolean = isBoolean;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isNaN = isNaN;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isString = isString;
        lodash.isUndefined = isUndefined;
        lodash.lastIndexOf = lastIndexOf;
        lodash.mixin = mixin;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.result = result;
        lodash.runInContext = runInContext;
        lodash.size = size;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.template = template;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.all = every;
        lodash.any = some;
        lodash.detect = find;
        lodash.findWhere = find;
        lodash.foldl = reduce;
        lodash.foldr = reduceRight;
        lodash.include = contains;
        lodash.inject = reduce;
        mixin(function () {
            var source = {};
            forOwn(lodash, function (func, methodName) {
                if (!lodash.prototype[methodName]) {
                    source[methodName] = func
                }
            });
            return source
        }(), false);
        lodash.first = first;
        lodash.last = last;
        lodash.sample = sample;
        lodash.take = first;
        lodash.head = first;
        forOwn(lodash, function (func, methodName) {
            var callbackable = methodName !== "sample";
            if (!lodash.prototype[methodName]) {
                lodash.prototype[methodName] = function (n, guard) {
                    var chainAll = this.__chain__, result = func(this.__wrapped__, n, guard);
                    return !chainAll && (n == null || (guard && !(callbackable && typeof n == "function"))) ? result : new lodashWrapper(result, chainAll)
                }
            }
        });
        lodash.VERSION = "2.4.1";
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.toString = wrapperToString;
        lodash.prototype.value = wrapperValueOf;
        lodash.prototype.valueOf = wrapperValueOf;
        forEach(["join", "pop", "shift"], function (methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function () {
                var chainAll = this.__chain__, result = func.apply(this.__wrapped__, arguments);
                return chainAll ? new lodashWrapper(result, chainAll) : result
            }
        });
        forEach(["push", "reverse", "sort", "unshift"], function (methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function () {
                func.apply(this.__wrapped__, arguments);
                return this
            }
        });
        forEach(["concat", "slice", "splice"], function (methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function () {
                return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__)
            }
        });
        return lodash
    }

    var _ = runInContext();
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        root._ = _;
        define(function () {
            return _
        })
    } else {
        if (freeExports && freeModule) {
            if (moduleExports) {
                (freeModule.exports = _)._ = _
            } else {
                freeExports._ = _
            }
        } else {
            root._ = _
        }
    }
}.call(this));
+function ($) {
    var dismiss = '[data-dismiss="alert"]';
    var Alert = function (el) {
        $(el).on("click", dismiss, this.close)
    };
    Alert.prototype.close = function (e) {
        var $this = $(this);
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "")
        }
        var $parent = $(selector);
        if (e) {
            e.preventDefault()
        }
        if (!$parent.length) {
            $parent = $this.hasClass("alert") ? $this : $this.parent()
        }
        $parent.trigger(e = $.Event("close.bs.alert"));
        if (e.isDefaultPrevented()) {
            return
        }
        $parent.removeClass("in");
        function removeElement() {
            $parent.trigger("closed.bs.alert").remove()
        }

        $.support.transition && $parent.hasClass("fade") ? $parent.one($.support.transition.end, removeElement).emulateTransitionEnd(150) : removeElement()
    };
    var old = $.fn.alert;
    $.fn.alert = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.alert");
            if (!data) {
                $this.data("bs.alert", (data = new Alert(this)))
            }
            if (typeof option == "string") {
                data[option].call($this)
            }
        })
    };
    $.fn.alert.Constructor = Alert;
    $.fn.alert.noConflict = function () {
        $.fn.alert = old;
        return this
    };
    $(document).on("click.bs.alert.data-api", dismiss, Alert.prototype.close)
}(window.jQuery);
+function ($) {
    var Button = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Button.DEFAULTS, options)
    };
    Button.DEFAULTS = {loadingText: "loading..."};
    Button.prototype.setState = function (state) {
        var d = "disabled";
        var $el = this.$element;
        var val = $el.is("input") ? "val" : "html";
        var data = $el.data();
        state = state + "Text";
        if (!data.resetText) {
            $el.data("resetText", $el[val]())
        }
        $el[val](data[state] || this.options[state]);
        setTimeout(function () {
            state == "loadingText" ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d)
        }, 0)
    };
    Button.prototype.toggle = function () {
        var $parent = this.$element.closest('[data-toggle="buttons"]');
        if ($parent.length) {
            var $input = this.$element.find("input").prop("checked", !this.$element.hasClass("active")).trigger("change");
            if ($input.prop("type") === "radio") {
                $parent.find(".active").removeClass("active")
            }
        }
        this.$element.toggleClass("active")
    };
    var old = $.fn.button;
    $.fn.button = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.button");
            var options = typeof option == "object" && option;
            if (!data) {
                $this.data("bs.button", (data = new Button(this, options)))
            }
            if (option == "toggle") {
                data.toggle()
            } else {
                if (option) {
                    data.setState(option)
                }
            }
        })
    };
    $.fn.button.Constructor = Button;
    $.fn.button.noConflict = function () {
        $.fn.button = old;
        return this
    };
    $(document).on("click.bs.button.data-api", "[data-toggle^=button]", function (e) {
        var $btn = $(e.target);
        if (!$btn.hasClass("btn")) {
            $btn = $btn.closest(".btn")
        }
        $btn.button("toggle");
        e.preventDefault()
    })
}(window.jQuery);
+function ($) {
    var Carousel = function (element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find(".carousel-indicators");
        this.options = options;
        this.paused = this.sliding = this.interval = this.$active = this.$items = null;
        this.options.pause == "hover" && this.$element.on("mouseenter", $.proxy(this.pause, this)).on("mouseleave", $.proxy(this.cycle, this))
    };
    Carousel.DEFAULTS = {interval: 5000, pause: "hover", wrap: true};
    Carousel.prototype.cycle = function (e) {
        e || (this.paused = false);
        this.interval && clearInterval(this.interval);
        this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
        return this
    };
    Carousel.prototype.getActiveIndex = function () {
        this.$active = this.$element.find(".item.active");
        this.$items = this.$active.parent().children();
        return this.$items.index(this.$active)
    };
    Carousel.prototype.to = function (pos) {
        var that = this;
        var activeIndex = this.getActiveIndex();
        if (pos > (this.$items.length - 1) || pos < 0) {
            return
        }
        if (this.sliding) {
            return this.$element.one("slid", function () {
                that.to(pos)
            })
        }
        if (activeIndex == pos) {
            return this.pause().cycle()
        }
        return this.slide(pos > activeIndex ? "next" : "prev", $(this.$items[pos]))
    };
    Carousel.prototype.pause = function (e) {
        e || (this.paused = true);
        if (this.$element.find(".next, .prev").length && $.support.transition.end) {
            this.$element.trigger($.support.transition.end);
            this.cycle(true)
        }
        this.interval = clearInterval(this.interval);
        return this
    };
    Carousel.prototype.next = function () {
        if (this.sliding) {
            return
        }
        return this.slide("next")
    };
    Carousel.prototype.prev = function () {
        if (this.sliding) {
            return
        }
        return this.slide("prev")
    };
    Carousel.prototype.slide = function (type, next) {
        var $active = this.$element.find(".item.active");
        var $next = next || $active[type]();
        var isCycling = this.interval;
        var direction = type == "next" ? "left" : "right";
        var fallback = type == "next" ? "first" : "last";
        var that = this;
        if (!$next.length) {
            if (!this.options.wrap) {
                return
            }
            $next = this.$element.find(".item")[fallback]()
        }
        this.sliding = true;
        isCycling && this.pause();
        var e = $.Event("slide.bs.carousel", {relatedTarget: $next[0], direction: direction});
        if ($next.hasClass("active")) {
            return
        }
        if (this.$indicators.length) {
            this.$indicators.find(".active").removeClass("active");
            this.$element.one("slid", function () {
                var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
                $nextIndicator && $nextIndicator.addClass("active")
            })
        }
        if ($.support.transition && this.$element.hasClass("slide")) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) {
                return
            }
            $next.addClass(type);
            $next[0].offsetWidth;
            $active.addClass(direction);
            $next.addClass(direction);
            $active.one($.support.transition.end, function () {
                $next.removeClass([type, direction].join(" ")).addClass("active");
                $active.removeClass(["active", direction].join(" "));
                that.sliding = false;
                setTimeout(function () {
                    that.$element.trigger("slid")
                }, 0)
            }).emulateTransitionEnd(600)
        } else {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) {
                return
            }
            $active.removeClass("active");
            $next.addClass("active");
            this.sliding = false;
            this.$element.trigger("slid")
        }
        isCycling && this.cycle();
        return this
    };
    var old = $.fn.carousel;
    $.fn.carousel = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.carousel");
            var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == "object" && option);
            var action = typeof option == "string" ? option : options.slide;
            if (!data) {
                $this.data("bs.carousel", (data = new Carousel(this, options)))
            }
            if (typeof option == "number") {
                data.to(option)
            } else {
                if (action) {
                    data[action]()
                } else {
                    if (options.interval) {
                        data.pause().cycle()
                    }
                }
            }
        })
    };
    $.fn.carousel.Constructor = Carousel;
    $.fn.carousel.noConflict = function () {
        $.fn.carousel = old;
        return this
    };
    $(document).on("click.bs.carousel.data-api", "[data-slide], [data-slide-to]", function (e) {
        var $this = $(this), href;
        var $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
        var options = $.extend({}, $target.data(), $this.data());
        var slideIndex = $this.attr("data-slide-to");
        if (slideIndex) {
            options.interval = false
        }
        $target.carousel(options);
        if (slideIndex = $this.attr("data-slide-to")) {
            $target.data("bs.carousel").to(slideIndex)
        }
        e.preventDefault()
    });
    $(window).on("load", function () {
        $('[data-ride="carousel"]').each(function () {
            var $carousel = $(this);
            $carousel.carousel($carousel.data())
        })
    })
}(window.jQuery);
+function ($) {
    var backdrop = ".dropdown-backdrop";
    var toggle = "[data-toggle=dropdown]";
    var Dropdown = function (element) {
        var $el = $(element).on("click.bs.dropdown", this.toggle)
    };
    Dropdown.prototype.toggle = function (e) {
        var $this = $(this);
        if ($this.is(".disabled, :disabled")) {
            return
        }
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        clearMenus();
        if (!isActive) {
            if ("ontouchstart" in document.documentElement && !$parent.closest(".navbar-nav").length) {
                $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on("click", clearMenus)
            }
            $parent.trigger(e = $.Event("show.bs.dropdown"));
            if (e.isDefaultPrevented()) {
                return
            }
            $parent.toggleClass("open").trigger("shown.bs.dropdown");
            $this.focus()
        }
        return false
    };
    Dropdown.prototype.keydown = function (e) {
        if (!/(38|40|27)/.test(e.keyCode)) {
            return
        }
        var $this = $(this);
        e.preventDefault();
        e.stopPropagation();
        if ($this.is(".disabled, :disabled")) {
            return
        }
        var $parent = getParent($this);
        var isActive = $parent.hasClass("open");
        if (!isActive || (isActive && e.keyCode == 27)) {
            if (e.which == 27) {
                $parent.find(toggle).focus()
            }
            return $this.click()
        }
        var $items = $("[role=menu] li:not(.divider):visible a", $parent);
        if (!$items.length) {
            return
        }
        var index = $items.index($items.filter(":focus"));
        if (e.keyCode == 38 && index > 0) {
            index--
        }
        if (e.keyCode == 40 && index < $items.length - 1) {
            index++
        }
        if (!~index) {
            index = 0
        }
        $items.eq(index).focus()
    };
    function clearMenus() {
        $(backdrop).remove();
        $(toggle).each(function (e) {
            var $parent = getParent($(this));
            if (!$parent.hasClass("open")) {
                return
            }
            $parent.trigger(e = $.Event("hide.bs.dropdown"));
            if (e.isDefaultPrevented()) {
                return
            }
            $parent.removeClass("open").trigger("hidden.bs.dropdown")
        })
    }

    function getParent($this) {
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, "")
        }
        var $parent = selector && $(selector);
        return $parent && $parent.length ? $parent : $this.parent()
    }

    var old = $.fn.dropdown;
    $.fn.dropdown = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("dropdown");
            if (!data) {
                $this.data("dropdown", (data = new Dropdown(this)))
            }
            if (typeof option == "string") {
                data[option].call($this)
            }
        })
    };
    $.fn.dropdown.Constructor = Dropdown;
    $.fn.dropdown.noConflict = function () {
        $.fn.dropdown = old;
        return this
    };
    $(document).on("click.bs.dropdown.data-api", clearMenus).on("click.bs.dropdown.data-api", ".dropdown form", function (e) {
        e.stopPropagation()
    }).on("click.bs.dropdown.data-api", toggle, Dropdown.prototype.toggle).on("keydown.bs.dropdown.data-api", toggle + ", [role=menu]", Dropdown.prototype.keydown)
}(window.jQuery);
+function ($) {
    var Modal = function (element, options) {
        this.options = options;
        this.$element = $(element);
        this.$backdrop = this.isShown = null;
        if (this.options.remote) {
            this.$element.load(this.options.remote)
        }
    };
    Modal.DEFAULTS = {backdrop: true, keyboard: true, show: true};
    Modal.prototype.toggle = function (_relatedTarget) {
        return this[!this.isShown ? "show" : "hide"](_relatedTarget)
    };
    Modal.prototype.show = function (_relatedTarget) {
        var that = this;
        var e = $.Event("show.bs.modal", {relatedTarget: _relatedTarget});
        this.$element.trigger(e);
        if (this.isShown || e.isDefaultPrevented()) {
            return
        }
        this.isShown = true;
        this.escape();
        this.$element.on("click.dismiss.modal", '[data-dismiss="modal"]', $.proxy(this.hide, this));
        this.backdrop(function () {
            var transition = $.support.transition && that.$element.hasClass("fade");
            if (!that.$element.parent().length) {
                that.$element.appendTo(document.body)
            }
            that.$element.show();
            if (transition) {
                that.$element[0].offsetWidth
            }
            that.$element.addClass("in").attr("aria-hidden", false);
            that.enforceFocus();
            var e = $.Event("shown.bs.modal", {relatedTarget: _relatedTarget});
            transition ? that.$element.find(".modal-dialog").one($.support.transition.end, function () {
                that.$element.focus().trigger(e)
            }).emulateTransitionEnd(300) : that.$element.focus().trigger(e)
        })
    };
    Modal.prototype.hide = function (e) {
        if (e) {
            e.preventDefault()
        }
        e = $.Event("hide.bs.modal");
        this.$element.trigger(e);
        if (!this.isShown || e.isDefaultPrevented()) {
            return
        }
        this.isShown = false;
        this.escape();
        $(document).off("focusin.bs.modal");
        this.$element.removeClass("in").attr("aria-hidden", true).off("click.dismiss.modal");
        $.support.transition && this.$element.hasClass("fade") ? this.$element.one($.support.transition.end, $.proxy(this.hideModal, this)).emulateTransitionEnd(300) : this.hideModal()
    };
    Modal.prototype.enforceFocus = function () {
        $(document).off("focusin.bs.modal").on("focusin.bs.modal", $.proxy(function (e) {
            if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                this.$element.focus()
            }
        }, this))
    };
    Modal.prototype.escape = function () {
        if (this.isShown && this.options.keyboard) {
            this.$element.on("keyup.dismiss.bs.modal", $.proxy(function (e) {
                e.which == 27 && this.hide()
            }, this))
        } else {
            if (!this.isShown) {
                this.$element.off("keyup.dismiss.bs.modal")
            }
        }
    };
    Modal.prototype.hideModal = function () {
        var that = this;
        this.$element.hide();
        this.backdrop(function () {
            that.removeBackdrop();
            that.$element.trigger("hidden.bs.modal")
        })
    };
    Modal.prototype.removeBackdrop = function () {
        this.$backdrop && this.$backdrop.remove();
        this.$backdrop = null
    };
    Modal.prototype.backdrop = function (callback) {
        var that = this;
        var animate = this.$element.hasClass("fade") ? "fade" : "";
        if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;
            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
            this.$element.on("click.dismiss.modal", $.proxy(function (e) {
                if (e.target !== e.currentTarget) {
                    return
                }
                this.options.backdrop == "static" ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this)
            }, this));
            if (doAnimate) {
                this.$backdrop[0].offsetWidth
            }
            this.$backdrop.addClass("in");
            if (!callback) {
                return
            }
            doAnimate ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback()
        } else {
            if (!this.isShown && this.$backdrop) {
                this.$backdrop.removeClass("in");
                $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, callback).emulateTransitionEnd(150) : callback()
            } else {
                if (callback) {
                    callback()
                }
            }
        }
    };
    var old = $.fn.modal;
    $.fn.modal = function (option, _relatedTarget) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.modal");
            var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) {
                $this.data("bs.modal", (data = new Modal(this, options)))
            }
            if (typeof option == "string") {
                data[option](_relatedTarget)
            } else {
                if (options.show) {
                    data.show(_relatedTarget)
                }
            }
        })
    };
    $.fn.modal.Constructor = Modal;
    $.fn.modal.noConflict = function () {
        $.fn.modal = old;
        return this
    };
    $(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (e) {
        var $this = $(this);
        var href = $this.attr("href");
        var $target = $($this.attr("data-target") || (href && href.replace(/.*(?=#[^\s]+$)/, "")));
        var option = $target.data("modal") ? "toggle" : $.extend({remote: !/#/.test(href) && href}, $target.data(), $this.data());
        e.preventDefault();
        $target.modal(option, this).one("hide", function () {
            $this.is(":visible") && $this.focus()
        })
    });
    $(document).on("show.bs.modal", ".modal", function () {
        $(document.body).addClass("modal-open")
    }).on("hidden.bs.modal", ".modal", function () {
        $(document.body).removeClass("modal-open")
    })
}(window.jQuery);
+function ($) {
    var Tooltip = function (element, options) {
        this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
        this.init("tooltip", element, options)
    };
    Tooltip.DEFAULTS = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false
    };
    Tooltip.prototype.init = function (type, element, options) {
        this.enabled = true;
        this.type = type;
        this.$element = $(element);
        this.options = this.getOptions(options);
        var triggers = this.options.trigger.split(" ");
        for (var i = triggers.length; i--;) {
            var trigger = triggers[i];
            if (trigger == "click") {
                this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this))
            } else {
                if (trigger != "manual") {
                    var eventIn = trigger == "hover" ? "mouseenter" : "focus";
                    var eventOut = trigger == "hover" ? "mouseleave" : "blur";
                    this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                    this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this))
                }
            }
        }
        this.options.selector ? (this._options = $.extend({}, this.options, {
            trigger: "manual",
            selector: ""
        })) : this.fixTitle()
    };
    Tooltip.prototype.getDefaults = function () {
        return Tooltip.DEFAULTS
    };
    Tooltip.prototype.getOptions = function (options) {
        options = $.extend({}, this.getDefaults(), this.$element.data(), options);
        if (options.delay && typeof options.delay == "number") {
            options.delay = {show: options.delay, hide: options.delay}
        }
        return options
    };
    Tooltip.prototype.getDelegateOptions = function () {
        var options = {};
        var defaults = this.getDefaults();
        this._options && $.each(this._options, function (key, value) {
            if (defaults[key] != value) {
                options[key] = value
            }
        });
        return options
    };
    Tooltip.prototype.enter = function (obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "in";
        if (!self.options.delay || !self.options.delay.show) {
            return self.show()
        }
        self.timeout = setTimeout(function () {
            if (self.hoverState == "in") {
                self.show()
            }
        }, self.options.delay.show)
    };
    Tooltip.prototype.leave = function (obj) {
        var self = obj instanceof this.constructor ? obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type);
        clearTimeout(self.timeout);
        self.hoverState = "out";
        if (!self.options.delay || !self.options.delay.hide) {
            return self.hide()
        }
        self.timeout = setTimeout(function () {
            if (self.hoverState == "out") {
                self.hide()
            }
        }, self.options.delay.hide)
    };
    Tooltip.prototype.show = function () {
        var e = $.Event("show.bs." + this.type);
        if (this.hasContent() && this.enabled) {
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) {
                return
            }
            var $tip = this.tip();
            this.setContent();
            if (this.options.animation) {
                $tip.addClass("fade")
            }
            var placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
            var autoToken = /\s?auto?\s?/i;
            var autoPlace = autoToken.test(placement);
            if (autoPlace) {
                placement = placement.replace(autoToken, "") || "top"
            }
            $tip.detach().css({top: 0, left: 0, display: "block"}).addClass(placement);
            this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
            var pos = this.getPosition();
            var actualWidth = $tip[0].offsetWidth;
            var actualHeight = $tip[0].offsetHeight;
            if (autoPlace) {
                var $parent = this.$element.parent();
                var orgPlacement = placement;
                var docScroll = document.documentElement.scrollTop || document.body.scrollTop;
                var parentWidth = this.options.container == "body" ? window.innerWidth : $parent.outerWidth();
                var parentHeight = this.options.container == "body" ? window.innerHeight : $parent.outerHeight();
                var parentLeft = this.options.container == "body" ? 0 : $parent.offset().left;
                placement = placement == "bottom" && pos.top + pos.height + actualHeight - docScroll > parentHeight ? "top" : placement == "top" && pos.top - docScroll - actualHeight < 0 ? "bottom" : placement == "right" && pos.right + actualWidth > parentWidth ? "left" : placement == "left" && pos.left - actualWidth < parentLeft ? "right" : placement;
                $tip.removeClass(orgPlacement).addClass(placement)
            }
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
            this.applyPlacement(calculatedOffset, placement);
            this.$element.trigger("shown.bs." + this.type)
        }
    };
    Tooltip.prototype.applyPlacement = function (offset, placement) {
        var replace;
        var $tip = this.tip();
        var width = $tip[0].offsetWidth;
        var height = $tip[0].offsetHeight;
        var marginTop = parseInt($tip.css("margin-top"), 10);
        var marginLeft = parseInt($tip.css("margin-left"), 10);
        if (isNaN(marginTop)) {
            marginTop = 0
        }
        if (isNaN(marginLeft)) {
            marginLeft = 0
        }
        offset.top = offset.top + marginTop;
        offset.left = offset.left + marginLeft;
        $tip.offset(offset).addClass("in");
        var actualWidth = $tip[0].offsetWidth;
        var actualHeight = $tip[0].offsetHeight;
        if (placement == "top" && actualHeight != height) {
            replace = true;
            offset.top = offset.top + height - actualHeight
        }
        if (/bottom|top/.test(placement)) {
            var delta = 0;
            if (offset.left < 0) {
                delta = offset.left * -2;
                offset.left = 0;
                $tip.offset(offset);
                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight
            }
            this.replaceArrow(delta - width + actualWidth, actualWidth, "left")
        } else {
            this.replaceArrow(actualHeight - height, actualHeight, "top")
        }
        if (replace) {
            $tip.offset(offset)
        }
    };
    Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
        this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + "%") : "")
    };
    Tooltip.prototype.setContent = function () {
        var $tip = this.tip();
        var title = this.getTitle();
        $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
        $tip.removeClass("fade in top bottom left right")
    };
    Tooltip.prototype.hide = function () {
        var that = this;
        var $tip = this.tip();
        var e = $.Event("hide.bs." + this.type);

        function complete() {
            if (that.hoverState != "in") {
                $tip.detach()
            }
        }

        this.$element.trigger(e);
        if (e.isDefaultPrevented()) {
            return
        }
        $tip.removeClass("in");
        $.support.transition && this.$tip.hasClass("fade") ? $tip.one($.support.transition.end, complete).emulateTransitionEnd(150) : complete();
        this.$element.trigger("hidden.bs." + this.type);
        return this
    };
    Tooltip.prototype.fixTitle = function () {
        var $e = this.$element;
        if ($e.attr("title") || typeof($e.attr("data-original-title")) != "string") {
            $e.attr("data-original-title", $e.attr("title") || "").attr("title", "")
        }
    };
    Tooltip.prototype.hasContent = function () {
        return this.getTitle()
    };
    Tooltip.prototype.getPosition = function () {
        var el = this.$element[0];
        return $.extend({}, (typeof el.getBoundingClientRect == "function") ? el.getBoundingClientRect() : {
            width: el.offsetWidth,
            height: el.offsetHeight
        }, this.$element.offset())
    };
    Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
        return placement == "bottom" ? {
            top: pos.top + pos.height,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "top" ? {
            top: pos.top - actualHeight,
            left: pos.left + pos.width / 2 - actualWidth / 2
        } : placement == "left" ? {
            top: pos.top + pos.height / 2 - actualHeight / 2,
            left: pos.left - actualWidth
        } : {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}
    };
    Tooltip.prototype.getTitle = function () {
        var title;
        var $e = this.$element;
        var o = this.options;
        title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
        return title
    };
    Tooltip.prototype.tip = function () {
        return this.$tip = this.$tip || $(this.options.template)
    };
    Tooltip.prototype.arrow = function () {
        return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    };
    Tooltip.prototype.validate = function () {
        if (!this.$element[0].parentNode) {
            this.hide();
            this.$element = null;
            this.options = null
        }
    };
    Tooltip.prototype.enable = function () {
        this.enabled = true
    };
    Tooltip.prototype.disable = function () {
        this.enabled = false
    };
    Tooltip.prototype.toggleEnabled = function () {
        this.enabled = !this.enabled
    };
    Tooltip.prototype.toggle = function (e) {
        var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data("bs." + this.type) : this;
        self.tip().hasClass("in") ? self.leave(self) : self.enter(self)
    };
    Tooltip.prototype.destroy = function () {
        this.hide().$element.off("." + this.type).removeData("bs." + this.type)
    };
    var old = $.fn.tooltip;
    $.fn.tooltip = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.tooltip");
            var options = typeof option == "object" && option;
            if (!data) {
                $this.data("bs.tooltip", (data = new Tooltip(this, options)))
            }
            if (typeof option == "string") {
                data[option]()
            }
        })
    };
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.noConflict = function () {
        $.fn.tooltip = old;
        return this
    }
}(window.jQuery);
+function ($) {
    var Popover = function (element, options) {
        this.init("popover", element, options)
    };
    if (!$.fn.tooltip) {
        throw new Error("Popover requires tooltip.js")
    }
    Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
        placement: "right",
        trigger: "click",
        content: "",
        template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
    });
    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
    Popover.prototype.constructor = Popover;
    Popover.prototype.getDefaults = function () {
        return Popover.DEFAULTS
    };
    Popover.prototype.setContent = function () {
        var $tip = this.tip();
        var title = this.getTitle();
        var content = this.getContent();
        $tip.find(".popover-title")[this.options.html ? "html" : "text"](title);
        $tip.find(".popover-content")[this.options.html ? "html" : "text"](content);
        $tip.removeClass("fade top bottom left right in");
        if (!$tip.find(".popover-title").html()) {
            $tip.find(".popover-title").hide()
        }
    };
    Popover.prototype.hasContent = function () {
        return this.getTitle() || this.getContent()
    };
    Popover.prototype.getContent = function () {
        var $e = this.$element;
        var o = this.options;
        return $e.attr("data-content") || (typeof o.content == "function" ? o.content.call($e[0]) : o.content)
    };
    Popover.prototype.arrow = function () {
        return this.$arrow = this.$arrow || this.tip().find(".arrow")
    };
    Popover.prototype.tip = function () {
        if (!this.$tip) {
            this.$tip = $(this.options.template)
        }
        return this.$tip
    };
    var old = $.fn.popover;
    $.fn.popover = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.popover");
            var options = typeof option == "object" && option;
            if (!data) {
                $this.data("bs.popover", (data = new Popover(this, options)))
            }
            if (typeof option == "string") {
                data[option]()
            }
        })
    };
    $.fn.popover.Constructor = Popover;
    $.fn.popover.noConflict = function () {
        $.fn.popover = old;
        return this
    }
}(window.jQuery);
+function ($) {
    var Tab = function (element) {
        this.element = $(element)
    };
    Tab.prototype.show = function () {
        var $this = this.element;
        var $ul = $this.closest("ul:not(.dropdown-menu)");
        var selector = $this.attr("data-target");
        if (!selector) {
            selector = $this.attr("href");
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "")
        }
        if ($this.parent("li").hasClass("active")) {
            return
        }
        var previous = $ul.find(".active:last a")[0];
        var e = $.Event("show.bs.tab", {relatedTarget: previous});
        $this.trigger(e);
        if (e.isDefaultPrevented()) {
            return
        }
        var $target = $(selector);
        this.activate($this.parent("li"), $ul);
        this.activate($target, $target.parent(), function () {
            $this.trigger({type: "shown.bs.tab", relatedTarget: previous})
        })
    };
    Tab.prototype.activate = function (element, container, callback) {
        var $active = container.find("> .active");
        var transition = callback && $.support.transition && $active.hasClass("fade");

        function next() {
            $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
            element.addClass("active");
            if (transition) {
                element[0].offsetWidth;
                element.addClass("in")
            } else {
                element.removeClass("fade")
            }
            if (element.parent(".dropdown-menu")) {
                element.closest("li.dropdown").addClass("active")
            }
            callback && callback()
        }

        transition ? $active.one($.support.transition.end, next).emulateTransitionEnd(150) : next();
        $active.removeClass("in")
    };
    var old = $.fn.tab;
    $.fn.tab = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.tab");
            if (!data) {
                $this.data("bs.tab", (data = new Tab(this)))
            }
            if (typeof option == "string") {
                data[option]()
            }
        })
    };
    $.fn.tab.Constructor = Tab;
    $.fn.tab.noConflict = function () {
        $.fn.tab = old;
        return this
    };
    $(document).on("click.bs.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
        e.preventDefault();
        $(this).tab("show")
    })
}(window.jQuery);
+function ($) {
    var Affix = function (element, options) {
        this.options = $.extend({}, Affix.DEFAULTS, options);
        this.$window = $(window).on("scroll.bs.affix.data-api", $.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", $.proxy(this.checkPositionWithEventLoop, this));
        this.$element = $(element);
        this.affixed = this.unpin = null;
        this.checkPosition()
    };
    Affix.RESET = "affix affix-top affix-bottom";
    Affix.DEFAULTS = {offset: 0};
    Affix.prototype.checkPositionWithEventLoop = function () {
        setTimeout($.proxy(this.checkPosition, this), 1)
    };
    Affix.prototype.checkPosition = function () {
        if (!this.$element.is(":visible")) {
            return
        }
        var scrollHeight = $(document).height();
        var scrollTop = this.$window.scrollTop();
        var position = this.$element.offset();
        var offset = this.options.offset;
        var offsetTop = offset.top;
        var offsetBottom = offset.bottom;
        if (typeof offset != "object") {
            offsetBottom = offsetTop = offset
        }
        if (typeof offsetTop == "function") {
            offsetTop = offset.top()
        }
        if (typeof offsetBottom == "function") {
            offsetBottom = offset.bottom()
        }
        var affix = this.unpin != null && (scrollTop + this.unpin <= position.top) ? false : offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? "bottom" : offsetTop != null && (scrollTop <= offsetTop) ? "top" : false;
        if (this.affixed === affix) {
            return
        }
        if (this.unpin) {
            this.$element.css("top", "")
        }
        this.affixed = affix;
        this.unpin = affix == "bottom" ? position.top - scrollTop : null;
        this.$element.removeClass(Affix.RESET).addClass("affix" + (affix ? "-" + affix : ""));
        if (affix == "bottom") {
            this.$element.offset({top: document.body.offsetHeight - offsetBottom - this.$element.height()})
        }
    };
    var old = $.fn.affix;
    $.fn.affix = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.affix");
            var options = typeof option == "object" && option;
            if (!data) {
                $this.data("bs.affix", (data = new Affix(this, options)))
            }
            if (typeof option == "string") {
                data[option]()
            }
        })
    };
    $.fn.affix.Constructor = Affix;
    $.fn.affix.noConflict = function () {
        $.fn.affix = old;
        return this
    };
    $(window).on("load", function () {
        $('[data-spy="affix"]').each(function () {
            var $spy = $(this);
            var data = $spy.data();
            data.offset = data.offset || {};
            if (data.offsetBottom) {
                data.offset.bottom = data.offsetBottom
            }
            if (data.offsetTop) {
                data.offset.top = data.offsetTop
            }
            $spy.affix(data)
        })
    })
}(window.jQuery);
+function ($) {
    var Collapse = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, Collapse.DEFAULTS, options);
        this.transitioning = null;
        if (this.options.parent) {
            this.$parent = $(this.options.parent)
        }
        if (this.options.toggle) {
            this.toggle()
        }
    };
    Collapse.DEFAULTS = {toggle: true};
    Collapse.prototype.dimension = function () {
        var hasWidth = this.$element.hasClass("width");
        return hasWidth ? "width" : "height"
    };
    Collapse.prototype.show = function () {
        if (this.transitioning || this.$element.hasClass("in")) {
            return
        }
        var startEvent = $.Event("show.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) {
            return
        }
        var actives = this.$parent && this.$parent.find("> .panel > .in");
        if (actives && actives.length) {
            var hasData = actives.data("bs.collapse");
            if (hasData && hasData.transitioning) {
                return
            }
            actives.collapse("hide");
            hasData || actives.data("bs.collapse", null)
        }
        var dimension = this.dimension();
        this.$element.removeClass("collapse").addClass("collapsing")[dimension](0);
        this.transitioning = 1;
        var complete = function () {
            this.$element.removeClass("collapsing").addClass("in")[dimension]("auto");
            this.transitioning = 0;
            this.$element.trigger("shown.bs.collapse")
        };
        if (!$.support.transition) {
            return complete.call(this)
        }
        var scrollSize = $.camelCase(["scroll", dimension].join("-"));
        this.$element.one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize])
    };
    Collapse.prototype.hide = function () {
        if (this.transitioning || !this.$element.hasClass("in")) {
            return
        }
        var startEvent = $.Event("hide.bs.collapse");
        this.$element.trigger(startEvent);
        if (startEvent.isDefaultPrevented()) {
            return
        }
        var dimension = this.dimension();
        this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
        this.$element.addClass("collapsing").removeClass("collapse").removeClass("in");
        this.transitioning = 1;
        var complete = function () {
            this.transitioning = 0;
            this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")
        };
        if (!$.support.transition) {
            return complete.call(this)
        }
        this.$element[dimension](0).one($.support.transition.end, $.proxy(complete, this)).emulateTransitionEnd(350)
    };
    Collapse.prototype.toggle = function () {
        this[this.$element.hasClass("in") ? "hide" : "show"]()
    };
    var old = $.fn.collapse;
    $.fn.collapse = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.collapse");
            var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == "object" && option);
            if (!data) {
                $this.data("bs.collapse", (data = new Collapse(this, options)))
            }
            if (typeof option == "string") {
                data[option]()
            }
        })
    };
    $.fn.collapse.Constructor = Collapse;
    $.fn.collapse.noConflict = function () {
        $.fn.collapse = old;
        return this
    };
    $(document).on("click.bs.collapse.data-api", "[data-toggle=collapse]", function (e) {
        var $this = $(this), href;
        var target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "");
        var $target = $(target);
        var data = $target.data("bs.collapse");
        var option = data ? "toggle" : $this.data();
        var parent = $this.attr("data-parent");
        var $parent = parent && $(parent);
        if (!data || !data.transitioning) {
            if ($parent) {
                $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass("collapsed")
            }
            $this[$target.hasClass("in") ? "addClass" : "removeClass"]("collapsed")
        }
        $target.collapse(option)
    })
}(window.jQuery);
+function ($) {
    function ScrollSpy(element, options) {
        var href;
        var process = $.proxy(this.process, this);
        this.$element = $(element).is("body") ? $(window) : $(element);
        this.$body = $("body");
        this.$scrollElement = this.$element.on("scroll.bs.scroll-spy.data-api", process);
        this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
        this.selector = (this.options.target || ((href = $(element).attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "")) || "") + " .nav li > a";
        this.offsets = $([]);
        this.targets = $([]);
        this.activeTarget = null;
        this.refresh();
        this.process()
    }

    ScrollSpy.DEFAULTS = {offset: 10};
    ScrollSpy.prototype.refresh = function () {
        var offsetMethod = this.$element[0] == window ? "offset" : "position";
        this.offsets = $([]);
        this.targets = $([]);
        var self = this;
        var $targets = this.$body.find(this.selector).map(function () {
            var $el = $(this);
            var href = $el.data("target") || $el.attr("href");
            var $href = /^#\w/.test(href) && $(href);
            return ($href && $href.length && [[$href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href]]) || null
        }).sort(function (a, b) {
            return a[0] - b[0]
        }).each(function () {
            self.offsets.push(this[0]);
            self.targets.push(this[1])
        })
    };
    ScrollSpy.prototype.process = function () {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
        var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight;
        var maxScroll = scrollHeight - this.$scrollElement.height();
        var offsets = this.offsets;
        var targets = this.targets;
        var activeTarget = this.activeTarget;
        var i;
        if (scrollTop >= maxScroll) {
            return activeTarget != (i = targets.last()[0]) && this.activate(i)
        }
        for (i = offsets.length; i--;) {
            activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i])
        }
    };
    ScrollSpy.prototype.activate = function (target) {
        this.activeTarget = target;
        $(this.selector).parents(".active").removeClass("active");
        var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
        var active = $(selector).parents("li").addClass("active");
        if (active.parent(".dropdown-menu").length) {
            active = active.closest("li.dropdown").addClass("active")
        }
        active.trigger("activate")
    };
    var old = $.fn.scrollspy;
    $.fn.scrollspy = function (option) {
        return this.each(function () {
            var $this = $(this);
            var data = $this.data("bs.scrollspy");
            var options = typeof option == "object" && option;
            if (!data) {
                $this.data("bs.scrollspy", (data = new ScrollSpy(this, options)))
            }
            if (typeof option == "string") {
                data[option]()
            }
        })
    };
    $.fn.scrollspy.Constructor = ScrollSpy;
    $.fn.scrollspy.noConflict = function () {
        $.fn.scrollspy = old;
        return this
    };
    $(window).on("load", function () {
        $('[data-spy="scroll"]').each(function () {
            var $spy = $(this);
            $spy.scrollspy($spy.data())
        })
    })
}(window.jQuery);
+function ($) {
    function transitionEnd() {
        var el = document.createElement("bootstrap");
        var transEndEventNames = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "oTransitionEnd otransitionend",
            transition: "transitionend"
        };
        for (var name in transEndEventNames) {
            if (el.style[name] !== undefined) {
                return {end: transEndEventNames[name]}
            }
        }
    }

    $.fn.emulateTransitionEnd = function (duration) {
        var called = false, $el = this;
        $(this).one($.support.transition.end, function () {
            called = true
        });
        var callback = function () {
            if (!called) {
                $($el).trigger($.support.transition.end)
            }
        };
        setTimeout(callback, duration);
        return this
    };
    $(function () {
        $.support.transition = transitionEnd()
    })
}(window.jQuery);
/*!
 * bootstrap-select v1.5.4
 * http://silviomoreto.github.io/bootstrap-select/
 *
 * Copyright 2013 bootstrap-select
 * Licensed under the MIT license
 */
;
!function ($) {
    $.expr[":"].icontains = function (obj, index, meta) {
        return $(obj).text().toUpperCase().indexOf(meta[3].toUpperCase()) >= 0
    };
    var Selectpicker = function (element, options, e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault()
        }
        this.$element = $(element);
        this.$newElement = null;
        this.$button = null;
        this.$menu = null;
        this.$lis = null;
        this.options = $.extend({}, $.fn.selectpicker.defaults, this.$element.data(), typeof options == "object" && options);
        if (this.options.title === null) {
            this.options.title = this.$element.attr("title")
        }
        this.val = Selectpicker.prototype.val;
        this.render = Selectpicker.prototype.render;
        this.refresh = Selectpicker.prototype.refresh;
        this.setStyle = Selectpicker.prototype.setStyle;
        this.selectAll = Selectpicker.prototype.selectAll;
        this.deselectAll = Selectpicker.prototype.deselectAll;
        this.init()
    };
    Selectpicker.prototype = {
        constructor: Selectpicker, init: function () {
            var that = this, id = this.$element.attr("id");
            this.$element.hide();
            this.multiple = this.$element.prop("multiple");
            this.autofocus = this.$element.prop("autofocus");
            this.$newElement = this.createView();
            this.$element.after(this.$newElement);
            this.$menu = this.$newElement.find("> .dropdown-menu");
            this.$button = this.$newElement.find("> button");
            this.$searchbox = this.$newElement.find("input");
            if (id !== undefined) {
                this.$button.attr("data-id", id);
                $('label[for="' + id + '"]').click(function (e) {
                    e.preventDefault();
                    that.$button.focus()
                })
            }
            this.checkDisabled();
            this.clickListener();
            if (this.options.liveSearch) {
                this.liveSearchListener()
            }
            this.render();
            this.liHeight();
            this.setStyle();
            this.setWidth();
            if (this.options.container) {
                this.selectPosition()
            }
            this.$menu.data("this", this);
            this.$newElement.data("this", this)
        }, createDropdown: function () {
            var multiple = this.multiple ? " show-tick" : "";
            var inputGroup = this.$element.parent().hasClass("input-group") ? " input-group-btn" : "";
            var autofocus = this.autofocus ? " autofocus" : "";
            var header = this.options.header ? '<div class="popover-title"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + "</div>" : "";
            var searchbox = this.options.liveSearch ? '<div class="bootstrap-select-searchbox"><input type="text" class="input-block-level form-control" autocomplete="off" /></div>' : "";
            var actionsbox = this.options.actionsBox ? '<div class="bs-actionsbox"><div class="btn-group btn-block"><button class="actions-btn bs-select-all btn btn-sm btn-default">Select All</button><button class="actions-btn bs-deselect-all btn btn-sm btn-default">Deselect All</button></div></div>' : "";
            var drop = '<div class="btn-group bootstrap-select' + multiple + inputGroup + '"><button type="button" class="btn dropdown-toggle selectpicker" data-toggle="dropdown"' + autofocus + '><span class="filter-option pull-left"></span>&nbsp;<span class="caret"></span></button><div class="dropdown-menu open">' + header + searchbox + actionsbox + '<ul class="dropdown-menu inner selectpicker" role="menu"></ul></div></div>';
            return $(drop)
        }, createView: function () {
            var $drop = this.createDropdown();
            var $li = this.createLi();
            $drop.find("ul").append($li);
            return $drop
        }, reloadLi: function () {
            this.destroyLi();
            var $li = this.createLi();
            this.$menu.find("ul").append($li)
        }, destroyLi: function () {
            this.$menu.find("li").remove()
        }, createLi: function () {
            var that = this, _liA = [], _liHtml = "";
            this.$element.find("option").each(function () {
                var $this = $(this);
                var optionClass = $this.attr("class") || "";
                var inline = $this.attr("style") || "";
                var text = $this.data("content") ? $this.data("content") : $this.html();
                var subtext = $this.data("subtext") !== undefined ? '<small class="muted text-muted">' + $this.data("subtext") + "</small>" : "";
                var icon = $this.data("icon") !== undefined ? '<i class="' + that.options.iconBase + " " + $this.data("icon") + '"></i> ' : "";
                if (icon !== "" && ($this.is(":disabled") || $this.parent().is(":disabled"))) {
                    icon = "<span>" + icon + "</span>"
                }
                if (!$this.data("content")) {
                    text = icon + '<span class="text">' + text + subtext + "</span>"
                }
                if (that.options.hideDisabled && ($this.is(":disabled") || $this.parent().is(":disabled"))) {
                    _liA.push('<a style="min-height: 0; padding: 0"></a>')
                } else {
                    if ($this.parent().is("optgroup") && $this.data("divider") !== true) {
                        if ($this.index() === 0) {
                            var label = $this.parent().attr("label");
                            var labelSubtext = $this.parent().data("subtext") !== undefined ? '<small class="muted text-muted">' + $this.parent().data("subtext") + "</small>" : "";
                            var labelIcon = $this.parent().data("icon") ? '<i class="' + $this.parent().data("icon") + '"></i> ' : "";
                            label = labelIcon + '<span class="text">' + label + labelSubtext + "</span>";
                            if ($this[0].index !== 0) {
                                _liA.push('<div class="div-contain"><div class="divider"></div></div><dt>' + label + "</dt>" + that.createA(text, "opt " + optionClass, inline))
                            } else {
                                _liA.push("<dt>" + label + "</dt>" + that.createA(text, "opt " + optionClass, inline))
                            }
                        } else {
                            _liA.push(that.createA(text, "opt " + optionClass, inline))
                        }
                    } else {
                        if ($this.data("divider") === true) {
                            _liA.push('<div class="div-contain"><div class="divider"></div></div>')
                        } else {
                            if ($(this).data("hidden") === true) {
                                _liA.push("<a></a>")
                            } else {
                                _liA.push(that.createA(text, optionClass, inline))
                            }
                        }
                    }
                }
            });
            $.each(_liA, function (i, item) {
                var hide = item === "<a></a>" ? 'class="hide is-hidden"' : "";
                _liHtml += '<li rel="' + i + '"' + hide + ">" + item + "</li>"
            });
            if (!this.multiple && this.$element.find("option:selected").length === 0 && !this.options.title) {
                this.$element.find("option").eq(0).prop("selected", true).attr("selected", "selected")
            }
            return $(_liHtml)
        }, createA: function (text, classes, inline) {
            return '<a tabindex="0" class="' + classes + '" style="' + inline + '">' + text + '<i class="' + this.options.iconBase + " " + this.options.tickIcon + ' icon-ok check-mark"></i></a>'
        }, render: function (updateLi) {
            var that = this;
            if (updateLi !== false) {
                this.$element.find("option").each(function (index) {
                    that.setDisabled(index, $(this).is(":disabled") || $(this).parent().is(":disabled"));
                    that.setSelected(index, $(this).is(":selected"))
                })
            }
            this.tabIndex();
            var selectedItems = this.$element.find("option:selected").map(function () {
                var $this = $(this);
                var icon = $this.data("icon") && that.options.showIcon ? '<i class="' + that.options.iconBase + " " + $this.data("icon") + '"></i> ' : "";
                var subtext;
                if (that.options.showSubtext && $this.attr("data-subtext") && !that.multiple) {
                    subtext = ' <small class="muted text-muted">' + $this.data("subtext") + "</small>"
                } else {
                    subtext = ""
                }
                if ($this.data("content") && that.options.showContent) {
                    return $this.data("content")
                } else {
                    if ($this.attr("title") !== undefined) {
                        return $this.attr("title")
                    } else {
                        return icon + $this.html() + subtext
                    }
                }
            }).toArray();
            var title = !this.multiple ? selectedItems[0] : selectedItems.join(this.options.multipleSeparator);
            if (this.multiple && this.options.selectedTextFormat.indexOf("count") > -1) {
                var max = this.options.selectedTextFormat.split(">");
                var notDisabled = this.options.hideDisabled ? ":not([disabled])" : "";
                if ((max.length > 1 && selectedItems.length > max[1]) || (max.length == 1 && selectedItems.length >= 2)) {
                    title = this.options.countSelectedText.replace("{0}", selectedItems.length).replace("{1}", this.$element.find('option:not([data-divider="true"]):not([data-hidden="true"])' + notDisabled).length)
                }
            }
            this.options.title = this.$element.attr("title");
            if (!title) {
                title = this.options.title !== undefined ? this.options.title : this.options.noneSelectedText
            }
            this.$button.attr("title", $.trim(title));
            this.$newElement.find(".filter-option").html(title)
        }, setStyle: function (style, status) {
            if (this.$element.attr("class")) {
                this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|validate\[.*\]/gi, ""))
            }
            var buttonClass = style ? style : this.options.style;
            if (status == "add") {
                this.$button.addClass(buttonClass)
            } else {
                if (status == "remove") {
                    this.$button.removeClass(buttonClass)
                } else {
                    this.$button.removeClass(this.options.style);
                    this.$button.addClass(buttonClass)
                }
            }
        }, liHeight: function () {
            if (this.options.size === false) {
                return
            }
            var $selectClone = this.$menu.parent().clone().find("> .dropdown-toggle").prop("autofocus", false).end().appendTo("body"), $menuClone = $selectClone.addClass("open").find("> .dropdown-menu"), liHeight = $menuClone.find("li > a").outerHeight(), headerHeight = this.options.header ? $menuClone.find(".popover-title").outerHeight() : 0, searchHeight = this.options.liveSearch ? $menuClone.find(".bootstrap-select-searchbox").outerHeight() : 0, actionsHeight = this.options.actionsBox ? $menuClone.find(".bs-actionsbox").outerHeight() : 0;
            $selectClone.remove();
            this.$newElement.data("liHeight", liHeight).data("headerHeight", headerHeight).data("searchHeight", searchHeight).data("actionsHeight", actionsHeight)
        }, setSize: function () {
            var that = this, menu = this.$menu, menuInner = menu.find(".inner"), selectHeight = this.$newElement.outerHeight(), liHeight = this.$newElement.data("liHeight"), headerHeight = this.$newElement.data("headerHeight"), searchHeight = this.$newElement.data("searchHeight"), actionsHeight = this.$newElement.data("actionsHeight"), divHeight = menu.find("li .divider").outerHeight(true), menuPadding = parseInt(menu.css("padding-top")) + parseInt(menu.css("padding-bottom")) + parseInt(menu.css("border-top-width")) + parseInt(menu.css("border-bottom-width")), notDisabled = this.options.hideDisabled ? ":not(.disabled)" : "", $window = $(window), menuExtras = menuPadding + parseInt(menu.css("margin-top")) + parseInt(menu.css("margin-bottom")) + 2, menuHeight, selectOffsetTop, selectOffsetBot, posVert = function () {
                selectOffsetTop = that.$newElement.offset().top - $window.scrollTop();
                selectOffsetBot = $window.height() - selectOffsetTop - selectHeight
            };
            posVert();
            if (this.options.header) {
                menu.css("padding-top", 0)
            }
            if (this.options.size == "auto") {
                var getSize = function () {
                    var minHeight, lisVis = that.$lis.not(".hide");
                    posVert();
                    menuHeight = selectOffsetBot - menuExtras;
                    if (that.options.dropupAuto) {
                        that.$newElement.toggleClass("dropup", (selectOffsetTop > selectOffsetBot) && ((menuHeight - menuExtras) < menu.height()))
                    }
                    if (that.$newElement.hasClass("dropup")) {
                        menuHeight = selectOffsetTop - menuExtras
                    }
                    if ((lisVis.length + lisVis.find("dt").length) > 3) {
                        minHeight = liHeight * 3 + menuExtras - 2
                    } else {
                        minHeight = 0
                    }
                    menu.css({
                        "max-height": menuHeight + "px",
                        overflow: "hidden",
                        "min-height": minHeight + headerHeight + searchHeight + actionsHeight + "px"
                    });
                    menuInner.css({
                        "max-height": menuHeight - headerHeight - searchHeight - actionsHeight - menuPadding + "px",
                        "overflow-y": "auto",
                        "min-height": Math.max(minHeight - menuPadding, 0) + "px"
                    })
                };
                getSize();
                this.$searchbox.off("input.getSize propertychange.getSize").on("input.getSize propertychange.getSize", getSize);
                $(window).off("resize.getSize").on("resize.getSize", getSize);
                $(window).off("scroll.getSize").on("scroll.getSize", getSize)
            } else {
                if (this.options.size && this.options.size != "auto" && menu.find("li" + notDisabled).length > this.options.size) {
                    var optIndex = menu.find("li" + notDisabled + " > *").filter(":not(.div-contain)").slice(0, this.options.size).last().parent().index();
                    var divLength = menu.find("li").slice(0, optIndex + 1).find(".div-contain").length;
                    menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding;
                    if (that.options.dropupAuto) {
                        this.$newElement.toggleClass("dropup", (selectOffsetTop > selectOffsetBot) && (menuHeight < menu.height()))
                    }
                    menu.css({
                        "max-height": menuHeight + headerHeight + searchHeight + actionsHeight + "px",
                        overflow: "hidden"
                    });
                    menuInner.css({"max-height": menuHeight - menuPadding + "px", "overflow-y": "auto"})
                }
            }
        }, setWidth: function () {
            if (this.options.width == "auto") {
                this.$menu.css("min-width", "0");
                var selectClone = this.$newElement.clone().appendTo("body");
                var ulWidth = selectClone.find("> .dropdown-menu").css("width");
                var btnWidth = selectClone.css("width", "auto").find("> button").css("width");
                selectClone.remove();
                this.$newElement.css("width", Math.max(parseInt(ulWidth), parseInt(btnWidth)) + "px")
            } else {
                if (this.options.width == "fit") {
                    this.$menu.css("min-width", "");
                    this.$newElement.css("width", "").addClass("fit-width")
                } else {
                    if (this.options.width) {
                        this.$menu.css("min-width", "");
                        this.$newElement.css("width", this.options.width)
                    } else {
                        this.$menu.css("min-width", "");
                        this.$newElement.css("width", "")
                    }
                }
            }
            if (this.$newElement.hasClass("fit-width") && this.options.width !== "fit") {
                this.$newElement.removeClass("fit-width")
            }
        }, selectPosition: function () {
            var that = this, drop = "<div />", $drop = $(drop), pos, actualHeight, getPlacement = function ($element) {
                $drop.addClass($element.attr("class").replace(/form-control/gi, "")).toggleClass("dropup", $element.hasClass("dropup"));
                pos = $element.offset();
                actualHeight = $element.hasClass("dropup") ? 0 : $element[0].offsetHeight;
                $drop.css({
                    top: pos.top + actualHeight,
                    left: pos.left,
                    width: $element[0].offsetWidth,
                    position: "absolute"
                })
            };
            this.$newElement.on("click", function () {
                if (that.isDisabled()) {
                    return
                }
                getPlacement($(this));
                $drop.appendTo(that.options.container);
                $drop.toggleClass("open", !$(this).hasClass("open"));
                $drop.append(that.$menu)
            });
            $(window).resize(function () {
                getPlacement(that.$newElement)
            });
            $(window).on("scroll", function () {
                getPlacement(that.$newElement)
            });
            $("html").on("click", function (e) {
                if ($(e.target).closest(that.$newElement).length < 1) {
                    $drop.removeClass("open")
                }
            })
        }, mobile: function () {
            this.$element.addClass("mobile-device").appendTo(this.$newElement);
            if (this.options.container) {
                this.$menu.hide()
            }
        }, refresh: function () {
            this.$lis = null;
            this.reloadLi();
            this.render();
            this.setWidth();
            this.setStyle();
            this.checkDisabled();
            this.liHeight()
        }, update: function () {
            this.reloadLi();
            this.setWidth();
            this.setStyle();
            this.checkDisabled();
            this.liHeight()
        }, setSelected: function (index, selected) {
            if (this.$lis == null) {
                this.$lis = this.$menu.find("li")
            }
            $(this.$lis[index]).toggleClass("selected", selected)
        }, setDisabled: function (index, disabled) {
            if (this.$lis == null) {
                this.$lis = this.$menu.find("li")
            }
            if (disabled) {
                $(this.$lis[index]).addClass("disabled").find("a").attr("href", "#").attr("tabindex", -1)
            } else {
                $(this.$lis[index]).removeClass("disabled").find("a").removeAttr("href").attr("tabindex", 0)
            }
        }, isDisabled: function () {
            return this.$element.is(":disabled")
        }, checkDisabled: function () {
            var that = this;
            if (this.isDisabled()) {
                this.$button.addClass("disabled").attr("tabindex", -1)
            } else {
                if (this.$button.hasClass("disabled")) {
                    this.$button.removeClass("disabled")
                }
                if (this.$button.attr("tabindex") == -1) {
                    if (!this.$element.data("tabindex")) {
                        this.$button.removeAttr("tabindex")
                    }
                }
            }
            this.$button.click(function () {
                return !that.isDisabled()
            })
        }, tabIndex: function () {
            if (this.$element.is("[tabindex]")) {
                this.$element.data("tabindex", this.$element.attr("tabindex"));
                this.$button.attr("tabindex", this.$element.data("tabindex"))
            }
        }, clickListener: function () {
            var that = this;
            $("body").on("touchstart.dropdown", ".dropdown-menu", function (e) {
                e.stopPropagation()
            });
            this.$newElement.on("click", function () {
                that.setSize();
                if (!that.options.liveSearch && !that.multiple) {
                    setTimeout(function () {
                        that.$menu.find(".selected a").focus()
                    }, 10)
                }
            });
            this.$menu.on("click", "li a", function (e) {
                var clickedIndex = $(this).parent().index(), prevValue = that.$element.val(), prevIndex = that.$element.prop("selectedIndex");
                if (that.multiple) {
                    e.stopPropagation()
                }
                e.preventDefault();
                if (!that.isDisabled() && !$(this).parent().hasClass("disabled")) {
                    var $options = that.$element.find("option"), $option = $options.eq(clickedIndex), state = $option.prop("selected"), $optgroup = $option.parent("optgroup"), maxOptions = that.options.maxOptions, maxOptionsGrp = $optgroup.data("maxOptions") || false;
                    if (!that.multiple) {
                        $options.prop("selected", false);
                        $option.prop("selected", true);
                        that.$menu.find(".selected").removeClass("selected");
                        that.setSelected(clickedIndex, true)
                    } else {
                        $option.prop("selected", !state);
                        that.setSelected(clickedIndex, !state);
                        if ((maxOptions !== false) || (maxOptionsGrp !== false)) {
                            var maxReached = maxOptions < $options.filter(":selected").length, maxReachedGrp = maxOptionsGrp < $optgroup.find("option:selected").length, maxOptionsArr = that.options.maxOptionsText, maxTxt = maxOptionsArr[0].replace("{n}", maxOptions), maxTxtGrp = maxOptionsArr[1].replace("{n}", maxOptionsGrp), $notify = $('<div class="notify"></div>');
                            if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {
                                if (maxOptionsArr[2]) {
                                    maxTxt = maxTxt.replace("{var}", maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);
                                    maxTxtGrp = maxTxtGrp.replace("{var}", maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1])
                                }
                                $option.prop("selected", false);
                                that.$menu.append($notify);
                                if (maxOptions && maxReached) {
                                    $notify.append($("<div>" + maxTxt + "</div>"));
                                    that.$element.trigger("maxReached.bs.select")
                                }
                                if (maxOptionsGrp && maxReachedGrp) {
                                    $notify.append($("<div>" + maxTxtGrp + "</div>"));
                                    that.$element.trigger("maxReachedGrp.bs.select")
                                }
                                setTimeout(function () {
                                    that.setSelected(clickedIndex, false)
                                }, 10);
                                $notify.delay(750).fadeOut(300, function () {
                                    $(this).remove()
                                })
                            }
                        }
                    }
                    if (!that.multiple) {
                        that.$button.focus()
                    } else {
                        if (that.options.liveSearch) {
                            that.$searchbox.focus()
                        }
                    }
                    if ((prevValue != that.$element.val() && that.multiple) || (prevIndex != that.$element.prop("selectedIndex") && !that.multiple)) {
                        that.$element.change()
                    }
                }
            });
            this.$menu.on("click", "li.disabled a, li dt, li .div-contain, .popover-title, .popover-title :not(.close)", function (e) {
                if (e.target == this) {
                    e.preventDefault();
                    e.stopPropagation();
                    if (!that.options.liveSearch) {
                        that.$button.focus()
                    } else {
                        that.$searchbox.focus()
                    }
                }
            });
            this.$menu.on("click", ".popover-title .close", function () {
                that.$button.focus()
            });
            this.$searchbox.on("click", function (e) {
                e.stopPropagation()
            });
            this.$menu.on("click", ".actions-btn", function (e) {
                if (that.options.liveSearch) {
                    that.$searchbox.focus()
                } else {
                    that.$button.focus()
                }
                e.preventDefault();
                e.stopPropagation();
                if ($(this).is(".bs-select-all")) {
                    that.selectAll()
                } else {
                    that.deselectAll()
                }
                that.$element.change()
            });
            this.$element.change(function () {
                that.render(false)
            })
        }, liveSearchListener: function () {
            var that = this, no_results = $('<li class="no-results"></li>');
            this.$newElement.on("click.dropdown.data-api", function () {
                that.$menu.find(".active").removeClass("active");
                if (!!that.$searchbox.val()) {
                    that.$searchbox.val("");
                    that.$lis.not(".is-hidden").removeClass("hide");
                    if (!!no_results.parent().length) {
                        no_results.remove()
                    }
                }
                if (!that.multiple) {
                    that.$menu.find(".selected").addClass("active")
                }
                setTimeout(function () {
                    that.$searchbox.focus()
                }, 10)
            });
            this.$searchbox.on("input propertychange", function () {
                if (that.$searchbox.val()) {
                    that.$lis.not(".is-hidden").removeClass("hide").find("a").not(":icontains(" + that.$searchbox.val() + ")").parent().addClass("hide");
                    if (!that.$menu.find("li").filter(":visible:not(.no-results)").length) {
                        if (!!no_results.parent().length) {
                            no_results.remove()
                        }
                        no_results.html(that.options.noneResultsText + ' "' + that.$searchbox.val() + '"').show();
                        that.$menu.find("li").last().after(no_results)
                    } else {
                        if (!!no_results.parent().length) {
                            no_results.remove()
                        }
                    }
                } else {
                    that.$lis.not(".is-hidden").removeClass("hide");
                    if (!!no_results.parent().length) {
                        no_results.remove()
                    }
                }
                that.$menu.find("li.active").removeClass("active");
                that.$menu.find("li").filter(":visible:not(.divider)").eq(0).addClass("active");
                $(this).focus()
            });
            this.$menu.on("mouseenter", "a", function (e) {
                that.$menu.find(".active").removeClass("active");
                $(e.currentTarget).parent().not(".disabled").addClass("active")
            });
            this.$menu.on("mouseleave", "a", function () {
                that.$menu.find(".active").removeClass("active")
            })
        }, val: function (value) {
            if (value !== undefined) {
                this.$element.val(value);
                this.$element.change();
                return this.$element
            } else {
                return this.$element.val()
            }
        }, selectAll: function () {
            if (this.$lis == null) {
                this.$lis = this.$menu.find("li")
            }
            this.$element.find("option:enabled").prop("selected", true);
            $(this.$lis).filter(":not(.disabled)").addClass("selected");
            this.render(false)
        }, deselectAll: function () {
            if (this.$lis == null) {
                this.$lis = this.$menu.find("li")
            }
            this.$element.find("option:enabled").prop("selected", false);
            $(this.$lis).filter(":not(.disabled)").removeClass("selected");
            this.render(false)
        }, keydown: function (e) {
            var $this, $items, $parent, index, next, first, last, prev, nextPrev, that, prevIndex, isActive, keyCodeMap = {
                32: " ",
                48: "0",
                49: "1",
                50: "2",
                51: "3",
                52: "4",
                53: "5",
                54: "6",
                55: "7",
                56: "8",
                57: "9",
                59: ";",
                65: "a",
                66: "b",
                67: "c",
                68: "d",
                69: "e",
                70: "f",
                71: "g",
                72: "h",
                73: "i",
                74: "j",
                75: "k",
                76: "l",
                77: "m",
                78: "n",
                79: "o",
                80: "p",
                81: "q",
                82: "r",
                83: "s",
                84: "t",
                85: "u",
                86: "v",
                87: "w",
                88: "x",
                89: "y",
                90: "z",
                96: "0",
                97: "1",
                98: "2",
                99: "3",
                100: "4",
                101: "5",
                102: "6",
                103: "7",
                104: "8",
                105: "9"
            };
            $this = $(this);
            $parent = $this.parent();
            if ($this.is("input")) {
                $parent = $this.parent().parent()
            }
            that = $parent.data("this");
            if (that.options.liveSearch) {
                $parent = $this.parent().parent()
            }
            if (that.options.container) {
                $parent = that.$menu
            }
            $items = $("[role=menu] li:not(.divider) a", $parent);
            isActive = that.$menu.parent().hasClass("open");
            if (!isActive && /([0-9]|[A-z])/.test(String.fromCharCode(e.keyCode))) {
                if (!that.options.container) {
                    that.setSize();
                    that.$menu.parent().addClass("open");
                    isActive = that.$menu.parent().hasClass("open")
                } else {
                    that.$newElement.trigger("click")
                }
                that.$searchbox.focus()
            }
            if (that.options.liveSearch) {
                if (/(^9$|27)/.test(e.keyCode) && isActive && that.$menu.find(".active").length === 0) {
                    e.preventDefault();
                    that.$menu.parent().removeClass("open");
                    that.$button.focus()
                }
                $items = $("[role=menu] li:not(.divider):visible", $parent);
                if (!$this.val() && !/(38|40)/.test(e.keyCode)) {
                    if ($items.filter(".active").length === 0) {
                        $items = that.$newElement.find("li").filter(":icontains(" + keyCodeMap[e.keyCode] + ")")
                    }
                }
            }
            if (!$items.length) {
                return
            }
            if (/(38|40)/.test(e.keyCode)) {
                index = $items.index($items.filter(":focus"));
                first = $items.parent(":not(.disabled):visible").first().index();
                last = $items.parent(":not(.disabled):visible").last().index();
                next = $items.eq(index).parent().nextAll(":not(.disabled):visible").eq(0).index();
                prev = $items.eq(index).parent().prevAll(":not(.disabled):visible").eq(0).index();
                nextPrev = $items.eq(next).parent().prevAll(":not(.disabled):visible").eq(0).index();
                if (that.options.liveSearch) {
                    $items.each(function (i) {
                        if ($(this).is(":not(.disabled)")) {
                            $(this).data("index", i)
                        }
                    });
                    index = $items.index($items.filter(".active"));
                    first = $items.filter(":not(.disabled):visible").first().data("index");
                    last = $items.filter(":not(.disabled):visible").last().data("index");
                    next = $items.eq(index).nextAll(":not(.disabled):visible").eq(0).data("index");
                    prev = $items.eq(index).prevAll(":not(.disabled):visible").eq(0).data("index");
                    nextPrev = $items.eq(next).prevAll(":not(.disabled):visible").eq(0).data("index")
                }
                prevIndex = $this.data("prevIndex");
                if (e.keyCode == 38) {
                    if (that.options.liveSearch) {
                        index -= 1
                    }
                    if (index != nextPrev && index > prev) {
                        index = prev
                    }
                    if (index < first) {
                        index = first
                    }
                    if (index == prevIndex) {
                        index = last
                    }
                }
                if (e.keyCode == 40) {
                    if (that.options.liveSearch) {
                        index += 1
                    }
                    if (index == -1) {
                        index = 0
                    }
                    if (index != nextPrev && index < next) {
                        index = next
                    }
                    if (index > last) {
                        index = last
                    }
                    if (index == prevIndex) {
                        index = first
                    }
                }
                $this.data("prevIndex", index);
                if (!that.options.liveSearch) {
                    $items.eq(index).focus()
                } else {
                    e.preventDefault();
                    if (!$this.is(".dropdown-toggle")) {
                        $items.removeClass("active");
                        $items.eq(index).addClass("active").find("a").focus();
                        $this.focus()
                    }
                }
            } else {
                if (!$this.is("input")) {
                    var keyIndex = [], count, prevKey;
                    $items.each(function () {
                        if ($(this).parent().is(":not(.disabled)")) {
                            if ($.trim($(this).text().toLowerCase()).substring(0, 1) == keyCodeMap[e.keyCode]) {
                                keyIndex.push($(this).parent().index())
                            }
                        }
                    });
                    count = $(document).data("keycount");
                    count++;
                    $(document).data("keycount", count);
                    prevKey = $.trim($(":focus").text().toLowerCase()).substring(0, 1);
                    if (prevKey != keyCodeMap[e.keyCode]) {
                        count = 1;
                        $(document).data("keycount", count)
                    } else {
                        if (count >= keyIndex.length) {
                            $(document).data("keycount", 0);
                            if (count > keyIndex.length) {
                                count = 1
                            }
                        }
                    }
                    $items.eq(keyIndex[count - 1]).focus()
                }
            }
            if (/(13|32|^9$)/.test(e.keyCode) && isActive) {
                if (!/(32)/.test(e.keyCode)) {
                    e.preventDefault()
                }
                if (!that.options.liveSearch) {
                    $(":focus").click()
                } else {
                    if (!/(32)/.test(e.keyCode)) {
                        that.$menu.find(".active a").click();
                        $this.focus()
                    }
                }
                $(document).data("keycount", 0)
            }
            if ((/(^9$|27)/.test(e.keyCode) && isActive && (that.multiple || that.options.liveSearch)) || (/(27)/.test(e.keyCode) && !isActive)) {
                that.$menu.parent().removeClass("open");
                that.$button.focus()
            }
        }, hide: function () {
            this.$newElement.hide()
        }, show: function () {
            this.$newElement.show()
        }, destroy: function () {
            this.$newElement.remove();
            this.$element.remove()
        }
    };
    $.fn.selectpicker = function (option, event) {
        var args = arguments;
        var value;
        var chain = this.each(function () {
            if ($(this).is("select")) {
                var $this = $(this), data = $this.data("selectpicker"), options = typeof option == "object" && option;
                if (!data) {
                    $this.data("selectpicker", (data = new Selectpicker(this, options, event)))
                } else {
                    if (options) {
                        for (var i in options) {
                            data.options[i] = options[i]
                        }
                    }
                }
                if (typeof option == "string") {
                    var property = option;
                    if (data[property] instanceof Function) {
                        [].shift.apply(args);
                        value = data[property].apply(data, args)
                    } else {
                        value = data.options[property]
                    }
                }
            }
        });
        if (value !== undefined) {
            return value
        } else {
            return chain
        }
    };
    $.fn.selectpicker.defaults = {
        style: "btn-default",
        size: "auto",
        title: null,
        selectedTextFormat: "values",
        noneSelectedText: "Nothing selected",
        noneResultsText: "No results match",
        countSelectedText: "{0} of {1} selected",
        maxOptionsText: ["Limit reached ({n} {var} max)", "Group limit reached ({n} {var} max)", ["items", "item"]],
        width: false,
        container: false,
        hideDisabled: false,
        showSubtext: false,
        showIcon: true,
        showContent: true,
        dropupAuto: true,
        header: false,
        liveSearch: false,
        actionsBox: false,
        multipleSeparator: ", ",
        iconBase: "glyphicon",
        tickIcon: "glyphicon-ok",
        maxOptions: false
    };
    $(document).data("keycount", 0).on("keydown", ".bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bootstrap-select-searchbox input", Selectpicker.prototype.keydown).on("focusin.modal", ".bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bootstrap-select-searchbox input", function (e) {
        e.stopPropagation()
    })
}(window.jQuery);
(function ($) {
    $.fn.selectpicker.defaults = {
        style: "btn-default",
        size: "auto",
        title: null,
        selectedTextFormat: "values",
        noneSelectedText: "Ничего не выбрано",
        noneResultsText: "Не найдено совпадений",
        countSelectedText: "Выбрано {0} из {1}",
        maxOptionsText: ["Достигнут предел ({n} {var} максимум)", "Достигнут предел в группе ({n} {var} максимум)", ["items", "item"]],
        width: false,
        container: false,
        hideDisabled: false,
        showSubtext: false,
        showIcon: true,
        showContent: true,
        dropupAuto: true,
        header: false,
        liveSearch: false,
        actionsBox: false,
        multipleSeparator: ", ",
        iconBase: "glyphicon",
        tickIcon: "glyphicon-ok",
        maxOptions: false
    }
}(jQuery));
!function () {
    var d3 = {version: "3.4.8"};
    if (!Date.now) {
        Date.now = function () {
            return +new Date()
        }
    }
    var d3_arraySlice = [].slice, d3_array = function (list) {
        return d3_arraySlice.call(list)
    };
    var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
    try {
        d3_array(d3_documentElement.childNodes)[0].nodeType
    } catch (e) {
        d3_array = function (list) {
            var i = list.length, array = new Array(i);
            while (i--) {
                array[i] = list[i]
            }
            return array
        }
    }
    try {
        d3_document.createElement("div").style.setProperty("opacity", 0, "")
    } catch (error) {
        var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
        d3_element_prototype.setAttribute = function (name, value) {
            d3_element_setAttribute.call(this, name, value + "")
        };
        d3_element_prototype.setAttributeNS = function (space, local, value) {
            d3_element_setAttributeNS.call(this, space, local, value + "")
        };
        d3_style_prototype.setProperty = function (name, value, priority) {
            d3_style_setProperty.call(this, name, value + "", priority)
        }
    }
    d3.ascending = d3_ascending;
    function d3_ascending(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
    }

    d3.descending = function (a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN
    };
    d3.min = function (array, f) {
        var i = -1, n = array.length, a, b;
        if (arguments.length === 1) {
            while (++i < n && !((a = array[i]) != null && a <= a)) {
                a = undefined
            }
            while (++i < n) {
                if ((b = array[i]) != null && a > b) {
                    a = b
                }
            }
        } else {
            while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) {
                a = undefined
            }
            while (++i < n) {
                if ((b = f.call(array, array[i], i)) != null && a > b) {
                    a = b
                }
            }
        }
        return a
    };
    d3.max = function (array, f) {
        var i = -1, n = array.length, a, b;
        if (arguments.length === 1) {
            while (++i < n && !((a = array[i]) != null && a <= a)) {
                a = undefined
            }
            while (++i < n) {
                if ((b = array[i]) != null && b > a) {
                    a = b
                }
            }
        } else {
            while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) {
                a = undefined
            }
            while (++i < n) {
                if ((b = f.call(array, array[i], i)) != null && b > a) {
                    a = b
                }
            }
        }
        return a
    };
    d3.extent = function (array, f) {
        var i = -1, n = array.length, a, b, c;
        if (arguments.length === 1) {
            while (++i < n && !((a = c = array[i]) != null && a <= a)) {
                a = c = undefined
            }
            while (++i < n) {
                if ((b = array[i]) != null) {
                    if (a > b) {
                        a = b
                    }
                    if (c < b) {
                        c = b
                    }
                }
            }
        } else {
            while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) {
                a = undefined
            }
            while (++i < n) {
                if ((b = f.call(array, array[i], i)) != null) {
                    if (a > b) {
                        a = b
                    }
                    if (c < b) {
                        c = b
                    }
                }
            }
        }
        return [a, c]
    };
    d3.sum = function (array, f) {
        var s = 0, n = array.length, a, i = -1;
        if (arguments.length === 1) {
            while (++i < n) {
                if (!isNaN(a = +array[i])) {
                    s += a
                }
            }
        } else {
            while (++i < n) {
                if (!isNaN(a = +f.call(array, array[i], i))) {
                    s += a
                }
            }
        }
        return s
    };
    function d3_number(x) {
        return x != null && !isNaN(x)
    }

    d3.mean = function (array, f) {
        var s = 0, n = array.length, a, i = -1, j = n;
        if (arguments.length === 1) {
            while (++i < n) {
                if (d3_number(a = array[i])) {
                    s += a
                } else {
                    --j
                }
            }
        } else {
            while (++i < n) {
                if (d3_number(a = f.call(array, array[i], i))) {
                    s += a
                } else {
                    --j
                }
            }
        }
        return j ? s / j : undefined
    };
    d3.quantile = function (values, p) {
        var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
        return e ? v + e * (values[h] - v) : v
    };
    d3.median = function (array, f) {
        if (arguments.length > 1) {
            array = array.map(f)
        }
        array = array.filter(d3_number);
        return array.length ? d3.quantile(array.sort(d3_ascending), 0.5) : undefined
    };
    function d3_bisector(compare) {
        return {
            left: function (a, x, lo, hi) {
                if (arguments.length < 3) {
                    lo = 0
                }
                if (arguments.length < 4) {
                    hi = a.length
                }
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) < 0) {
                        lo = mid + 1
                    } else {
                        hi = mid
                    }
                }
                return lo
            }, right: function (a, x, lo, hi) {
                if (arguments.length < 3) {
                    lo = 0
                }
                if (arguments.length < 4) {
                    hi = a.length
                }
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) > 0) {
                        hi = mid
                    } else {
                        lo = mid + 1
                    }
                }
                return lo
            }
        }
    }

    var d3_bisect = d3_bisector(d3_ascending);
    d3.bisectLeft = d3_bisect.left;
    d3.bisect = d3.bisectRight = d3_bisect.right;
    d3.bisector = function (f) {
        return d3_bisector(f.length === 1 ? function (d, x) {
            return d3_ascending(f(d), x)
        } : f)
    };
    d3.shuffle = function (array) {
        var m = array.length, t, i;
        while (m) {
            i = Math.random() * m-- | 0;
            t = array[m], array[m] = array[i], array[i] = t
        }
        return array
    };
    d3.permute = function (array, indexes) {
        var i = indexes.length, permutes = new Array(i);
        while (i--) {
            permutes[i] = array[indexes[i]]
        }
        return permutes
    };
    d3.pairs = function (array) {
        var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
        while (i < n) {
            pairs[i] = [p0 = p1, p1 = array[++i]]
        }
        return pairs
    };
    d3.zip = function () {
        if (!(n = arguments.length)) {
            return []
        }
        for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m;) {
            for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n;) {
                zip[j] = arguments[j][i]
            }
        }
        return zips
    };
    function d3_zipLength(d) {
        return d.length
    }

    d3.transpose = function (matrix) {
        return d3.zip.apply(d3, matrix)
    };
    d3.keys = function (map) {
        var keys = [];
        for (var key in map) {
            keys.push(key)
        }
        return keys
    };
    d3.values = function (map) {
        var values = [];
        for (var key in map) {
            values.push(map[key])
        }
        return values
    };
    d3.entries = function (map) {
        var entries = [];
        for (var key in map) {
            entries.push({key: key, value: map[key]})
        }
        return entries
    };
    d3.merge = function (arrays) {
        var n = arrays.length, m, i = -1, j = 0, merged, array;
        while (++i < n) {
            j += arrays[i].length
        }
        merged = new Array(j);
        while (--n >= 0) {
            array = arrays[n];
            m = array.length;
            while (--m >= 0) {
                merged[--j] = array[m]
            }
        }
        return merged
    };
    var abs = Math.abs;
    d3.range = function (start, stop, step) {
        if (arguments.length < 3) {
            step = 1;
            if (arguments.length < 2) {
                stop = start;
                start = 0
            }
        }
        if ((stop - start) / step === Infinity) {
            throw new Error("infinite range")
        }
        var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
        start *= k, stop *= k, step *= k;
        if (step < 0) {
            while ((j = start + step * ++i) > stop) {
                range.push(j / k)
            }
        } else {
            while ((j = start + step * ++i) < stop) {
                range.push(j / k)
            }
        }
        return range
    };
    function d3_range_integerScale(x) {
        var k = 1;
        while (x * k % 1) {
            k *= 10
        }
        return k
    }

    function d3_class(ctor, properties) {
        try {
            for (var key in properties) {
                Object.defineProperty(ctor.prototype, key, {value: properties[key], enumerable: false})
            }
        } catch (e) {
            ctor.prototype = properties
        }
    }

    d3.map = function (object) {
        var map = new d3_Map();
        if (object instanceof d3_Map) {
            object.forEach(function (key, value) {
                map.set(key, value)
            })
        } else {
            for (var key in object) {
                map.set(key, object[key])
            }
        }
        return map
    };
    function d3_Map() {
    }

    d3_class(d3_Map, {
        has: d3_map_has, get: function (key) {
            return this[d3_map_prefix + key]
        }, set: function (key, value) {
            return this[d3_map_prefix + key] = value
        }, remove: d3_map_remove, keys: d3_map_keys, values: function () {
            var values = [];
            this.forEach(function (key, value) {
                values.push(value)
            });
            return values
        }, entries: function () {
            var entries = [];
            this.forEach(function (key, value) {
                entries.push({key: key, value: value})
            });
            return entries
        }, size: d3_map_size, empty: d3_map_empty, forEach: function (f) {
            for (var key in this) {
                if (key.charCodeAt(0) === d3_map_prefixCode) {
                    f.call(this, key.substring(1), this[key])
                }
            }
        }
    });
    var d3_map_prefix = "\x00", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);

    function d3_map_has(key) {
        return d3_map_prefix + key in this
    }

    function d3_map_remove(key) {
        key = d3_map_prefix + key;
        return key in this && delete this[key]
    }

    function d3_map_keys() {
        var keys = [];
        this.forEach(function (key) {
            keys.push(key)
        });
        return keys
    }

    function d3_map_size() {
        var size = 0;
        for (var key in this) {
            if (key.charCodeAt(0) === d3_map_prefixCode) {
                ++size
            }
        }
        return size
    }

    function d3_map_empty() {
        for (var key in this) {
            if (key.charCodeAt(0) === d3_map_prefixCode) {
                return false
            }
        }
        return true
    }

    d3.nest = function () {
        var nest = {}, keys = [], sortKeys = [], sortValues, rollup;

        function map(mapType, array, depth) {
            if (depth >= keys.length) {
                return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array
            }
            var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
            while (++i < n) {
                if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
                    values.push(object)
                } else {
                    valuesByKey.set(keyValue, [object])
                }
            }
            if (mapType) {
                object = mapType();
                setter = function (keyValue, values) {
                    object.set(keyValue, map(mapType, values, depth))
                }
            } else {
                object = {};
                setter = function (keyValue, values) {
                    object[keyValue] = map(mapType, values, depth)
                }
            }
            valuesByKey.forEach(setter);
            return object
        }

        function entries(map, depth) {
            if (depth >= keys.length) {
                return map
            }
            var array = [], sortKey = sortKeys[depth++];
            map.forEach(function (key, keyMap) {
                array.push({key: key, values: entries(keyMap, depth)})
            });
            return sortKey ? array.sort(function (a, b) {
                return sortKey(a.key, b.key)
            }) : array
        }

        nest.map = function (array, mapType) {
            return map(mapType, array, 0)
        };
        nest.entries = function (array) {
            return entries(map(d3.map, array, 0), 0)
        };
        nest.key = function (d) {
            keys.push(d);
            return nest
        };
        nest.sortKeys = function (order) {
            sortKeys[keys.length - 1] = order;
            return nest
        };
        nest.sortValues = function (order) {
            sortValues = order;
            return nest
        };
        nest.rollup = function (f) {
            rollup = f;
            return nest
        };
        return nest
    };
    d3.set = function (array) {
        var set = new d3_Set();
        if (array) {
            for (var i = 0, n = array.length; i < n; ++i) {
                set.add(array[i])
            }
        }
        return set
    };
    function d3_Set() {
    }

    d3_class(d3_Set, {
        has: d3_map_has, add: function (value) {
            this[d3_map_prefix + value] = true;
            return value
        }, remove: function (value) {
            value = d3_map_prefix + value;
            return value in this && delete this[value]
        }, values: d3_map_keys, size: d3_map_size, empty: d3_map_empty, forEach: function (f) {
            for (var value in this) {
                if (value.charCodeAt(0) === d3_map_prefixCode) {
                    f.call(this, value.substring(1))
                }
            }
        }
    });
    d3.behavior = {};
    d3.rebind = function (target, source) {
        var i = 1, n = arguments.length, method;
        while (++i < n) {
            target[method = arguments[i]] = d3_rebind(target, source, source[method])
        }
        return target
    };
    function d3_rebind(target, source, method) {
        return function () {
            var value = method.apply(source, arguments);
            return value === source ? target : value
        }
    }

    function d3_vendorSymbol(object, name) {
        if (name in object) {
            return name
        }
        name = name.charAt(0).toUpperCase() + name.substring(1);
        for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
            var prefixName = d3_vendorPrefixes[i] + name;
            if (prefixName in object) {
                return prefixName
            }
        }
    }

    var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];

    function d3_noop() {
    }

    d3.dispatch = function () {
        var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
        while (++i < n) {
            dispatch[arguments[i]] = d3_dispatch_event(dispatch)
        }
        return dispatch
    };
    function d3_dispatch() {
    }

    d3_dispatch.prototype.on = function (type, listener) {
        var i = type.indexOf("."), name = "";
        if (i >= 0) {
            name = type.substring(i + 1);
            type = type.substring(0, i)
        }
        if (type) {
            return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener)
        }
        if (arguments.length === 2) {
            if (listener == null) {
                for (type in this) {
                    if (this.hasOwnProperty(type)) {
                        this[type].on(name, null)
                    }
                }
            }
            return this
        }
    };
    function d3_dispatch_event(dispatch) {
        var listeners = [], listenerByName = new d3_Map();

        function event() {
            var z = listeners, i = -1, n = z.length, l;
            while (++i < n) {
                if (l = z[i].on) {
                    l.apply(this, arguments)
                }
            }
            return dispatch
        }

        event.on = function (name, listener) {
            var l = listenerByName.get(name), i;
            if (arguments.length < 2) {
                return l && l.on
            }
            if (l) {
                l.on = null;
                listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
                listenerByName.remove(name)
            }
            if (listener) {
                listeners.push(listenerByName.set(name, {on: listener}))
            }
            return dispatch
        };
        return event
    }

    d3.event = null;
    function d3_eventPreventDefault() {
        d3.event.preventDefault()
    }

    function d3_eventSource() {
        var e = d3.event, s;
        while (s = e.sourceEvent) {
            e = s
        }
        return e
    }

    function d3_eventDispatch(target) {
        var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
        while (++i < n) {
            dispatch[arguments[i]] = d3_dispatch_event(dispatch)
        }
        dispatch.of = function (thiz, argumentz) {
            return function (e1) {
                try {
                    var e0 = e1.sourceEvent = d3.event;
                    e1.target = target;
                    d3.event = e1;
                    dispatch[e1.type].apply(thiz, argumentz)
                } finally {
                    d3.event = e0
                }
            }
        };
        return dispatch
    }

    d3.requote = function (s) {
        return s.replace(d3_requote_re, "\\$&")
    };
    var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    var d3_subclass = {}.__proto__ ? function (object, prototype) {
        object.__proto__ = prototype
    } : function (object, prototype) {
        for (var property in prototype) {
            object[property] = prototype[property]
        }
    };

    function d3_selection(groups) {
        d3_subclass(groups, d3_selectionPrototype);
        return groups
    }

    var d3_select = function (s, n) {
        return n.querySelector(s)
    }, d3_selectAll = function (s, n) {
        return n.querySelectorAll(s)
    }, d3_selectMatcher = d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function (n, s) {
        return d3_selectMatcher.call(n, s)
    };
    if (typeof Sizzle === "function") {
        d3_select = function (s, n) {
            return Sizzle(s, n)[0] || null
        };
        d3_selectAll = Sizzle;
        d3_selectMatches = Sizzle.matchesSelector
    }
    d3.selection = function () {
        return d3_selectionRoot
    };
    var d3_selectionPrototype = d3.selection.prototype = [];
    d3_selectionPrototype.select = function (selector) {
        var subgroups = [], subgroup, subnode, group, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            subgroups.push(subgroup = []);
            subgroup.parentNode = (group = this[j]).parentNode;
            for (var i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    subgroup.push(subnode = selector.call(node, node.__data__, i, j));
                    if (subnode && "__data__" in node) {
                        subnode.__data__ = node.__data__
                    }
                } else {
                    subgroup.push(null)
                }
            }
        }
        return d3_selection(subgroups)
    };
    function d3_selection_selector(selector) {
        return typeof selector === "function" ? selector : function () {
            return d3_select(selector, this)
        }
    }

    d3_selectionPrototype.selectAll = function (selector) {
        var subgroups = [], subgroup, node;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
                    subgroup.parentNode = node
                }
            }
        }
        return d3_selection(subgroups)
    };
    function d3_selection_selectorAll(selector) {
        return typeof selector === "function" ? selector : function () {
            return d3_selectAll(selector, this)
        }
    }

    var d3_nsPrefix = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: "http://www.w3.org/1999/xhtml",
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
    };
    d3.ns = {
        prefix: d3_nsPrefix, qualify: function (name) {
            var i = name.indexOf(":"), prefix = name;
            if (i >= 0) {
                prefix = name.substring(0, i);
                name = name.substring(i + 1)
            }
            return d3_nsPrefix.hasOwnProperty(prefix) ? {space: d3_nsPrefix[prefix], local: name} : name
        }
    };
    d3_selectionPrototype.attr = function (name, value) {
        if (arguments.length < 2) {
            if (typeof name === "string") {
                var node = this.node();
                name = d3.ns.qualify(name);
                return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name)
            }
            for (value in name) {
                this.each(d3_selection_attr(value, name[value]))
            }
            return this
        }
        return this.each(d3_selection_attr(name, value))
    };
    function d3_selection_attr(name, value) {
        name = d3.ns.qualify(name);
        function attrNull() {
            this.removeAttribute(name)
        }

        function attrNullNS() {
            this.removeAttributeNS(name.space, name.local)
        }

        function attrConstant() {
            this.setAttribute(name, value)
        }

        function attrConstantNS() {
            this.setAttributeNS(name.space, name.local, value)
        }

        function attrFunction() {
            var x = value.apply(this, arguments);
            if (x == null) {
                this.removeAttribute(name)
            } else {
                this.setAttribute(name, x)
            }
        }

        function attrFunctionNS() {
            var x = value.apply(this, arguments);
            if (x == null) {
                this.removeAttributeNS(name.space, name.local)
            } else {
                this.setAttributeNS(name.space, name.local, x)
            }
        }

        return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant
    }

    function d3_collapse(s) {
        return s.trim().replace(/\s+/g, " ")
    }

    d3_selectionPrototype.classed = function (name, value) {
        if (arguments.length < 2) {
            if (typeof name === "string") {
                var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
                if (value = node.classList) {
                    while (++i < n) {
                        if (!value.contains(name[i])) {
                            return false
                        }
                    }
                } else {
                    value = node.getAttribute("class");
                    while (++i < n) {
                        if (!d3_selection_classedRe(name[i]).test(value)) {
                            return false
                        }
                    }
                }
                return true
            }
            for (value in name) {
                this.each(d3_selection_classed(value, name[value]))
            }
            return this
        }
        return this.each(d3_selection_classed(name, value))
    };
    function d3_selection_classedRe(name) {
        return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g")
    }

    function d3_selection_classes(name) {
        return name.trim().split(/^|\s+/)
    }

    function d3_selection_classed(name, value) {
        name = d3_selection_classes(name).map(d3_selection_classedName);
        var n = name.length;

        function classedConstant() {
            var i = -1;
            while (++i < n) {
                name[i](this, value)
            }
        }

        function classedFunction() {
            var i = -1, x = value.apply(this, arguments);
            while (++i < n) {
                name[i](this, x)
            }
        }

        return typeof value === "function" ? classedFunction : classedConstant
    }

    function d3_selection_classedName(name) {
        var re = d3_selection_classedRe(name);
        return function (node, value) {
            if (c = node.classList) {
                return value ? c.add(name) : c.remove(name)
            }
            var c = node.getAttribute("class") || "";
            if (value) {
                re.lastIndex = 0;
                if (!re.test(c)) {
                    node.setAttribute("class", d3_collapse(c + " " + name))
                }
            } else {
                node.setAttribute("class", d3_collapse(c.replace(re, " ")))
            }
        }
    }

    d3_selectionPrototype.style = function (name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof name !== "string") {
                if (n < 2) {
                    value = ""
                }
                for (priority in name) {
                    this.each(d3_selection_style(priority, name[priority], value))
                }
                return this
            }
            if (n < 2) {
                return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name)
            }
            priority = ""
        }
        return this.each(d3_selection_style(name, value, priority))
    };
    function d3_selection_style(name, value, priority) {
        function styleNull() {
            this.style.removeProperty(name)
        }

        function styleConstant() {
            this.style.setProperty(name, value, priority)
        }

        function styleFunction() {
            var x = value.apply(this, arguments);
            if (x == null) {
                this.style.removeProperty(name)
            } else {
                this.style.setProperty(name, x, priority)
            }
        }

        return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant
    }

    d3_selectionPrototype.property = function (name, value) {
        if (arguments.length < 2) {
            if (typeof name === "string") {
                return this.node()[name]
            }
            for (value in name) {
                this.each(d3_selection_property(value, name[value]))
            }
            return this
        }
        return this.each(d3_selection_property(name, value))
    };
    function d3_selection_property(name, value) {
        function propertyNull() {
            delete this[name]
        }

        function propertyConstant() {
            this[name] = value
        }

        function propertyFunction() {
            var x = value.apply(this, arguments);
            if (x == null) {
                delete this[name]
            } else {
                this[name] = x
            }
        }

        return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant
    }

    d3_selectionPrototype.text = function (value) {
        return arguments.length ? this.each(typeof value === "function" ? function () {
            var v = value.apply(this, arguments);
            this.textContent = v == null ? "" : v
        } : value == null ? function () {
            this.textContent = ""
        } : function () {
            this.textContent = value
        }) : this.node().textContent
    };
    d3_selectionPrototype.html = function (value) {
        return arguments.length ? this.each(typeof value === "function" ? function () {
            var v = value.apply(this, arguments);
            this.innerHTML = v == null ? "" : v
        } : value == null ? function () {
            this.innerHTML = ""
        } : function () {
            this.innerHTML = value
        }) : this.node().innerHTML
    };
    d3_selectionPrototype.append = function (name) {
        name = d3_selection_creator(name);
        return this.select(function () {
            return this.appendChild(name.apply(this, arguments))
        })
    };
    function d3_selection_creator(name) {
        return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function () {
            return this.ownerDocument.createElementNS(name.space, name.local)
        } : function () {
            return this.ownerDocument.createElementNS(this.namespaceURI, name)
        }
    }

    d3_selectionPrototype.insert = function (name, before) {
        name = d3_selection_creator(name);
        before = d3_selection_selector(before);
        return this.select(function () {
            return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null)
        })
    };
    d3_selectionPrototype.remove = function () {
        return this.each(function () {
            var parent = this.parentNode;
            if (parent) {
                parent.removeChild(this)
            }
        })
    };
    d3_selectionPrototype.data = function (value, key) {
        var i = -1, n = this.length, group, node;
        if (!arguments.length) {
            value = new Array(n = (group = this[0]).length);
            while (++i < n) {
                if (node = group[i]) {
                    value[i] = node.__data__
                }
            }
            return value
        }
        function bind(group, groupData) {
            var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
            if (key) {
                var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
                for (i = -1; ++i < n;) {
                    keyValue = key.call(node = group[i], node.__data__, i);
                    if (nodeByKeyValue.has(keyValue)) {
                        exitNodes[i] = node
                    } else {
                        nodeByKeyValue.set(keyValue, node)
                    }
                    keyValues.push(keyValue)
                }
                for (i = -1; ++i < m;) {
                    keyValue = key.call(groupData, nodeData = groupData[i], i);
                    if (node = nodeByKeyValue.get(keyValue)) {
                        updateNodes[i] = node;
                        node.__data__ = nodeData
                    } else {
                        if (!dataByKeyValue.has(keyValue)) {
                            enterNodes[i] = d3_selection_dataNode(nodeData)
                        }
                    }
                    dataByKeyValue.set(keyValue, nodeData);
                    nodeByKeyValue.remove(keyValue)
                }
                for (i = -1; ++i < n;) {
                    if (nodeByKeyValue.has(keyValues[i])) {
                        exitNodes[i] = group[i]
                    }
                }
            } else {
                for (i = -1; ++i < n0;) {
                    node = group[i];
                    nodeData = groupData[i];
                    if (node) {
                        node.__data__ = nodeData;
                        updateNodes[i] = node
                    } else {
                        enterNodes[i] = d3_selection_dataNode(nodeData)
                    }
                }
                for (; i < m; ++i) {
                    enterNodes[i] = d3_selection_dataNode(groupData[i])
                }
                for (; i < n; ++i) {
                    exitNodes[i] = group[i]
                }
            }
            enterNodes.update = updateNodes;
            enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
            enter.push(enterNodes);
            update.push(updateNodes);
            exit.push(exitNodes)
        }

        var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
        if (typeof value === "function") {
            while (++i < n) {
                bind(group = this[i], value.call(group, group.parentNode.__data__, i))
            }
        } else {
            while (++i < n) {
                bind(group = this[i], value)
            }
        }
        update.enter = function () {
            return enter
        };
        update.exit = function () {
            return exit
        };
        return update
    };
    function d3_selection_dataNode(data) {
        return {__data__: data}
    }

    d3_selectionPrototype.datum = function (value) {
        return arguments.length ? this.property("__data__", value) : this.property("__data__")
    };
    d3_selectionPrototype.filter = function (filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== "function") {
            filter = d3_selection_filter(filter)
        }
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            subgroup.parentNode = (group = this[j]).parentNode;
            for (var i = 0, n = group.length; i < n; i++) {
                if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
                    subgroup.push(node)
                }
            }
        }
        return d3_selection(subgroups)
    };
    function d3_selection_filter(selector) {
        return function () {
            return d3_selectMatches(this, selector)
        }
    }

    d3_selectionPrototype.order = function () {
        for (var j = -1, m = this.length; ++j < m;) {
            for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
                if (node = group[i]) {
                    if (next && next !== node.nextSibling) {
                        next.parentNode.insertBefore(node, next)
                    }
                    next = node
                }
            }
        }
        return this
    };
    d3_selectionPrototype.sort = function (comparator) {
        comparator = d3_selection_sortComparator.apply(this, arguments);
        for (var j = -1, m = this.length; ++j < m;) {
            this[j].sort(comparator)
        }
        return this.order()
    };
    function d3_selection_sortComparator(comparator) {
        if (!arguments.length) {
            comparator = d3_ascending
        }
        return function (a, b) {
            return a && b ? comparator(a.__data__, b.__data__) : !a - !b
        }
    }

    d3_selectionPrototype.each = function (callback) {
        return d3_selection_each(this, function (node, i, j) {
            callback.call(node, node.__data__, i, j)
        })
    };
    function d3_selection_each(groups, callback) {
        for (var j = 0, m = groups.length; j < m; j++) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
                if (node = group[i]) {
                    callback(node, i, j)
                }
            }
        }
        return groups
    }

    d3_selectionPrototype.call = function (callback) {
        var args = d3_array(arguments);
        callback.apply(args[0] = this, args);
        return this
    };
    d3_selectionPrototype.empty = function () {
        return !this.node()
    };
    d3_selectionPrototype.node = function () {
        for (var j = 0, m = this.length; j < m; j++) {
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                var node = group[i];
                if (node) {
                    return node
                }
            }
        }
        return null
    };
    d3_selectionPrototype.size = function () {
        var n = 0;
        this.each(function () {
            ++n
        });
        return n
    };
    function d3_selection_enter(selection) {
        d3_subclass(selection, d3_selection_enterPrototype);
        return selection
    }

    var d3_selection_enterPrototype = [];
    d3.selection.enter = d3_selection_enter;
    d3.selection.enter.prototype = d3_selection_enterPrototype;
    d3_selection_enterPrototype.append = d3_selectionPrototype.append;
    d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
    d3_selection_enterPrototype.node = d3_selectionPrototype.node;
    d3_selection_enterPrototype.call = d3_selectionPrototype.call;
    d3_selection_enterPrototype.size = d3_selectionPrototype.size;
    d3_selection_enterPrototype.select = function (selector) {
        var subgroups = [], subgroup, subnode, upgroup, group, node;
        for (var j = -1, m = this.length; ++j < m;) {
            upgroup = (group = this[j]).update;
            subgroups.push(subgroup = []);
            subgroup.parentNode = group.parentNode;
            for (var i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
                    subnode.__data__ = node.__data__
                } else {
                    subgroup.push(null)
                }
            }
        }
        return d3_selection(subgroups)
    };
    d3_selection_enterPrototype.insert = function (name, before) {
        if (arguments.length < 2) {
            before = d3_selection_enterInsertBefore(this)
        }
        return d3_selectionPrototype.insert.call(this, name, before)
    };
    function d3_selection_enterInsertBefore(enter) {
        var i0, j0;
        return function (d, i, j) {
            var group = enter[j].update, n = group.length, node;
            if (j != j0) {
                j0 = j, i0 = 0
            }
            if (i >= i0) {
                i0 = i + 1
            }
            while (!(node = group[i0]) && ++i0 < n) {
            }
            return node
        }
    }

    d3_selectionPrototype.transition = function () {
        var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
                time: Date.now(),
                ease: d3_ease_cubicInOut,
                delay: 0,
                duration: 250
            };
        for (var j = -1, m = this.length; ++j < m;) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    d3_transitionNode(node, i, id, transition)
                }
                subgroup.push(node)
            }
        }
        return d3_transition(subgroups, id)
    };
    d3_selectionPrototype.interrupt = function () {
        return this.each(d3_selection_interrupt)
    };
    function d3_selection_interrupt() {
        var lock = this.__transition__;
        if (lock) {
            ++lock.active
        }
    }

    d3.select = function (node) {
        var group = [typeof node === "string" ? d3_select(node, d3_document) : node];
        group.parentNode = d3_documentElement;
        return d3_selection([group])
    };
    d3.selectAll = function (nodes) {
        var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
        group.parentNode = d3_documentElement;
        return d3_selection([group])
    };
    var d3_selectionRoot = d3.select(d3_documentElement);
    d3_selectionPrototype.on = function (type, listener, capture) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof type !== "string") {
                if (n < 2) {
                    listener = false
                }
                for (capture in type) {
                    this.each(d3_selection_on(capture, type[capture], listener))
                }
                return this
            }
            if (n < 2) {
                return (n = this.node()["__on" + type]) && n._
            }
            capture = false
        }
        return this.each(d3_selection_on(type, listener, capture))
    };
    function d3_selection_on(type, listener, capture) {
        var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
        if (i > 0) {
            type = type.substring(0, i)
        }
        var filter = d3_selection_onFilters.get(type);
        if (filter) {
            type = filter, wrap = d3_selection_onFilter
        }
        function onRemove() {
            var l = this[name];
            if (l) {
                this.removeEventListener(type, l, l.$);
                delete this[name]
            }
        }

        function onAdd() {
            var l = wrap(listener, d3_array(arguments));
            onRemove.call(this);
            this.addEventListener(type, this[name] = l, l.$ = capture);
            l._ = listener
        }

        function removeAll() {
            var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
            for (var name in this) {
                if (match = name.match(re)) {
                    var l = this[name];
                    this.removeEventListener(match[1], l, l.$);
                    delete this[name]
                }
            }
        }

        return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll
    }

    var d3_selection_onFilters = d3.map({mouseenter: "mouseover", mouseleave: "mouseout"});
    d3_selection_onFilters.forEach(function (k) {
        if ("on" + k in d3_document) {
            d3_selection_onFilters.remove(k)
        }
    });
    function d3_selection_onListener(listener, argumentz) {
        return function (e) {
            var o = d3.event;
            d3.event = e;
            argumentz[0] = this.__data__;
            try {
                listener.apply(this, argumentz)
            } finally {
                d3.event = o
            }
        }
    }

    function d3_selection_onFilter(listener, argumentz) {
        var l = d3_selection_onListener(listener, argumentz);
        return function (e) {
            var target = this, related = e.relatedTarget;
            if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
                l.call(target, e)
            }
        }
    }

    var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;

    function d3_event_dragSuppress() {
        var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
        if (d3_event_dragSelect) {
            var style = d3_documentElement.style, select = style[d3_event_dragSelect];
            style[d3_event_dragSelect] = "none"
        }
        return function (suppressClick) {
            w.on(name, null);
            if (d3_event_dragSelect) {
                style[d3_event_dragSelect] = select
            }
            if (suppressClick) {
                function off() {
                    w.on(click, null)
                }

                w.on(click, function () {
                    d3_eventPreventDefault();
                    off()
                }, true);
                setTimeout(off, 0)
            }
        }
    }

    d3.mouse = function (container) {
        return d3_mousePoint(container, d3_eventSource())
    };
    function d3_mousePoint(container, e) {
        if (e.changedTouches) {
            e = e.changedTouches[0]
        }
        var svg = container.ownerSVGElement || container;
        if (svg.createSVGPoint) {
            var point = svg.createSVGPoint();
            point.x = e.clientX, point.y = e.clientY;
            point = point.matrixTransform(container.getScreenCTM().inverse());
            return [point.x, point.y]
        }
        var rect = container.getBoundingClientRect();
        return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop]
    }

    d3.touches = function (container, touches) {
        if (arguments.length < 2) {
            touches = d3_eventSource().touches
        }
        return touches ? d3_array(touches).map(function (touch) {
            var point = d3_mousePoint(container, touch);
            point.identifier = touch.identifier;
            return point
        }) : []
    };
    d3.behavior.drag = function () {
        var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, "touchmove", "touchend");

        function drag() {
            this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart)
        }

        function dragstart(id, position, subject, move, end) {
            return function () {
                var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);
                if (origin) {
                    dragOffset = origin.apply(that, arguments);
                    dragOffset = [dragOffset.x - position0[0], dragOffset.y - position0[1]]
                } else {
                    dragOffset = [0, 0]
                }
                dispatch({type: "dragstart"});
                function moved() {
                    var position1 = position(parent, dragId), dx, dy;
                    if (!position1) {
                        return
                    }
                    dx = position1[0] - position0[0];
                    dy = position1[1] - position0[1];
                    dragged |= dx | dy;
                    position0 = position1;
                    dispatch({
                        type: "drag",
                        x: position1[0] + dragOffset[0],
                        y: position1[1] + dragOffset[1],
                        dx: dx,
                        dy: dy
                    })
                }

                function ended() {
                    if (!position(parent, dragId)) {
                        return
                    }
                    dragSubject.on(move + dragName, null).on(end + dragName, null);
                    dragRestore(dragged && d3.event.target === target);
                    dispatch({type: "dragend"})
                }
            }
        }

        drag.origin = function (x) {
            if (!arguments.length) {
                return origin
            }
            origin = x;
            return drag
        };
        return d3.rebind(drag, event, "on")
    };
    function d3_behavior_dragTouchId() {
        return d3.event.changedTouches[0].identifier
    }

    function d3_behavior_dragTouchSubject() {
        return d3.event.target
    }

    function d3_behavior_dragMouseSubject() {
        return d3_window
    }

    var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 0.000001, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;

    function d3_sgn(x) {
        return x > 0 ? 1 : x < 0 ? -1 : 0
    }

    function d3_cross2d(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0])
    }

    function d3_acos(x) {
        return x > 1 ? 0 : x < -1 ? π : Math.acos(x)
    }

    function d3_asin(x) {
        return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x)
    }

    function d3_sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2
    }

    function d3_cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2
    }

    function d3_tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1)
    }

    function d3_haversin(x) {
        return (x = Math.sin(x / 2)) * x
    }

    var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
    d3.interpolateZoom = function (p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
        var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;

        function interpolate(t) {
            var s = t * S;
            if (dr) {
                var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
                return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0)]
            }
            return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s)]
        }

        interpolate.duration = S * 1000;
        return interpolate
    };
    d3.behavior.zoom = function () {
        var view = {
            x: 0,
            y: 0,
            k: 1
        }, translate0, center, size = [960, 500], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;

        function zoom(g) {
            g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on(mousemove, mousewheelreset).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted)
        }

        zoom.event = function (g) {
            g.each(function () {
                var dispatch = event.of(this, arguments), view1 = view;
                if (d3_transitionInheritId) {
                    d3.select(this).transition().each("start.zoom", function () {
                        view = this.__chart__ || {x: 0, y: 0, k: 1};
                        zoomstarted(dispatch)
                    }).tween("zoom:zoom", function () {
                        var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([(cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k], [(cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k]);
                        return function (t) {
                            var l = i(t), k = dx / l[2];
                            this.__chart__ = view = {x: cx - l[0] * k, y: cy - l[1] * k, k: k};
                            zoomed(dispatch)
                        }
                    }).each("end.zoom", function () {
                        zoomended(dispatch)
                    })
                } else {
                    this.__chart__ = view;
                    zoomstarted(dispatch);
                    zoomed(dispatch);
                    zoomended(dispatch)
                }
            })
        };
        zoom.translate = function (_) {
            if (!arguments.length) {
                return [view.x, view.y]
            }
            view = {x: +_[0], y: +_[1], k: view.k};
            rescale();
            return zoom
        };
        zoom.scale = function (_) {
            if (!arguments.length) {
                return view.k
            }
            view = {x: view.x, y: view.y, k: +_};
            rescale();
            return zoom
        };
        zoom.scaleExtent = function (_) {
            if (!arguments.length) {
                return scaleExtent
            }
            scaleExtent = _ == null ? d3_behavior_zoomInfinity : [+_[0], +_[1]];
            return zoom
        };
        zoom.center = function (_) {
            if (!arguments.length) {
                return center
            }
            center = _ && [+_[0], +_[1]];
            return zoom
        };
        zoom.size = function (_) {
            if (!arguments.length) {
                return size
            }
            size = _ && [+_[0], +_[1]];
            return zoom
        };
        zoom.x = function (z) {
            if (!arguments.length) {
                return x1
            }
            x1 = z;
            x0 = z.copy();
            view = {x: 0, y: 0, k: 1};
            return zoom
        };
        zoom.y = function (z) {
            if (!arguments.length) {
                return y1
            }
            y1 = z;
            y0 = z.copy();
            view = {x: 0, y: 0, k: 1};
            return zoom
        };
        function location(p) {
            return [(p[0] - view.x) / view.k, (p[1] - view.y) / view.k]
        }

        function point(l) {
            return [l[0] * view.k + view.x, l[1] * view.k + view.y]
        }

        function scaleTo(s) {
            view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s))
        }

        function translateTo(p, l) {
            l = point(l);
            view.x += p[0] - l[0];
            view.y += p[1] - l[1]
        }

        function rescale() {
            if (x1) {
                x1.domain(x0.range().map(function (x) {
                    return (x - view.x) / view.k
                }).map(x0.invert))
            }
            if (y1) {
                y1.domain(y0.range().map(function (y) {
                    return (y - view.y) / view.k
                }).map(y0.invert))
            }
        }

        function zoomstarted(dispatch) {
            dispatch({type: "zoomstart"})
        }

        function zoomed(dispatch) {
            rescale();
            dispatch({type: "zoom", scale: view.k, translate: [view.x, view.y]})
        }

        function zoomended(dispatch) {
            dispatch({type: "zoomend"})
        }

        function mousedowned() {
            var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();
            d3_selection_interrupt.call(that);
            zoomstarted(dispatch);
            function moved() {
                dragged = 1;
                translateTo(d3.mouse(that), location0);
                zoomed(dispatch)
            }

            function ended() {
                subject.on(mousemove, d3_window === that ? mousewheelreset : null).on(mouseup, null);
                dragRestore(dragged && d3.event.target === target);
                zoomended(dispatch)
            }
        }

        function touchstarted() {
            var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that).on(mousedown, null).on(touchstart, started), dragRestore = d3_event_dragSuppress();
            d3_selection_interrupt.call(that);
            started();
            zoomstarted(dispatch);
            function relocate() {
                var touches = d3.touches(that);
                scale0 = view.k;
                touches.forEach(function (t) {
                    if (t.identifier in locations0) {
                        locations0[t.identifier] = location(t)
                    }
                });
                return touches
            }

            function started() {
                var target = d3.event.target;
                d3.select(target).on(touchmove, moved).on(touchend, ended);
                targets.push(target);
                var changed = d3.event.changedTouches;
                for (var i = 0, n = changed.length; i < n; ++i) {
                    locations0[changed[i].identifier] = null
                }
                var touches = relocate(), now = Date.now();
                if (touches.length === 1) {
                    if (now - touchtime < 500) {
                        var p = touches[0], l = locations0[p.identifier];
                        scaleTo(view.k * 2);
                        translateTo(p, l);
                        d3_eventPreventDefault();
                        zoomed(dispatch)
                    }
                    touchtime = now
                } else {
                    if (touches.length > 1) {
                        var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
                        distance0 = dx * dx + dy * dy
                    }
                }
            }

            function moved() {
                var touches = d3.touches(that), p0, l0, p1, l1;
                for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
                    p1 = touches[i];
                    if (l1 = locations0[p1.identifier]) {
                        if (l0) {
                            break
                        }
                        p0 = p1, l0 = l1
                    }
                }
                if (l1) {
                    var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
                    p0 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
                    l0 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
                    scaleTo(scale1 * scale0)
                }
                touchtime = null;
                translateTo(p0, l0);
                zoomed(dispatch)
            }

            function ended() {
                if (d3.event.touches.length) {
                    var changed = d3.event.changedTouches;
                    for (var i = 0, n = changed.length; i < n; ++i) {
                        delete locations0[changed[i].identifier]
                    }
                    for (var identifier in locations0) {
                        return void relocate()
                    }
                }
                d3.selectAll(targets).on(zoomName, null);
                subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
                dragRestore();
                zoomended(dispatch)
            }
        }

        function mousewheeled() {
            var dispatch = event.of(this, arguments);
            if (mousewheelTimer) {
                clearTimeout(mousewheelTimer)
            } else {
                d3_selection_interrupt.call(this), zoomstarted(dispatch)
            }
            mousewheelTimer = setTimeout(function () {
                mousewheelTimer = null;
                zoomended(dispatch)
            }, 50);
            d3_eventPreventDefault();
            var point = center || d3.mouse(this);
            if (!translate0) {
                translate0 = location(point)
            }
            scaleTo(Math.pow(2, d3_behavior_zoomDelta() * 0.002) * view.k);
            translateTo(point, translate0);
            zoomed(dispatch)
        }

        function mousewheelreset() {
            translate0 = null
        }

        function dblclicked() {
            var dispatch = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
            zoomstarted(dispatch);
            scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
            translateTo(p, l);
            zoomed(dispatch);
            zoomended(dispatch)
        }

        return d3.rebind(zoom, event, "on")
    };
    var d3_behavior_zoomInfinity = [0, Infinity];
    var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function () {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1)
    }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function () {
        return d3.event.wheelDelta
    }, "mousewheel") : (d3_behavior_zoomDelta = function () {
        return -d3.event.detail
    }, "MozMousePixelScroll");

    function d3_Color() {
    }

    d3_Color.prototype.toString = function () {
        return this.rgb() + ""
    };
    d3.hsl = function (h, s, l) {
        return arguments.length === 1 ? h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : d3_hsl(+h, +s, +l)
    };
    function d3_hsl(h, s, l) {
        return new d3_Hsl(h, s, l)
    }

    function d3_Hsl(h, s, l) {
        this.h = h;
        this.s = s;
        this.l = l
    }

    var d3_hslPrototype = d3_Hsl.prototype = new d3_Color();
    d3_hslPrototype.brighter = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        return d3_hsl(this.h, this.s, this.l / k)
    };
    d3_hslPrototype.darker = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        return d3_hsl(this.h, this.s, k * this.l)
    };
    d3_hslPrototype.rgb = function () {
        return d3_hsl_rgb(this.h, this.s, this.l)
    };
    function d3_hsl_rgb(h, s, l) {
        var m1, m2;
        h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
        s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
        l = l < 0 ? 0 : l > 1 ? 1 : l;
        m2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        m1 = 2 * l - m2;
        function v(h) {
            if (h > 360) {
                h -= 360
            } else {
                if (h < 0) {
                    h += 360
                }
            }
            if (h < 60) {
                return m1 + (m2 - m1) * h / 60
            }
            if (h < 180) {
                return m2
            }
            if (h < 240) {
                return m1 + (m2 - m1) * (240 - h) / 60
            }
            return m1
        }

        function vv(h) {
            return Math.round(v(h) * 255)
        }

        return d3_rgb(vv(h + 120), vv(h), vv(h - 120))
    }

    d3.hcl = function (h, c, l) {
        return arguments.length === 1 ? h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l) : h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : d3_hcl(+h, +c, +l)
    };
    function d3_hcl(h, c, l) {
        return new d3_Hcl(h, c, l)
    }

    function d3_Hcl(h, c, l) {
        this.h = h;
        this.c = c;
        this.l = l
    }

    var d3_hclPrototype = d3_Hcl.prototype = new d3_Color();
    d3_hclPrototype.brighter = function (k) {
        return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)))
    };
    d3_hclPrototype.darker = function (k) {
        return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)))
    };
    d3_hclPrototype.rgb = function () {
        return d3_hcl_lab(this.h, this.c, this.l).rgb()
    };
    function d3_hcl_lab(h, c, l) {
        if (isNaN(h)) {
            h = 0
        }
        if (isNaN(c)) {
            c = 0
        }
        return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c)
    }

    d3.lab = function (l, a, b) {
        return arguments.length === 1 ? l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b) : l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b) : d3_lab(+l, +a, +b)
    };
    function d3_lab(l, a, b) {
        return new d3_Lab(l, a, b)
    }

    function d3_Lab(l, a, b) {
        this.l = l;
        this.a = a;
        this.b = b
    }

    var d3_lab_K = 18;
    var d3_lab_X = 0.95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
    var d3_labPrototype = d3_Lab.prototype = new d3_Color();
    d3_labPrototype.brighter = function (k) {
        return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b)
    };
    d3_labPrototype.darker = function (k) {
        return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b)
    };
    d3_labPrototype.rgb = function () {
        return d3_lab_rgb(this.l, this.a, this.b)
    };
    function d3_lab_rgb(l, a, b) {
        var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
        x = d3_lab_xyz(x) * d3_lab_X;
        y = d3_lab_xyz(y) * d3_lab_Y;
        z = d3_lab_xyz(z) * d3_lab_Z;
        return d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), d3_xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), d3_xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z))
    }

    function d3_lab_hcl(l, a, b) {
        return l > 0 ? d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : d3_hcl(NaN, NaN, l)
    }

    function d3_lab_xyz(x) {
        return x > 0.206893034 ? x * x * x : (x - 4 / 29) / 7.787037
    }

    function d3_xyz_lab(x) {
        return x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29
    }

    function d3_xyz_rgb(r) {
        return Math.round(255 * (r <= 0.00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055))
    }

    d3.rgb = function (r, g, b) {
        return arguments.length === 1 ? r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : d3_rgb(~~r, ~~g, ~~b)
    };
    function d3_rgbNumber(value) {
        return d3_rgb(value >> 16, value >> 8 & 255, value & 255)
    }

    function d3_rgbString(value) {
        return d3_rgbNumber(value) + ""
    }

    function d3_rgb(r, g, b) {
        return new d3_Rgb(r, g, b)
    }

    function d3_Rgb(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b
    }

    var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color();
    d3_rgbPrototype.brighter = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        var r = this.r, g = this.g, b = this.b, i = 30;
        if (!r && !g && !b) {
            return d3_rgb(i, i, i)
        }
        if (r && r < i) {
            r = i
        }
        if (g && g < i) {
            g = i
        }
        if (b && b < i) {
            b = i
        }
        return d3_rgb(Math.min(255, ~~(r / k)), Math.min(255, ~~(g / k)), Math.min(255, ~~(b / k)))
    };
    d3_rgbPrototype.darker = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        return d3_rgb(~~(k * this.r), ~~(k * this.g), ~~(k * this.b))
    };
    d3_rgbPrototype.hsl = function () {
        return d3_rgb_hsl(this.r, this.g, this.b)
    };
    d3_rgbPrototype.toString = function () {
        return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b)
    };
    function d3_rgb_hex(v) {
        return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16)
    }

    function d3_rgb_parse(format, rgb, hsl) {
        var r = 0, g = 0, b = 0, m1, m2, color;
        m1 = /([a-z]+)\((.*)\)/i.exec(format);
        if (m1) {
            m2 = m1[2].split(",");
            switch (m1[1]) {
                case"hsl":
                    return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
                case"rgb":
                    return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]))
            }
        }
        if (color = d3_rgb_names.get(format)) {
            return rgb(color.r, color.g, color.b)
        }
        if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.substring(1), 16))) {
            if (format.length === 4) {
                r = (color & 3840) >> 4;
                r = r >> 4 | r;
                g = color & 240;
                g = g >> 4 | g;
                b = color & 15;
                b = b << 4 | b
            } else {
                if (format.length === 7) {
                    r = (color & 16711680) >> 16;
                    g = (color & 65280) >> 8;
                    b = color & 255
                }
            }
        }
        return rgb(r, g, b)
    }

    function d3_rgb_hsl(r, g, b) {
        var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
        if (d) {
            s = l < 0.5 ? d / (max + min) : d / (2 - max - min);
            if (r == max) {
                h = (g - b) / d + (g < b ? 6 : 0)
            } else {
                if (g == max) {
                    h = (b - r) / d + 2
                } else {
                    h = (r - g) / d + 4
                }
            }
            h *= 60
        } else {
            h = NaN;
            s = l > 0 && l < 1 ? 0 : h
        }
        return d3_hsl(h, s, l)
    }

    function d3_rgb_lab(r, g, b) {
        r = d3_rgb_xyz(r);
        g = d3_rgb_xyz(g);
        b = d3_rgb_xyz(b);
        var x = d3_xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / d3_lab_X), y = d3_xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / d3_lab_Y), z = d3_xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / d3_lab_Z);
        return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z))
    }

    function d3_rgb_xyz(r) {
        return (r /= 255) <= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4)
    }

    function d3_rgb_parseNumber(c) {
        var f = parseFloat(c);
        return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f
    }

    var d3_rgb_names = d3.map({
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
    });
    d3_rgb_names.forEach(function (key, value) {
        d3_rgb_names.set(key, d3_rgbNumber(value))
    });
    function d3_functor(v) {
        return typeof v === "function" ? v : function () {
            return v
        }
    }

    d3.functor = d3_functor;
    function d3_identity(d) {
        return d
    }

    d3.xhr = d3_xhrType(d3_identity);
    function d3_xhrType(response) {
        return function (url, mimeType, callback) {
            if (arguments.length === 2 && typeof mimeType === "function") {
                callback = mimeType, mimeType = null
            }
            return d3_xhr(url, mimeType, response, callback)
        }
    }

    function d3_xhr(url, mimeType, response, callback) {
        var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
        if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) {
            request = new XDomainRequest()
        }
        "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {
            request.readyState > 3 && respond()
        };
        function respond() {
            var status = request.status, result;
            if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
                try {
                    result = response.call(xhr, request)
                } catch (e) {
                    dispatch.error.call(xhr, e);
                    return
                }
                dispatch.load.call(xhr, result)
            } else {
                dispatch.error.call(xhr, request)
            }
        }

        request.onprogress = function (event) {
            var o = d3.event;
            d3.event = event;
            try {
                dispatch.progress.call(xhr, request)
            } finally {
                d3.event = o
            }
        };
        xhr.header = function (name, value) {
            name = (name + "").toLowerCase();
            if (arguments.length < 2) {
                return headers[name]
            }
            if (value == null) {
                delete headers[name]
            } else {
                headers[name] = value + ""
            }
            return xhr
        };
        xhr.mimeType = function (value) {
            if (!arguments.length) {
                return mimeType
            }
            mimeType = value == null ? null : value + "";
            return xhr
        };
        xhr.responseType = function (value) {
            if (!arguments.length) {
                return responseType
            }
            responseType = value;
            return xhr
        };
        xhr.response = function (value) {
            response = value;
            return xhr
        };
        ["get", "post"].forEach(function (method) {
            xhr[method] = function () {
                return xhr.send.apply(xhr, [method].concat(d3_array(arguments)))
            }
        });
        xhr.send = function (method, data, callback) {
            if (arguments.length === 2 && typeof data === "function") {
                callback = data, data = null
            }
            request.open(method, url, true);
            if (mimeType != null && !("accept" in headers)) {
                headers.accept = mimeType + ",*/*"
            }
            if (request.setRequestHeader) {
                for (var name in headers) {
                    request.setRequestHeader(name, headers[name])
                }
            }
            if (mimeType != null && request.overrideMimeType) {
                request.overrideMimeType(mimeType)
            }
            if (responseType != null) {
                request.responseType = responseType
            }
            if (callback != null) {
                xhr.on("error", callback).on("load", function (request) {
                    callback(null, request)
                })
            }
            dispatch.beforesend.call(xhr, request);
            request.send(data == null ? null : data);
            return xhr
        };
        xhr.abort = function () {
            request.abort();
            return xhr
        };
        d3.rebind(xhr, dispatch, "on");
        return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback))
    }

    function d3_xhr_fixCallback(callback) {
        return callback.length === 1 ? function (error, request) {
            callback(error == null ? request : null)
        } : callback
    }

    d3.dsv = function (delimiter, mimeType) {
        var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);

        function dsv(url, row, callback) {
            if (arguments.length < 3) {
                callback = row, row = null
            }
            var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
            xhr.row = function (_) {
                return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row
            };
            return xhr
        }

        function response(request) {
            return dsv.parse(request.responseText)
        }

        function typedResponse(f) {
            return function (request) {
                return dsv.parse(request.responseText, f)
            }
        }

        dsv.parse = function (text, f) {
            var o;
            return dsv.parseRows(text, function (row, i) {
                if (o) {
                    return o(row, i - 1)
                }
                var a = new Function("d", "return {" + row.map(function (name, i) {
                        return JSON.stringify(name) + ": d[" + i + "]"
                    }).join(",") + "}");
                o = f ? function (row, i) {
                    return f(a(row), i)
                } : a
            })
        };
        dsv.parseRows = function (text, f) {
            var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;

            function token() {
                if (I >= N) {
                    return EOF
                }
                if (eol) {
                    return eol = false, EOL
                }
                var j = I;
                if (text.charCodeAt(j) === 34) {
                    var i = j;
                    while (i++ < N) {
                        if (text.charCodeAt(i) === 34) {
                            if (text.charCodeAt(i + 1) !== 34) {
                                break
                            }
                            ++i
                        }
                    }
                    I = i + 2;
                    var c = text.charCodeAt(i + 1);
                    if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(i + 2) === 10) {
                            ++I
                        }
                    } else {
                        if (c === 10) {
                            eol = true
                        }
                    }
                    return text.substring(j + 1, i).replace(/""/g, '"')
                }
                while (I < N) {
                    var c = text.charCodeAt(I++), k = 1;
                    if (c === 10) {
                        eol = true
                    } else {
                        if (c === 13) {
                            eol = true;
                            if (text.charCodeAt(I) === 10) {
                                ++I, ++k
                            }
                        } else {
                            if (c !== delimiterCode) {
                                continue
                            }
                        }
                    }
                    return text.substring(j, I - k)
                }
                return text.substring(j)
            }

            while ((t = token()) !== EOF) {
                var a = [];
                while (t !== EOL && t !== EOF) {
                    a.push(t);
                    t = token()
                }
                if (f && !(a = f(a, n++))) {
                    continue
                }
                rows.push(a)
            }
            return rows
        };
        dsv.format = function (rows) {
            if (Array.isArray(rows[0])) {
                return dsv.formatRows(rows)
            }
            var fieldSet = new d3_Set(), fields = [];
            rows.forEach(function (row) {
                for (var field in row) {
                    if (!fieldSet.has(field)) {
                        fields.push(fieldSet.add(field))
                    }
                }
            });
            return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
                return fields.map(function (field) {
                    return formatValue(row[field])
                }).join(delimiter)
            })).join("\n")
        };
        dsv.formatRows = function (rows) {
            return rows.map(formatRow).join("\n")
        };
        function formatRow(row) {
            return row.map(formatValue).join(delimiter)
        }

        function formatValue(text) {
            return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text
        }

        return dsv
    };
    d3.csv = d3.dsv(",", "text/csv");
    d3.tsv = d3.dsv("	", "text/tab-separated-values");
    d3.touch = function (container, touches, identifier) {
        if (arguments.length < 3) {
            identifier = touches, touches = d3_eventSource().changedTouches
        }
        if (touches) {
            for (var i = 0, n = touches.length, touch; i < n; ++i) {
                if ((touch = touches[i]).identifier === identifier) {
                    return d3_mousePoint(container, touch)
                }
            }
        }
    };
    var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function (callback) {
            setTimeout(callback, 17)
        };
    d3.timer = function (callback, delay, then) {
        var n = arguments.length;
        if (n < 2) {
            delay = 0
        }
        if (n < 3) {
            then = Date.now()
        }
        var time = then + delay, timer = {c: callback, t: time, f: false, n: null};
        if (d3_timer_queueTail) {
            d3_timer_queueTail.n = timer
        } else {
            d3_timer_queueHead = timer
        }
        d3_timer_queueTail = timer;
        if (!d3_timer_interval) {
            d3_timer_timeout = clearTimeout(d3_timer_timeout);
            d3_timer_interval = 1;
            d3_timer_frame(d3_timer_step)
        }
    };
    function d3_timer_step() {
        var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
        if (delay > 24) {
            if (isFinite(delay)) {
                clearTimeout(d3_timer_timeout);
                d3_timer_timeout = setTimeout(d3_timer_step, delay)
            }
            d3_timer_interval = 0
        } else {
            d3_timer_interval = 1;
            d3_timer_frame(d3_timer_step)
        }
    }

    d3.timer.flush = function () {
        d3_timer_mark();
        d3_timer_sweep()
    };
    function d3_timer_mark() {
        var now = Date.now();
        d3_timer_active = d3_timer_queueHead;
        while (d3_timer_active) {
            if (now >= d3_timer_active.t) {
                d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t)
            }
            d3_timer_active = d3_timer_active.n
        }
        return now
    }

    function d3_timer_sweep() {
        var t0, t1 = d3_timer_queueHead, time = Infinity;
        while (t1) {
            if (t1.f) {
                t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n
            } else {
                if (t1.t < time) {
                    time = t1.t
                }
                t1 = (t0 = t1).n
            }
        }
        d3_timer_queueTail = t0;
        return time
    }

    function d3_format_precision(x, p) {
        return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1)
    }

    d3.round = function (x, n) {
        return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x)
    };
    var d3_formatPrefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"].map(d3_formatPrefix);
    d3.formatPrefix = function (value, precision) {
        var i = 0;
        if (value) {
            if (value < 0) {
                value *= -1
            }
            if (precision) {
                value = d3.round(value, d3_format_precision(value, precision))
            }
            i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
            i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3))
        }
        return d3_formatPrefixes[8 + i / 3]
    };
    function d3_formatPrefix(d, i) {
        var k = Math.pow(10, abs(8 - i) * 3);
        return {
            scale: i > 8 ? function (d) {
                return d / k
            } : function (d) {
                return d * k
            }, symbol: d
        }
    }

    function d3_locale_numberFormat(locale) {
        var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping ? function (value) {
            var i = value.length, t = [], j = 0, g = locale_grouping[0];
            while (i > 0 && g > 0) {
                t.push(value.substring(i -= g, i + g));
                g = locale_grouping[j = (j + 1) % locale_grouping.length]
            }
            return t.reverse().join(locale_thousands)
        } : d3_identity;
        return function (specifier) {
            var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false;
            if (precision) {
                precision = +precision.substring(1)
            }
            if (zfill || fill === "0" && align === "=") {
                zfill = fill = "0";
                align = "=";
                if (comma) {
                    width -= Math.floor((width - 1) / 4)
                }
            }
            switch (type) {
                case"n":
                    comma = true;
                    type = "g";
                    break;
                case"%":
                    scale = 100;
                    suffix = "%";
                    type = "f";
                    break;
                case"p":
                    scale = 100;
                    suffix = "%";
                    type = "r";
                    break;
                case"b":
                case"o":
                case"x":
                case"X":
                    if (symbol === "#") {
                        prefix = "0" + type.toLowerCase()
                    }
                case"c":
                case"d":
                    integer = true;
                    precision = 0;
                    break;
                case"s":
                    scale = -1;
                    type = "r";
                    break
            }
            if (symbol === "$") {
                prefix = locale_currency[0], suffix = locale_currency[1]
            }
            if (type == "r" && !precision) {
                type = "g"
            }
            if (precision != null) {
                if (type == "g") {
                    precision = Math.max(1, Math.min(21, precision))
                } else {
                    if (type == "e" || type == "f") {
                        precision = Math.max(0, Math.min(20, precision))
                    }
                }
            }
            type = d3_format_types.get(type) || d3_format_typeDefault;
            var zcomma = zfill && comma;
            return function (value) {
                var fullSuffix = suffix;
                if (integer && value % 1) {
                    return ""
                }
                var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign;
                if (scale < 0) {
                    var unit = d3.formatPrefix(value, precision);
                    value = unit.scale(value);
                    fullSuffix = unit.symbol + suffix
                } else {
                    value *= scale
                }
                value = type(value, precision);
                var i = value.lastIndexOf("."), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? "" : locale_decimal + value.substring(i + 1);
                if (!zfill && comma) {
                    before = formatGroup(before)
                }
                var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
                if (zcomma) {
                    before = formatGroup(padding + before)
                }
                negative += prefix;
                value = before + after;
                return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix
            }
        }
    }

    var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
    var d3_format_types = d3.map({
        b: function (x) {
            return x.toString(2)
        }, c: function (x) {
            return String.fromCharCode(x)
        }, o: function (x) {
            return x.toString(8)
        }, x: function (x) {
            return x.toString(16)
        }, X: function (x) {
            return x.toString(16).toUpperCase()
        }, g: function (x, p) {
            return x.toPrecision(p)
        }, e: function (x, p) {
            return x.toExponential(p)
        }, f: function (x, p) {
            return x.toFixed(p)
        }, r: function (x, p) {
            return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))))
        }
    });

    function d3_format_typeDefault(x) {
        return x + ""
    }

    var d3_time = d3.time = {}, d3_date = Date;

    function d3_date_utc() {
        this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0])
    }

    d3_date_utc.prototype = {
        getDate: function () {
            return this._.getUTCDate()
        }, getDay: function () {
            return this._.getUTCDay()
        }, getFullYear: function () {
            return this._.getUTCFullYear()
        }, getHours: function () {
            return this._.getUTCHours()
        }, getMilliseconds: function () {
            return this._.getUTCMilliseconds()
        }, getMinutes: function () {
            return this._.getUTCMinutes()
        }, getMonth: function () {
            return this._.getUTCMonth()
        }, getSeconds: function () {
            return this._.getUTCSeconds()
        }, getTime: function () {
            return this._.getTime()
        }, getTimezoneOffset: function () {
            return 0
        }, valueOf: function () {
            return this._.valueOf()
        }, setDate: function () {
            d3_time_prototype.setUTCDate.apply(this._, arguments)
        }, setDay: function () {
            d3_time_prototype.setUTCDay.apply(this._, arguments)
        }, setFullYear: function () {
            d3_time_prototype.setUTCFullYear.apply(this._, arguments)
        }, setHours: function () {
            d3_time_prototype.setUTCHours.apply(this._, arguments)
        }, setMilliseconds: function () {
            d3_time_prototype.setUTCMilliseconds.apply(this._, arguments)
        }, setMinutes: function () {
            d3_time_prototype.setUTCMinutes.apply(this._, arguments)
        }, setMonth: function () {
            d3_time_prototype.setUTCMonth.apply(this._, arguments)
        }, setSeconds: function () {
            d3_time_prototype.setUTCSeconds.apply(this._, arguments)
        }, setTime: function () {
            d3_time_prototype.setTime.apply(this._, arguments)
        }
    };
    var d3_time_prototype = Date.prototype;

    function d3_time_interval(local, step, number) {
        function round(date) {
            var d0 = local(date), d1 = offset(d0, 1);
            return date - d0 < d1 - date ? d0 : d1
        }

        function ceil(date) {
            step(date = local(new d3_date(date - 1)), 1);
            return date
        }

        function offset(date, k) {
            step(date = new d3_date(+date), k);
            return date
        }

        function range(t0, t1, dt) {
            var time = ceil(t0), times = [];
            if (dt > 1) {
                while (time < t1) {
                    if (!(number(time) % dt)) {
                        times.push(new Date(+time))
                    }
                    step(time, 1)
                }
            } else {
                while (time < t1) {
                    times.push(new Date(+time)), step(time, 1)
                }
            }
            return times
        }

        function range_utc(t0, t1, dt) {
            try {
                d3_date = d3_date_utc;
                var utc = new d3_date_utc();
                utc._ = t0;
                return range(utc, t1, dt)
            } finally {
                d3_date = Date
            }
        }

        local.floor = local;
        local.round = round;
        local.ceil = ceil;
        local.offset = offset;
        local.range = range;
        var utc = local.utc = d3_time_interval_utc(local);
        utc.floor = utc;
        utc.round = d3_time_interval_utc(round);
        utc.ceil = d3_time_interval_utc(ceil);
        utc.offset = d3_time_interval_utc(offset);
        utc.range = range_utc;
        return local
    }

    function d3_time_interval_utc(method) {
        return function (date, k) {
            try {
                d3_date = d3_date_utc;
                var utc = new d3_date_utc();
                utc._ = date;
                return method(utc, k)._
            } finally {
                d3_date = Date
            }
        }
    }

    d3_time.year = d3_time_interval(function (date) {
        date = d3_time.day(date);
        date.setMonth(0, 1);
        return date
    }, function (date, offset) {
        date.setFullYear(date.getFullYear() + offset)
    }, function (date) {
        return date.getFullYear()
    });
    d3_time.years = d3_time.year.range;
    d3_time.years.utc = d3_time.year.utc.range;
    d3_time.day = d3_time_interval(function (date) {
        var day = new d3_date(2000, 0);
        day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        return day
    }, function (date, offset) {
        date.setDate(date.getDate() + offset)
    }, function (date) {
        return date.getDate() - 1
    });
    d3_time.days = d3_time.day.range;
    d3_time.days.utc = d3_time.day.utc.range;
    d3_time.dayOfYear = function (date) {
        var year = d3_time.year(date);
        return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 60000) / 86400000)
    };
    ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"].forEach(function (day, i) {
        i = 7 - i;
        var interval = d3_time[day] = d3_time_interval(function (date) {
            (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
            return date
        }, function (date, offset) {
            date.setDate(date.getDate() + Math.floor(offset) * 7)
        }, function (date) {
            var day = d3_time.year(date).getDay();
            return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i)
        });
        d3_time[day + "s"] = interval.range;
        d3_time[day + "s"].utc = interval.utc.range;
        d3_time[day + "OfYear"] = function (date) {
            var day = d3_time.year(date).getDay();
            return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7)
        }
    });
    d3_time.week = d3_time.sunday;
    d3_time.weeks = d3_time.sunday.range;
    d3_time.weeks.utc = d3_time.sunday.utc.range;
    d3_time.weekOfYear = d3_time.sundayOfYear;
    function d3_locale_timeFormat(locale) {
        var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;

        function d3_time_format(template) {
            var n = template.length;

            function format(date) {
                var string = [], i = -1, j = 0, c, p, f;
                while (++i < n) {
                    if (template.charCodeAt(i) === 37) {
                        string.push(template.substring(j, i));
                        if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) {
                            c = template.charAt(++i)
                        }
                        if (f = d3_time_formats[c]) {
                            c = f(date, p == null ? c === "e" ? " " : "0" : p)
                        }
                        string.push(c);
                        j = i + 1
                    }
                }
                string.push(template.substring(j, i));
                return string.join("")
            }

            format.parse = function (string) {
                var d = {
                    y: 1900,
                    m: 0,
                    d: 1,
                    H: 0,
                    M: 0,
                    S: 0,
                    L: 0,
                    Z: null
                }, i = d3_time_parse(d, template, string, 0);
                if (i != string.length) {
                    return null
                }
                if ("p" in d) {
                    d.H = d.H % 12 + d.p * 12
                }
                var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
                if ("j" in d) {
                    date.setFullYear(d.y, 0, d.j)
                } else {
                    if ("w" in d && ("W" in d || "U" in d)) {
                        date.setFullYear(d.y, 0, 1);
                        date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7)
                    } else {
                        date.setFullYear(d.y, d.m, d.d)
                    }
                }
                date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);
                return localZ ? date._ : date
            };
            format.toString = function () {
                return template
            };
            return format
        }

        function d3_time_parse(date, template, string, j) {
            var c, p, t, i = 0, n = template.length, m = string.length;
            while (i < n) {
                if (j >= m) {
                    return -1
                }
                c = template.charCodeAt(i++);
                if (c === 37) {
                    t = template.charAt(i++);
                    p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
                    if (!p || (j = p(date, string, j)) < 0) {
                        return -1
                    }
                } else {
                    if (c != string.charCodeAt(j++)) {
                        return -1
                    }
                }
            }
            return j
        }

        d3_time_format.utc = function (template) {
            var local = d3_time_format(template);

            function format(date) {
                try {
                    d3_date = d3_date_utc;
                    var utc = new d3_date();
                    utc._ = date;
                    return local(utc)
                } finally {
                    d3_date = Date
                }
            }

            format.parse = function (string) {
                try {
                    d3_date = d3_date_utc;
                    var date = local.parse(string);
                    return date && date._
                } finally {
                    d3_date = Date
                }
            };
            format.toString = local.toString;
            return format
        };
        d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
        var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
        locale_periods.forEach(function (p, i) {
            d3_time_periodLookup.set(p.toLowerCase(), i)
        });
        var d3_time_formats = {
            a: function (d) {
                return locale_shortDays[d.getDay()]
            }, A: function (d) {
                return locale_days[d.getDay()]
            }, b: function (d) {
                return locale_shortMonths[d.getMonth()]
            }, B: function (d) {
                return locale_months[d.getMonth()]
            }, c: d3_time_format(locale_dateTime), d: function (d, p) {
                return d3_time_formatPad(d.getDate(), p, 2)
            }, e: function (d, p) {
                return d3_time_formatPad(d.getDate(), p, 2)
            }, H: function (d, p) {
                return d3_time_formatPad(d.getHours(), p, 2)
            }, I: function (d, p) {
                return d3_time_formatPad(d.getHours() % 12 || 12, p, 2)
            }, j: function (d, p) {
                return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3)
            }, L: function (d, p) {
                return d3_time_formatPad(d.getMilliseconds(), p, 3)
            }, m: function (d, p) {
                return d3_time_formatPad(d.getMonth() + 1, p, 2)
            }, M: function (d, p) {
                return d3_time_formatPad(d.getMinutes(), p, 2)
            }, p: function (d) {
                return locale_periods[+(d.getHours() >= 12)]
            }, S: function (d, p) {
                return d3_time_formatPad(d.getSeconds(), p, 2)
            }, U: function (d, p) {
                return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2)
            }, w: function (d) {
                return d.getDay()
            }, W: function (d, p) {
                return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2)
            }, x: d3_time_format(locale_date), X: d3_time_format(locale_time), y: function (d, p) {
                return d3_time_formatPad(d.getFullYear() % 100, p, 2)
            }, Y: function (d, p) {
                return d3_time_formatPad(d.getFullYear() % 10000, p, 4)
            }, Z: d3_time_zone, "%": function () {
                return "%"
            }
        };
        var d3_time_parsers = {
            a: d3_time_parseWeekdayAbbrev,
            A: d3_time_parseWeekday,
            b: d3_time_parseMonthAbbrev,
            B: d3_time_parseMonth,
            c: d3_time_parseLocaleFull,
            d: d3_time_parseDay,
            e: d3_time_parseDay,
            H: d3_time_parseHour24,
            I: d3_time_parseHour24,
            j: d3_time_parseDayOfYear,
            L: d3_time_parseMilliseconds,
            m: d3_time_parseMonthNumber,
            M: d3_time_parseMinutes,
            p: d3_time_parseAmPm,
            S: d3_time_parseSeconds,
            U: d3_time_parseWeekNumberSunday,
            w: d3_time_parseWeekdayNumber,
            W: d3_time_parseWeekNumberMonday,
            x: d3_time_parseLocaleDate,
            X: d3_time_parseLocaleTime,
            y: d3_time_parseYear,
            Y: d3_time_parseFullYear,
            Z: d3_time_parseZone,
            "%": d3_time_parseLiteralPercent
        };

        function d3_time_parseWeekdayAbbrev(date, string, i) {
            d3_time_dayAbbrevRe.lastIndex = 0;
            var n = d3_time_dayAbbrevRe.exec(string.substring(i));
            return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1
        }

        function d3_time_parseWeekday(date, string, i) {
            d3_time_dayRe.lastIndex = 0;
            var n = d3_time_dayRe.exec(string.substring(i));
            return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1
        }

        function d3_time_parseMonthAbbrev(date, string, i) {
            d3_time_monthAbbrevRe.lastIndex = 0;
            var n = d3_time_monthAbbrevRe.exec(string.substring(i));
            return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1
        }

        function d3_time_parseMonth(date, string, i) {
            d3_time_monthRe.lastIndex = 0;
            var n = d3_time_monthRe.exec(string.substring(i));
            return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1
        }

        function d3_time_parseLocaleFull(date, string, i) {
            return d3_time_parse(date, d3_time_formats.c.toString(), string, i)
        }

        function d3_time_parseLocaleDate(date, string, i) {
            return d3_time_parse(date, d3_time_formats.x.toString(), string, i)
        }

        function d3_time_parseLocaleTime(date, string, i) {
            return d3_time_parse(date, d3_time_formats.X.toString(), string, i)
        }

        function d3_time_parseAmPm(date, string, i) {
            var n = d3_time_periodLookup.get(string.substring(i, i += 2).toLowerCase());
            return n == null ? -1 : (date.p = n, i)
        }

        return d3_time_format
    }

    var d3_time_formatPads = {"-": "", _: " ", "0": "0"}, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;

    function d3_time_formatPad(value, fill, width) {
        var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
        return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string)
    }

    function d3_time_formatRe(names) {
        return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i")
    }

    function d3_time_formatLookup(names) {
        var map = new d3_Map(), i = -1, n = names.length;
        while (++i < n) {
            map.set(names[i].toLowerCase(), i)
        }
        return map
    }

    function d3_time_parseWeekdayNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 1));
        return n ? (date.w = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseWeekNumberSunday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i));
        return n ? (date.U = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseWeekNumberMonday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i));
        return n ? (date.W = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseFullYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 4));
        return n ? (date.y = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1
    }

    function d3_time_parseZone(date, string, i) {
        return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5)) ? (date.Z = -string, i + 5) : -1
    }

    function d3_time_expandYear(d) {
        return d + (d > 68 ? 1900 : 2000)
    }

    function d3_time_parseMonthNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.m = n[0] - 1, i + n[0].length) : -1
    }

    function d3_time_parseDay(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.d = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseDayOfYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 3));
        return n ? (date.j = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseHour24(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.H = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseMinutes(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.M = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseSeconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 2));
        return n ? (date.S = +n[0], i + n[0].length) : -1
    }

    function d3_time_parseMilliseconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.substring(i, i + 3));
        return n ? (date.L = +n[0], i + n[0].length) : -1
    }

    function d3_time_zone(d) {
        var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = ~~(abs(z) / 60), zm = abs(z) % 60;
        return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2)
    }

    function d3_time_parseLiteralPercent(date, string, i) {
        d3_time_percentRe.lastIndex = 0;
        var n = d3_time_percentRe.exec(string.substring(i, i + 1));
        return n ? i + n[0].length : -1
    }

    function d3_time_formatMulti(formats) {
        var n = formats.length, i = -1;
        while (++i < n) {
            formats[i][0] = this(formats[i][0])
        }
        return function (date) {
            var i = 0, f = formats[i];
            while (!f[1](date)) {
                f = formats[++i]
            }
            return f[0](date)
        }
    }

    d3.locale = function (locale) {
        return {numberFormat: d3_locale_numberFormat(locale), timeFormat: d3_locale_timeFormat(locale)}
    };
    var d3_locale_enUS = d3.locale({
        decimal: ".",
        thousands: ",",
        grouping: [3],
        currency: ["$", ""],
        dateTime: "%a %b %e %X %Y",
        date: "%m/%d/%Y",
        time: "%H:%M:%S",
        periods: ["AM", "PM"],
        days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
    d3.format = d3_locale_enUS.numberFormat;
    d3.geo = {};
    function d3_adder() {
    }

    d3_adder.prototype = {
        s: 0, t: 0, add: function (y) {
            d3_adderSum(y, this.t, d3_adderTemp);
            d3_adderSum(d3_adderTemp.s, this.s, this);
            if (this.s) {
                this.t += d3_adderTemp.t
            } else {
                this.s = d3_adderTemp.t
            }
        }, reset: function () {
            this.s = this.t = 0
        }, valueOf: function () {
            return this.s
        }
    };
    var d3_adderTemp = new d3_adder();

    function d3_adderSum(a, b, o) {
        var x = o.s = a + b, bv = x - a, av = x - bv;
        o.t = a - av + (b - bv)
    }

    d3.geo.stream = function (object, listener) {
        if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
            d3_geo_streamObjectType[object.type](object, listener)
        } else {
            d3_geo_streamGeometry(object, listener)
        }
    };
    function d3_geo_streamGeometry(geometry, listener) {
        if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
            d3_geo_streamGeometryType[geometry.type](geometry, listener)
        }
    }

    var d3_geo_streamObjectType = {
        Feature: function (feature, listener) {
            d3_geo_streamGeometry(feature.geometry, listener)
        }, FeatureCollection: function (object, listener) {
            var features = object.features, i = -1, n = features.length;
            while (++i < n) {
                d3_geo_streamGeometry(features[i].geometry, listener)
            }
        }
    };
    var d3_geo_streamGeometryType = {
        Sphere: function (object, listener) {
            listener.sphere()
        }, Point: function (object, listener) {
            object = object.coordinates;
            listener.point(object[0], object[1], object[2])
        }, MultiPoint: function (object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n) {
                object = coordinates[i], listener.point(object[0], object[1], object[2])
            }
        }, LineString: function (object, listener) {
            d3_geo_streamLine(object.coordinates, listener, 0)
        }, MultiLineString: function (object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n) {
                d3_geo_streamLine(coordinates[i], listener, 0)
            }
        }, Polygon: function (object, listener) {
            d3_geo_streamPolygon(object.coordinates, listener)
        }, MultiPolygon: function (object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n) {
                d3_geo_streamPolygon(coordinates[i], listener)
            }
        }, GeometryCollection: function (object, listener) {
            var geometries = object.geometries, i = -1, n = geometries.length;
            while (++i < n) {
                d3_geo_streamGeometry(geometries[i], listener)
            }
        }
    };

    function d3_geo_streamLine(coordinates, listener, closed) {
        var i = -1, n = coordinates.length - closed, coordinate;
        listener.lineStart();
        while (++i < n) {
            coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2])
        }
        listener.lineEnd()
    }

    function d3_geo_streamPolygon(coordinates, listener) {
        var i = -1, n = coordinates.length;
        listener.polygonStart();
        while (++i < n) {
            d3_geo_streamLine(coordinates[i], listener, 1)
        }
        listener.polygonEnd()
    }

    d3.geo.area = function (object) {
        d3_geo_areaSum = 0;
        d3.geo.stream(object, d3_geo_area);
        return d3_geo_areaSum
    };
    var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
    var d3_geo_area = {
        sphere: function () {
            d3_geo_areaSum += 4 * π
        }, point: d3_noop, lineStart: d3_noop, lineEnd: d3_noop, polygonStart: function () {
            d3_geo_areaRingSum.reset();
            d3_geo_area.lineStart = d3_geo_areaRingStart
        }, polygonEnd: function () {
            var area = 2 * d3_geo_areaRingSum;
            d3_geo_areaSum += area < 0 ? 4 * π + area : area;
            d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop
        }
    };

    function d3_geo_areaRingStart() {
        var λ00, φ00, λ0, cosφ0, sinφ0;
        d3_geo_area.point = function (λ, φ) {
            d3_geo_area.point = nextPoint;
            λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ)
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            φ = φ * d3_radians / 2 + π / 4;
            var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
            d3_geo_areaRingSum.add(Math.atan2(v, u));
            λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ
        }

        d3_geo_area.lineEnd = function () {
            nextPoint(λ00, φ00)
        }
    }

    function d3_geo_cartesian(spherical) {
        var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
        return [cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ)]
    }

    function d3_geo_cartesianDot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
    }

    function d3_geo_cartesianCross(a, b) {
        return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]]
    }

    function d3_geo_cartesianAdd(a, b) {
        a[0] += b[0];
        a[1] += b[1];
        a[2] += b[2]
    }

    function d3_geo_cartesianScale(vector, k) {
        return [vector[0] * k, vector[1] * k, vector[2] * k]
    }

    function d3_geo_cartesianNormalize(d) {
        var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
        d[0] /= l;
        d[1] /= l;
        d[2] /= l
    }

    function d3_geo_spherical(cartesian) {
        return [Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2])]
    }

    function d3_geo_sphericalEqual(a, b) {
        return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε
    }

    d3.geo.bounds = function () {
        var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
        var bound = {
            point: point, lineStart: lineStart, lineEnd: lineEnd, polygonStart: function () {
                bound.point = ringPoint;
                bound.lineStart = ringStart;
                bound.lineEnd = ringEnd;
                dλSum = 0;
                d3_geo_area.polygonStart()
            }, polygonEnd: function () {
                d3_geo_area.polygonEnd();
                bound.point = point;
                bound.lineStart = lineStart;
                bound.lineEnd = lineEnd;
                if (d3_geo_areaRingSum < 0) {
                    λ0 = -(λ1 = 180), φ0 = -(φ1 = 90)
                } else {
                    if (dλSum > ε) {
                        φ1 = 90
                    } else {
                        if (dλSum < -ε) {
                            φ0 = -90
                        }
                    }
                }
                range[0] = λ0, range[1] = λ1
            }
        };

        function point(λ, φ) {
            ranges.push(range = [λ0 = λ, λ1 = λ]);
            if (φ < φ0) {
                φ0 = φ
            }
            if (φ > φ1) {
                φ1 = φ
            }
        }

        function linePoint(λ, φ) {
            var p = d3_geo_cartesian([λ * d3_radians, φ * d3_radians]);
            if (p0) {
                var normal = d3_geo_cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = d3_geo_cartesianCross(equatorial, normal);
                d3_geo_cartesianNormalize(inflection);
                inflection = d3_geo_spherical(inflection);
                var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
                if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
                    var φi = inflection[1] * d3_degrees;
                    if (φi > φ1) {
                        φ1 = φi
                    }
                } else {
                    if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
                        var φi = -inflection[1] * d3_degrees;
                        if (φi < φ0) {
                            φ0 = φi
                        }
                    } else {
                        if (φ < φ0) {
                            φ0 = φ
                        }
                        if (φ > φ1) {
                            φ1 = φ
                        }
                    }
                }
                if (antimeridian) {
                    if (λ < λ_) {
                        if (angle(λ0, λ) > angle(λ0, λ1)) {
                            λ1 = λ
                        }
                    } else {
                        if (angle(λ, λ1) > angle(λ0, λ1)) {
                            λ0 = λ
                        }
                    }
                } else {
                    if (λ1 >= λ0) {
                        if (λ < λ0) {
                            λ0 = λ
                        }
                        if (λ > λ1) {
                            λ1 = λ
                        }
                    } else {
                        if (λ > λ_) {
                            if (angle(λ0, λ) > angle(λ0, λ1)) {
                                λ1 = λ
                            }
                        } else {
                            if (angle(λ, λ1) > angle(λ0, λ1)) {
                                λ0 = λ
                            }
                        }
                    }
                }
            } else {
                point(λ, φ)
            }
            p0 = p, λ_ = λ
        }

        function lineStart() {
            bound.point = linePoint
        }

        function lineEnd() {
            range[0] = λ0, range[1] = λ1;
            bound.point = point;
            p0 = null
        }

        function ringPoint(λ, φ) {
            if (p0) {
                var dλ = λ - λ_;
                dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ
            } else {
                λ__ = λ, φ__ = φ
            }
            d3_geo_area.point(λ, φ);
            linePoint(λ, φ)
        }

        function ringStart() {
            d3_geo_area.lineStart()
        }

        function ringEnd() {
            ringPoint(λ__, φ__);
            d3_geo_area.lineEnd();
            if (abs(dλSum) > ε) {
                λ0 = -(λ1 = 180)
            }
            range[0] = λ0, range[1] = λ1;
            p0 = null
        }

        function angle(λ0, λ1) {
            return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1
        }

        function compareRanges(a, b) {
            return a[0] - b[0]
        }

        function withinRange(x, range) {
            return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x
        }

        return function (feature) {
            φ1 = λ1 = -(λ0 = φ0 = Infinity);
            ranges = [];
            d3.geo.stream(feature, bound);
            var n = ranges.length;
            if (n) {
                ranges.sort(compareRanges);
                for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {
                    b = ranges[i];
                    if (withinRange(b[0], a) || withinRange(b[1], a)) {
                        if (angle(a[0], b[1]) > angle(a[0], a[1])) {
                            a[1] = b[1]
                        }
                        if (angle(b[0], a[1]) > angle(a[0], a[1])) {
                            a[0] = b[0]
                        }
                    } else {
                        merged.push(a = b)
                    }
                }
                var best = -Infinity, dλ;
                for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
                    b = merged[i];
                    if ((dλ = angle(a[1], b[0])) > best) {
                        best = dλ, λ0 = b[0], λ1 = a[1]
                    }
                }
            }
            ranges = range = null;
            return λ0 === Infinity || φ0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[λ0, φ0], [λ1, φ1]]
        }
    }();
    d3.geo.centroid = function (object) {
        d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
        d3.geo.stream(object, d3_geo_centroid);
        var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
        if (m < ε2) {
            x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
            if (d3_geo_centroidW1 < ε) {
                x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0
            }
            m = x * x + y * y + z * z;
            if (m < ε2) {
                return [NaN, NaN]
            }
        }
        return [Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees]
    };
    var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
    var d3_geo_centroid = {
        sphere: d3_noop,
        point: d3_geo_centroidPoint,
        lineStart: d3_geo_centroidLineStart,
        lineEnd: d3_geo_centroidLineEnd,
        polygonStart: function () {
            d3_geo_centroid.lineStart = d3_geo_centroidRingStart
        },
        polygonEnd: function () {
            d3_geo_centroid.lineStart = d3_geo_centroidLineStart
        }
    };

    function d3_geo_centroidPoint(λ, φ) {
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians);
        d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ))
    }

    function d3_geo_centroidPointXYZ(x, y, z) {
        ++d3_geo_centroidW0;
        d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
        d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
        d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0
    }

    function d3_geo_centroidLineStart() {
        var x0, y0, z0;
        d3_geo_centroid.point = function (λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians);
            x0 = cosφ * Math.cos(λ);
            y0 = cosφ * Math.sin(λ);
            z0 = Math.sin(φ);
            d3_geo_centroid.point = nextPoint;
            d3_geo_centroidPointXYZ(x0, y0, z0)
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
            d3_geo_centroidW1 += w;
            d3_geo_centroidX1 += w * (x0 + (x0 = x));
            d3_geo_centroidY1 += w * (y0 + (y0 = y));
            d3_geo_centroidZ1 += w * (z0 + (z0 = z));
            d3_geo_centroidPointXYZ(x0, y0, z0)
        }
    }

    function d3_geo_centroidLineEnd() {
        d3_geo_centroid.point = d3_geo_centroidPoint
    }

    function d3_geo_centroidRingStart() {
        var λ00, φ00, x0, y0, z0;
        d3_geo_centroid.point = function (λ, φ) {
            λ00 = λ, φ00 = φ;
            d3_geo_centroid.point = nextPoint;
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians);
            x0 = cosφ * Math.cos(λ);
            y0 = cosφ * Math.sin(λ);
            z0 = Math.sin(φ);
            d3_geo_centroidPointXYZ(x0, y0, z0)
        };
        d3_geo_centroid.lineEnd = function () {
            nextPoint(λ00, φ00);
            d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
            d3_geo_centroid.point = d3_geo_centroidPoint
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
            d3_geo_centroidX2 += v * cx;
            d3_geo_centroidY2 += v * cy;
            d3_geo_centroidZ2 += v * cz;
            d3_geo_centroidW1 += w;
            d3_geo_centroidX1 += w * (x0 + (x0 = x));
            d3_geo_centroidY1 += w * (y0 + (y0 = y));
            d3_geo_centroidZ1 += w * (z0 + (z0 = z));
            d3_geo_centroidPointXYZ(x0, y0, z0)
        }
    }

    function d3_true() {
        return true
    }

    function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
        var subject = [], clip = [];
        segments.forEach(function (segment) {
            if ((n = segment.length - 1) <= 0) {
                return
            }
            var n, p0 = segment[0], p1 = segment[n];
            if (d3_geo_sphericalEqual(p0, p1)) {
                listener.lineStart();
                for (var i = 0; i < n; ++i) {
                    listener.point((p0 = segment[i])[0], p0[1])
                }
                listener.lineEnd();
                return
            }
            var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
            a.o = b;
            subject.push(a);
            clip.push(b);
            a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
            b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
            a.o = b;
            subject.push(a);
            clip.push(b)
        });
        clip.sort(compare);
        d3_geo_clipPolygonLinkCircular(subject);
        d3_geo_clipPolygonLinkCircular(clip);
        if (!subject.length) {
            return
        }
        for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
            clip[i].e = entry = !entry
        }
        var start = subject[0], points, point;
        while (1) {
            var current = start, isSubject = true;
            while (current.v) {
                if ((current = current.n) === start) {
                    return
                }
            }
            points = current.z;
            listener.lineStart();
            do {
                current.v = current.o.v = true;
                if (current.e) {
                    if (isSubject) {
                        for (var i = 0, n = points.length; i < n; ++i) {
                            listener.point((point = points[i])[0], point[1])
                        }
                    } else {
                        interpolate(current.x, current.n.x, 1, listener)
                    }
                    current = current.n
                } else {
                    if (isSubject) {
                        points = current.p.z;
                        for (var i = points.length - 1; i >= 0; --i) {
                            listener.point((point = points[i])[0], point[1])
                        }
                    } else {
                        interpolate(current.x, current.p.x, -1, listener)
                    }
                    current = current.p
                }
                current = current.o;
                points = current.z;
                isSubject = !isSubject
            } while (!current.v);
            listener.lineEnd()
        }
    }

    function d3_geo_clipPolygonLinkCircular(array) {
        if (!(n = array.length)) {
            return
        }
        var n, i = 0, a = array[0], b;
        while (++i < n) {
            a.n = b = array[i];
            b.p = a;
            a = b
        }
        a.n = b = array[0];
        b.p = a
    }

    function d3_geo_clipPolygonIntersection(point, points, other, entry) {
        this.x = point;
        this.z = points;
        this.o = other;
        this.e = entry;
        this.v = false;
        this.n = this.p = null
    }

    function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
        return function (rotate, listener) {
            var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
            var clip = {
                point: point, lineStart: lineStart, lineEnd: lineEnd, polygonStart: function () {
                    clip.point = pointRing;
                    clip.lineStart = ringStart;
                    clip.lineEnd = ringEnd;
                    segments = [];
                    polygon = []
                }, polygonEnd: function () {
                    clip.point = point;
                    clip.lineStart = lineStart;
                    clip.lineEnd = lineEnd;
                    segments = d3.merge(segments);
                    var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
                    if (segments.length) {
                        if (!polygonStarted) {
                            listener.polygonStart(), polygonStarted = true
                        }
                        d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener)
                    } else {
                        if (clipStartInside) {
                            if (!polygonStarted) {
                                listener.polygonStart(), polygonStarted = true
                            }
                            listener.lineStart();
                            interpolate(null, null, 1, listener);
                            listener.lineEnd()
                        }
                    }
                    if (polygonStarted) {
                        listener.polygonEnd(), polygonStarted = false
                    }
                    segments = polygon = null
                }, sphere: function () {
                    listener.polygonStart();
                    listener.lineStart();
                    interpolate(null, null, 1, listener);
                    listener.lineEnd();
                    listener.polygonEnd()
                }
            };

            function point(λ, φ) {
                var point = rotate(λ, φ);
                if (pointVisible(λ = point[0], φ = point[1])) {
                    listener.point(λ, φ)
                }
            }

            function pointLine(λ, φ) {
                var point = rotate(λ, φ);
                line.point(point[0], point[1])
            }

            function lineStart() {
                clip.point = pointLine;
                line.lineStart()
            }

            function lineEnd() {
                clip.point = point;
                line.lineEnd()
            }

            var segments;
            var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;

            function pointRing(λ, φ) {
                ring.push([λ, φ]);
                var point = rotate(λ, φ);
                ringListener.point(point[0], point[1])
            }

            function ringStart() {
                ringListener.lineStart();
                ring = []
            }

            function ringEnd() {
                pointRing(ring[0][0], ring[0][1]);
                ringListener.lineEnd();
                var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
                ring.pop();
                polygon.push(ring);
                ring = null;
                if (!n) {
                    return
                }
                if (clean & 1) {
                    segment = ringSegments[0];
                    var n = segment.length - 1, i = -1, point;
                    if (n > 0) {
                        if (!polygonStarted) {
                            listener.polygonStart(), polygonStarted = true
                        }
                        listener.lineStart();
                        while (++i < n) {
                            listener.point((point = segment[i])[0], point[1])
                        }
                        listener.lineEnd()
                    }
                    return
                }
                if (n > 1 && clean & 2) {
                    ringSegments.push(ringSegments.pop().concat(ringSegments.shift()))
                }
                segments.push(ringSegments.filter(d3_geo_clipSegmentLength1))
            }

            return clip
        }
    }

    function d3_geo_clipSegmentLength1(segment) {
        return segment.length > 1
    }

    function d3_geo_clipBufferListener() {
        var lines = [], line;
        return {
            lineStart: function () {
                lines.push(line = [])
            }, point: function (λ, φ) {
                line.push([λ, φ])
            }, lineEnd: d3_noop, buffer: function () {
                var buffer = lines;
                lines = [];
                line = null;
                return buffer
            }, rejoin: function () {
                if (lines.length > 1) {
                    lines.push(lines.pop().concat(lines.shift()))
                }
            }
        }
    }

    function d3_geo_clipSort(a, b) {
        return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1])
    }

    function d3_geo_pointInPolygon(point, polygon) {
        var meridian = point[0], parallel = point[1], meridianNormal = [Math.sin(meridian), -Math.cos(meridian), 0], polarAngle = 0, winding = 0;
        d3_geo_areaRingSum.reset();
        for (var i = 0, n = polygon.length; i < n; ++i) {
            var ring = polygon[i], m = ring.length;
            if (!m) {
                continue
            }
            var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
            while (true) {
                if (j === m) {
                    j = 0
                }
                point = ring[j];
                var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
                d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
                polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
                if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
                    var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
                    d3_geo_cartesianNormalize(arc);
                    var intersection = d3_geo_cartesianCross(meridianNormal, arc);
                    d3_geo_cartesianNormalize(intersection);
                    var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
                    if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
                        winding += antimeridian ^ dλ >= 0 ? 1 : -1
                    }
                }
                if (!j++) {
                    break
                }
                λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point
            }
        }
        return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1
    }

    var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [-π, -π / 2]);

    function d3_geo_clipAntimeridianLine(listener) {
        var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
        return {
            lineStart: function () {
                listener.lineStart();
                clean = 1
            }, point: function (λ1, φ1) {
                var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
                if (abs(dλ - π) < ε) {
                    listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
                    listener.point(sλ0, φ0);
                    listener.lineEnd();
                    listener.lineStart();
                    listener.point(sλ1, φ0);
                    listener.point(λ1, φ0);
                    clean = 0
                } else {
                    if (sλ0 !== sλ1 && dλ >= π) {
                        if (abs(λ0 - sλ0) < ε) {
                            λ0 -= sλ0 * ε
                        }
                        if (abs(λ1 - sλ1) < ε) {
                            λ1 -= sλ1 * ε
                        }
                        φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
                        listener.point(sλ0, φ0);
                        listener.lineEnd();
                        listener.lineStart();
                        listener.point(sλ1, φ0);
                        clean = 0
                    }
                }
                listener.point(λ0 = λ1, φ0 = φ1);
                sλ0 = sλ1
            }, lineEnd: function () {
                listener.lineEnd();
                λ0 = φ0 = NaN
            }, clean: function () {
                return 2 - clean
            }
        }
    }

    function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
        var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
        return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2
    }

    function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
        var φ;
        if (from == null) {
            φ = direction * halfπ;
            listener.point(-π, φ);
            listener.point(0, φ);
            listener.point(π, φ);
            listener.point(π, 0);
            listener.point(π, -φ);
            listener.point(0, -φ);
            listener.point(-π, -φ);
            listener.point(-π, 0);
            listener.point(-π, φ)
        } else {
            if (abs(from[0] - to[0]) > ε) {
                var s = from[0] < to[0] ? π : -π;
                φ = direction * s / 2;
                listener.point(-s, φ);
                listener.point(0, φ);
                listener.point(s, φ)
            } else {
                listener.point(to[0], to[1])
            }
        }
    }

    function d3_geo_clipCircle(radius) {
        var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
        return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-π, radius - π]);
        function visible(λ, φ) {
            return Math.cos(λ) * Math.cos(φ) > cr
        }

        function clipLine(listener) {
            var point0, c0, v0, v00, clean;
            return {
                lineStart: function () {
                    v00 = v0 = false;
                    clean = 1
                }, point: function (λ, φ) {
                    var point1 = [λ, φ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
                    if (!point0 && (v00 = v0 = v)) {
                        listener.lineStart()
                    }
                    if (v !== v0) {
                        point2 = intersect(point0, point1);
                        if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
                            point1[0] += ε;
                            point1[1] += ε;
                            v = visible(point1[0], point1[1])
                        }
                    }
                    if (v !== v0) {
                        clean = 0;
                        if (v) {
                            listener.lineStart();
                            point2 = intersect(point1, point0);
                            listener.point(point2[0], point2[1])
                        } else {
                            point2 = intersect(point0, point1);
                            listener.point(point2[0], point2[1]);
                            listener.lineEnd()
                        }
                        point0 = point2
                    } else {
                        if (notHemisphere && point0 && smallRadius ^ v) {
                            var t;
                            if (!(c & c0) && (t = intersect(point1, point0, true))) {
                                clean = 0;
                                if (smallRadius) {
                                    listener.lineStart();
                                    listener.point(t[0][0], t[0][1]);
                                    listener.point(t[1][0], t[1][1]);
                                    listener.lineEnd()
                                } else {
                                    listener.point(t[1][0], t[1][1]);
                                    listener.lineEnd();
                                    listener.lineStart();
                                    listener.point(t[0][0], t[0][1])
                                }
                            }
                        }
                    }
                    if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
                        listener.point(point1[0], point1[1])
                    }
                    point0 = point1, v0 = v, c0 = c
                }, lineEnd: function () {
                    if (v0) {
                        listener.lineEnd()
                    }
                    point0 = null
                }, clean: function () {
                    return clean | (v00 && v0) << 1
                }
            }
        }

        function intersect(a, b, two) {
            var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
            var n1 = [1, 0, 0], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
            if (!determinant) {
                return !two && a
            }
            var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
            d3_geo_cartesianAdd(A, B);
            var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
            if (t2 < 0) {
                return
            }
            var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
            d3_geo_cartesianAdd(q, A);
            q = d3_geo_spherical(q);
            if (!two) {
                return q
            }
            var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
            if (λ1 < λ0) {
                z = λ0, λ0 = λ1, λ1 = z
            }
            var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
            if (!polar && φ1 < φ0) {
                z = φ0, φ0 = φ1, φ1 = z
            }
            if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
                var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
                d3_geo_cartesianAdd(q1, A);
                return [q, d3_geo_spherical(q1)]
            }
        }

        function code(λ, φ) {
            var r = smallRadius ? radius : π - radius, code = 0;
            if (λ < -r) {
                code |= 1
            } else {
                if (λ > r) {
                    code |= 2
                }
            }
            if (φ < -r) {
                code |= 4
            } else {
                if (φ > r) {
                    code |= 8
                }
            }
            return code
        }
    }

    function d3_geom_clipLine(x0, y0, x1, y1) {
        return function (line) {
            var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
            r = x0 - ax;
            if (!dx && r > 0) {
                return
            }
            r /= dx;
            if (dx < 0) {
                if (r < t0) {
                    return
                }
                if (r < t1) {
                    t1 = r
                }
            } else {
                if (dx > 0) {
                    if (r > t1) {
                        return
                    }
                    if (r > t0) {
                        t0 = r
                    }
                }
            }
            r = x1 - ax;
            if (!dx && r < 0) {
                return
            }
            r /= dx;
            if (dx < 0) {
                if (r > t1) {
                    return
                }
                if (r > t0) {
                    t0 = r
                }
            } else {
                if (dx > 0) {
                    if (r < t0) {
                        return
                    }
                    if (r < t1) {
                        t1 = r
                    }
                }
            }
            r = y0 - ay;
            if (!dy && r > 0) {
                return
            }
            r /= dy;
            if (dy < 0) {
                if (r < t0) {
                    return
                }
                if (r < t1) {
                    t1 = r
                }
            } else {
                if (dy > 0) {
                    if (r > t1) {
                        return
                    }
                    if (r > t0) {
                        t0 = r
                    }
                }
            }
            r = y1 - ay;
            if (!dy && r < 0) {
                return
            }
            r /= dy;
            if (dy < 0) {
                if (r > t1) {
                    return
                }
                if (r > t0) {
                    t0 = r
                }
            } else {
                if (dy > 0) {
                    if (r < t0) {
                        return
                    }
                    if (r < t1) {
                        t1 = r
                    }
                }
            }
            if (t0 > 0) {
                line.a = {x: ax + t0 * dx, y: ay + t0 * dy}
            }
            if (t1 < 1) {
                line.b = {x: ax + t1 * dx, y: ay + t1 * dy}
            }
            return line
        }
    }

    var d3_geo_clipExtentMAX = 1000000000;
    d3.geo.clipExtent = function () {
        var x0, y0, x1, y1, stream, clip, clipExtent = {
            stream: function (output) {
                if (stream) {
                    stream.valid = false
                }
                stream = clip(output);
                stream.valid = true;
                return stream
            }, extent: function (_) {
                if (!arguments.length) {
                    return [[x0, y0], [x1, y1]]
                }
                clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
                if (stream) {
                    stream.valid = false, stream = null
                }
                return clipExtent
            }
        };
        return clipExtent.extent([[0, 0], [960, 500]])
    };
    function d3_geo_clipExtent(x0, y0, x1, y1) {
        return function (listener) {
            var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
            var clip = {
                point: point, lineStart: lineStart, lineEnd: lineEnd, polygonStart: function () {
                    listener = bufferListener;
                    segments = [];
                    polygon = [];
                    clean = true
                }, polygonEnd: function () {
                    listener = listener_;
                    segments = d3.merge(segments);
                    var clipStartInside = insidePolygon([x0, y1]), inside = clean && clipStartInside, visible = segments.length;
                    if (inside || visible) {
                        listener.polygonStart();
                        if (inside) {
                            listener.lineStart();
                            interpolate(null, null, 1, listener);
                            listener.lineEnd()
                        }
                        if (visible) {
                            d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener)
                        }
                        listener.polygonEnd()
                    }
                    segments = polygon = ring = null
                }
            };

            function insidePolygon(p) {
                var wn = 0, n = polygon.length, y = p[1];
                for (var i = 0; i < n; ++i) {
                    for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
                        b = v[j];
                        if (a[1] <= y) {
                            if (b[1] > y && d3_cross2d(a, b, p) > 0) {
                                ++wn
                            }
                        } else {
                            if (b[1] <= y && d3_cross2d(a, b, p) < 0) {
                                --wn
                            }
                        }
                        a = b
                    }
                }
                return wn !== 0
            }

            function interpolate(from, to, direction, listener) {
                var a = 0, a1 = 0;
                if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
                    do {
                        listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0)
                    } while ((a = (a + direction + 4) % 4) !== a1)
                } else {
                    listener.point(to[0], to[1])
                }
            }

            function pointVisible(x, y) {
                return x0 <= x && x <= x1 && y0 <= y && y <= y1
            }

            function point(x, y) {
                if (pointVisible(x, y)) {
                    listener.point(x, y)
                }
            }

            var x__, y__, v__, x_, y_, v_, first, clean;

            function lineStart() {
                clip.point = linePoint;
                if (polygon) {
                    polygon.push(ring = [])
                }
                first = true;
                v_ = false;
                x_ = y_ = NaN
            }

            function lineEnd() {
                if (segments) {
                    linePoint(x__, y__);
                    if (v__ && v_) {
                        bufferListener.rejoin()
                    }
                    segments.push(bufferListener.buffer())
                }
                clip.point = point;
                if (v_) {
                    listener.lineEnd()
                }
            }

            function linePoint(x, y) {
                x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
                y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
                var v = pointVisible(x, y);
                if (polygon) {
                    ring.push([x, y])
                }
                if (first) {
                    x__ = x, y__ = y, v__ = v;
                    first = false;
                    if (v) {
                        listener.lineStart();
                        listener.point(x, y)
                    }
                } else {
                    if (v && v_) {
                        listener.point(x, y)
                    } else {
                        var l = {a: {x: x_, y: y_}, b: {x: x, y: y}};
                        if (clipLine(l)) {
                            if (!v_) {
                                listener.lineStart();
                                listener.point(l.a.x, l.a.y)
                            }
                            listener.point(l.b.x, l.b.y);
                            if (!v) {
                                listener.lineEnd()
                            }
                            clean = false
                        } else {
                            if (v) {
                                listener.lineStart();
                                listener.point(x, y);
                                clean = false
                            }
                        }
                    }
                }
                x_ = x, y_ = y, v_ = v
            }

            return clip
        };
        function corner(p, direction) {
            return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2
        }

        function compare(a, b) {
            return comparePoints(a.x, b.x)
        }

        function comparePoints(a, b) {
            var ca = corner(a, 1), cb = corner(b, 1);
            return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0]
        }
    }

    function d3_geo_compose(a, b) {
        function compose(x, y) {
            return x = a(x, y), b(x[0], x[1])
        }

        if (a.invert && b.invert) {
            compose.invert = function (x, y) {
                return x = b.invert(x, y), x && a.invert(x[0], x[1])
            }
        }
        return compose
    }

    function d3_geo_conic(projectAt) {
        var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
        p.parallels = function (_) {
            if (!arguments.length) {
                return [φ0 / π * 180, φ1 / π * 180]
            }
            return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180)
        };
        return p
    }

    function d3_geo_conicEqualArea(φ0, φ1) {
        var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;

        function forward(λ, φ) {
            var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
            return [ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ)]
        }

        forward.invert = function (x, y) {
            var ρ0_y = ρ0 - y;
            return [Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n))]
        };
        return forward
    }

    (d3.geo.conicEqualArea = function () {
        return d3_geo_conic(d3_geo_conicEqualArea)
    }).raw = d3_geo_conicEqualArea;
    d3.geo.albers = function () {
        return d3.geo.conicEqualArea().rotate([96, 0]).center([-0.6, 38.7]).parallels([29.5, 45.5]).scale(1070)
    };
    d3.geo.albersUsa = function () {
        var lower48 = d3.geo.albers();
        var alaska = d3.geo.conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]);
        var hawaii = d3.geo.conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]);
        var point, pointStream = {
            point: function (x, y) {
                point = [x, y]
            }
        }, lower48Point, alaskaPoint, hawaiiPoint;

        function albersUsa(coordinates) {
            var x = coordinates[0], y = coordinates[1];
            point = null;
            (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
            return point
        }

        albersUsa.invert = function (coordinates) {
            var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
            return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates)
        };
        albersUsa.stream = function (stream) {
            var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
            return {
                point: function (x, y) {
                    lower48Stream.point(x, y);
                    alaskaStream.point(x, y);
                    hawaiiStream.point(x, y)
                }, sphere: function () {
                    lower48Stream.sphere();
                    alaskaStream.sphere();
                    hawaiiStream.sphere()
                }, lineStart: function () {
                    lower48Stream.lineStart();
                    alaskaStream.lineStart();
                    hawaiiStream.lineStart()
                }, lineEnd: function () {
                    lower48Stream.lineEnd();
                    alaskaStream.lineEnd();
                    hawaiiStream.lineEnd()
                }, polygonStart: function () {
                    lower48Stream.polygonStart();
                    alaskaStream.polygonStart();
                    hawaiiStream.polygonStart()
                }, polygonEnd: function () {
                    lower48Stream.polygonEnd();
                    alaskaStream.polygonEnd();
                    hawaiiStream.polygonEnd()
                }
            }
        };
        albersUsa.precision = function (_) {
            if (!arguments.length) {
                return lower48.precision()
            }
            lower48.precision(_);
            alaska.precision(_);
            hawaii.precision(_);
            return albersUsa
        };
        albersUsa.scale = function (_) {
            if (!arguments.length) {
                return lower48.scale()
            }
            lower48.scale(_);
            alaska.scale(_ * 0.35);
            hawaii.scale(_);
            return albersUsa.translate(lower48.translate())
        };
        albersUsa.translate = function (_) {
            if (!arguments.length) {
                return lower48.translate()
            }
            var k = lower48.scale(), x = +_[0], y = +_[1];
            lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream).point;
            alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + ε, y + 0.12 * k + ε], [x - 0.214 * k - ε, y + 0.234 * k - ε]]).stream(pointStream).point;
            hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + ε, y + 0.166 * k + ε], [x - 0.115 * k - ε, y + 0.234 * k - ε]]).stream(pointStream).point;
            return albersUsa
        };
        return albersUsa.scale(1070)
    };
    var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
        point: d3_noop,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: function () {
            d3_geo_pathAreaPolygon = 0;
            d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart
        },
        polygonEnd: function () {
            d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
            d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2)
        }
    };

    function d3_geo_pathAreaRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathArea.point = function (x, y) {
            d3_geo_pathArea.point = nextPoint;
            x00 = x0 = x, y00 = y0 = y
        };
        function nextPoint(x, y) {
            d3_geo_pathAreaPolygon += y0 * x - x0 * y;
            x0 = x, y0 = y
        }

        d3_geo_pathArea.lineEnd = function () {
            nextPoint(x00, y00)
        }
    }

    var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
    var d3_geo_pathBounds = {
        point: d3_geo_pathBoundsPoint,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
    };

    function d3_geo_pathBoundsPoint(x, y) {
        if (x < d3_geo_pathBoundsX0) {
            d3_geo_pathBoundsX0 = x
        }
        if (x > d3_geo_pathBoundsX1) {
            d3_geo_pathBoundsX1 = x
        }
        if (y < d3_geo_pathBoundsY0) {
            d3_geo_pathBoundsY0 = y
        }
        if (y > d3_geo_pathBoundsY1) {
            d3_geo_pathBoundsY1 = y
        }
    }

    function d3_geo_pathBuffer() {
        var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
        var stream = {
            point: point, lineStart: function () {
                stream.point = pointLineStart
            }, lineEnd: lineEnd, polygonStart: function () {
                stream.lineEnd = lineEndPolygon
            }, polygonEnd: function () {
                stream.lineEnd = lineEnd;
                stream.point = point
            }, pointRadius: function (_) {
                pointCircle = d3_geo_pathBufferCircle(_);
                return stream
            }, result: function () {
                if (buffer.length) {
                    var result = buffer.join("");
                    buffer = [];
                    return result
                }
            }
        };

        function point(x, y) {
            buffer.push("M", x, ",", y, pointCircle)
        }

        function pointLineStart(x, y) {
            buffer.push("M", x, ",", y);
            stream.point = pointLine
        }

        function pointLine(x, y) {
            buffer.push("L", x, ",", y)
        }

        function lineEnd() {
            stream.point = point
        }

        function lineEndPolygon() {
            buffer.push("Z")
        }

        return stream
    }

    function d3_geo_pathBufferCircle(radius) {
        return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z"
    }

    var d3_geo_pathCentroid = {
        point: d3_geo_pathCentroidPoint,
        lineStart: d3_geo_pathCentroidLineStart,
        lineEnd: d3_geo_pathCentroidLineEnd,
        polygonStart: function () {
            d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart
        },
        polygonEnd: function () {
            d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
            d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
            d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd
        }
    };

    function d3_geo_pathCentroidPoint(x, y) {
        d3_geo_centroidX0 += x;
        d3_geo_centroidY0 += y;
        ++d3_geo_centroidZ0
    }

    function d3_geo_pathCentroidLineStart() {
        var x0, y0;
        d3_geo_pathCentroid.point = function (x, y) {
            d3_geo_pathCentroid.point = nextPoint;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y)
        };
        function nextPoint(x, y) {
            var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
            d3_geo_centroidX1 += z * (x0 + x) / 2;
            d3_geo_centroidY1 += z * (y0 + y) / 2;
            d3_geo_centroidZ1 += z;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y)
        }
    }

    function d3_geo_pathCentroidLineEnd() {
        d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint
    }

    function d3_geo_pathCentroidRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathCentroid.point = function (x, y) {
            d3_geo_pathCentroid.point = nextPoint;
            d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y)
        };
        function nextPoint(x, y) {
            var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
            d3_geo_centroidX1 += z * (x0 + x) / 2;
            d3_geo_centroidY1 += z * (y0 + y) / 2;
            d3_geo_centroidZ1 += z;
            z = y0 * x - x0 * y;
            d3_geo_centroidX2 += z * (x0 + x);
            d3_geo_centroidY2 += z * (y0 + y);
            d3_geo_centroidZ2 += z * 3;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y)
        }

        d3_geo_pathCentroid.lineEnd = function () {
            nextPoint(x00, y00)
        }
    }

    function d3_geo_pathContext(context) {
        var pointRadius = 4.5;
        var stream = {
            point: point, lineStart: function () {
                stream.point = pointLineStart
            }, lineEnd: lineEnd, polygonStart: function () {
                stream.lineEnd = lineEndPolygon
            }, polygonEnd: function () {
                stream.lineEnd = lineEnd;
                stream.point = point
            }, pointRadius: function (_) {
                pointRadius = _;
                return stream
            }, result: d3_noop
        };

        function point(x, y) {
            context.moveTo(x, y);
            context.arc(x, y, pointRadius, 0, τ)
        }

        function pointLineStart(x, y) {
            context.moveTo(x, y);
            stream.point = pointLine
        }

        function pointLine(x, y) {
            context.lineTo(x, y)
        }

        function lineEnd() {
            stream.point = point
        }

        function lineEndPolygon() {
            context.closePath()
        }

        return stream
    }

    function d3_geo_resample(project) {
        var δ2 = 0.5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;

        function resample(stream) {
            return (maxDepth ? resampleRecursive : resampleNone)(stream)
        }

        function resampleNone(stream) {
            return d3_geo_transformPoint(stream, function (x, y) {
                x = project(x, y);
                stream.point(x[0], x[1])
            })
        }

        function resampleRecursive(stream) {
            var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
            var resample = {
                point: point, lineStart: lineStart, lineEnd: lineEnd, polygonStart: function () {
                    stream.polygonStart();
                    resample.lineStart = ringStart
                }, polygonEnd: function () {
                    stream.polygonEnd();
                    resample.lineStart = lineStart
                }
            };

            function point(x, y) {
                x = project(x, y);
                stream.point(x[0], x[1])
            }

            function lineStart() {
                x0 = NaN;
                resample.point = linePoint;
                stream.lineStart()
            }

            function linePoint(λ, φ) {
                var c = d3_geo_cartesian([λ, φ]), p = project(λ, φ);
                resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
                stream.point(x0, y0)
            }

            function lineEnd() {
                resample.point = point;
                stream.lineEnd()
            }

            function ringStart() {
                lineStart();
                resample.point = ringPoint;
                resample.lineEnd = ringEnd
            }

            function ringPoint(λ, φ) {
                linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
                resample.point = linePoint
            }

            function ringEnd() {
                resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
                resample.lineEnd = lineEnd;
                lineEnd()
            }

            return resample
        }

        function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
            var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
            if (d2 > 4 * δ2 && depth--) {
                var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
                if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                    resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
                    stream.point(x2, y2);
                    resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream)
                }
            }
        }

        resample.precision = function (_) {
            if (!arguments.length) {
                return Math.sqrt(δ2)
            }
            maxDepth = (δ2 = _ * _) > 0 && 16;
            return resample
        };
        return resample
    }

    d3.geo.path = function () {
        var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;

        function path(object) {
            if (object) {
                if (typeof pointRadius === "function") {
                    contextStream.pointRadius(+pointRadius.apply(this, arguments))
                }
                if (!cacheStream || !cacheStream.valid) {
                    cacheStream = projectStream(contextStream)
                }
                d3.geo.stream(object, cacheStream)
            }
            return contextStream.result()
        }

        path.area = function (object) {
            d3_geo_pathAreaSum = 0;
            d3.geo.stream(object, projectStream(d3_geo_pathArea));
            return d3_geo_pathAreaSum
        };
        path.centroid = function (object) {
            d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
            d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
            return d3_geo_centroidZ2 ? [d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2] : d3_geo_centroidZ1 ? [d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1] : d3_geo_centroidZ0 ? [d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0] : [NaN, NaN]
        };
        path.bounds = function (object) {
            d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
            d3.geo.stream(object, projectStream(d3_geo_pathBounds));
            return [[d3_geo_pathBoundsX0, d3_geo_pathBoundsY0], [d3_geo_pathBoundsX1, d3_geo_pathBoundsY1]]
        };
        path.projection = function (_) {
            if (!arguments.length) {
                return projection
            }
            projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
            return reset()
        };
        path.context = function (_) {
            if (!arguments.length) {
                return context
            }
            contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
            if (typeof pointRadius !== "function") {
                contextStream.pointRadius(pointRadius)
            }
            return reset()
        };
        path.pointRadius = function (_) {
            if (!arguments.length) {
                return pointRadius
            }
            pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
            return path
        };
        function reset() {
            cacheStream = null;
            return path
        }

        return path.projection(d3.geo.albersUsa()).context(null)
    };
    function d3_geo_pathProjectStream(project) {
        var resample = d3_geo_resample(function (x, y) {
            return project([x * d3_degrees, y * d3_degrees])
        });
        return function (stream) {
            return d3_geo_projectionRadians(resample(stream))
        }
    }

    d3.geo.transform = function (methods) {
        return {
            stream: function (stream) {
                var transform = new d3_geo_transform(stream);
                for (var k in methods) {
                    transform[k] = methods[k]
                }
                return transform
            }
        }
    };
    function d3_geo_transform(stream) {
        this.stream = stream
    }

    d3_geo_transform.prototype = {
        point: function (x, y) {
            this.stream.point(x, y)
        }, sphere: function () {
            this.stream.sphere()
        }, lineStart: function () {
            this.stream.lineStart()
        }, lineEnd: function () {
            this.stream.lineEnd()
        }, polygonStart: function () {
            this.stream.polygonStart()
        }, polygonEnd: function () {
            this.stream.polygonEnd()
        }
    };
    function d3_geo_transformPoint(stream, point) {
        return {
            point: point, sphere: function () {
                stream.sphere()
            }, lineStart: function () {
                stream.lineStart()
            }, lineEnd: function () {
                stream.lineEnd()
            }, polygonStart: function () {
                stream.polygonStart()
            }, polygonEnd: function () {
                stream.polygonEnd()
            }
        }
    }

    d3.geo.projection = d3_geo_projection;
    d3.geo.projectionMutator = d3_geo_projectionMutator;
    function d3_geo_projection(project) {
        return d3_geo_projectionMutator(function () {
            return project
        })()
    }

    function d3_geo_projectionMutator(projectAt) {
        var project, rotate, projectRotate, projectResample = d3_geo_resample(function (x, y) {
            x = project(x, y);
            return [x[0] * k + δx, δy - x[1] * k]
        }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;

        function projection(point) {
            point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
            return [point[0] * k + δx, δy - point[1] * k]
        }

        function invert(point) {
            point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
            return point && [point[0] * d3_degrees, point[1] * d3_degrees]
        }

        projection.stream = function (output) {
            if (stream) {
                stream.valid = false
            }
            stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
            stream.valid = true;
            return stream
        };
        projection.clipAngle = function (_) {
            if (!arguments.length) {
                return clipAngle
            }
            preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
            return invalidate()
        };
        projection.clipExtent = function (_) {
            if (!arguments.length) {
                return clipExtent
            }
            clipExtent = _;
            postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
            return invalidate()
        };
        projection.scale = function (_) {
            if (!arguments.length) {
                return k
            }
            k = +_;
            return reset()
        };
        projection.translate = function (_) {
            if (!arguments.length) {
                return [x, y]
            }
            x = +_[0];
            y = +_[1];
            return reset()
        };
        projection.center = function (_) {
            if (!arguments.length) {
                return [λ * d3_degrees, φ * d3_degrees]
            }
            λ = _[0] % 360 * d3_radians;
            φ = _[1] % 360 * d3_radians;
            return reset()
        };
        projection.rotate = function (_) {
            if (!arguments.length) {
                return [δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees]
            }
            δλ = _[0] % 360 * d3_radians;
            δφ = _[1] % 360 * d3_radians;
            δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
            return reset()
        };
        d3.rebind(projection, projectResample, "precision");
        function reset() {
            projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
            var center = project(λ, φ);
            δx = x - center[0] * k;
            δy = y + center[1] * k;
            return invalidate()
        }

        function invalidate() {
            if (stream) {
                stream.valid = false, stream = null
            }
            return projection
        }

        return function () {
            project = projectAt.apply(this, arguments);
            projection.invert = project.invert && invert;
            return reset()
        }
    }

    function d3_geo_projectionRadians(stream) {
        return d3_geo_transformPoint(stream, function (x, y) {
            stream.point(x * d3_radians, y * d3_radians)
        })
    }

    function d3_geo_equirectangular(λ, φ) {
        return [λ, φ]
    }

    (d3.geo.equirectangular = function () {
        return d3_geo_projection(d3_geo_equirectangular)
    }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
    d3.geo.rotation = function (rotate) {
        rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
        function forward(coordinates) {
            coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
            return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates
        }

        forward.invert = function (coordinates) {
            coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
            return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates
        };
        return forward
    };
    function d3_geo_identityRotation(λ, φ) {
        return [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ]
    }

    d3_geo_identityRotation.invert = d3_geo_equirectangular;
    function d3_geo_rotation(δλ, δφ, δγ) {
        return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation
    }

    function d3_geo_forwardRotationλ(δλ) {
        return function (λ, φ) {
            return λ += δλ, [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ]
        }
    }

    function d3_geo_rotationλ(δλ) {
        var rotation = d3_geo_forwardRotationλ(δλ);
        rotation.invert = d3_geo_forwardRotationλ(-δλ);
        return rotation
    }

    function d3_geo_rotationφγ(δφ, δγ) {
        var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);

        function rotation(λ, φ) {
            var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
            return [Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ)]
        }

        rotation.invert = function (λ, φ) {
            var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
            return [Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ)]
        };
        return rotation
    }

    d3.geo.circle = function () {
        var origin = [0, 0], angle, precision = 6, interpolate;

        function circle() {
            var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
            interpolate(null, null, 1, {
                point: function (x, y) {
                    ring.push(x = rotate(x, y));
                    x[0] *= d3_degrees, x[1] *= d3_degrees
                }
            });
            return {type: "Polygon", coordinates: [ring]}
        }

        circle.origin = function (x) {
            if (!arguments.length) {
                return origin
            }
            origin = x;
            return circle
        };
        circle.angle = function (x) {
            if (!arguments.length) {
                return angle
            }
            interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
            return circle
        };
        circle.precision = function (_) {
            if (!arguments.length) {
                return precision
            }
            interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
            return circle
        };
        return circle.angle(90)
    };
    function d3_geo_circleInterpolate(radius, precision) {
        var cr = Math.cos(radius), sr = Math.sin(radius);
        return function (from, to, direction, listener) {
            var step = direction * precision;
            if (from != null) {
                from = d3_geo_circleAngle(cr, from);
                to = d3_geo_circleAngle(cr, to);
                if (direction > 0 ? from < to : from > to) {
                    from += direction * τ
                }
            } else {
                from = radius + direction * τ;
                to = radius - 0.5 * step
            }
            for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
                listener.point((point = d3_geo_spherical([cr, -sr * Math.cos(t), -sr * Math.sin(t)]))[0], point[1])
            }
        }
    }

    function d3_geo_circleAngle(cr, point) {
        var a = d3_geo_cartesian(point);
        a[0] -= cr;
        d3_geo_cartesianNormalize(a);
        var angle = d3_acos(-a[1]);
        return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI)
    }

    d3.geo.distance = function (a, b) {
        var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
        return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ)
    };
    d3.geo.graticule = function () {
        var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;

        function graticule() {
            return {type: "MultiLineString", coordinates: lines()}
        }

        function lines() {
            return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
                return abs(x % DX) > ε
            }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
                return abs(y % DY) > ε
            }).map(y))
        }

        graticule.lines = function () {
            return lines().map(function (coordinates) {
                return {type: "LineString", coordinates: coordinates}
            })
        };
        graticule.outline = function () {
            return {
                type: "Polygon",
                coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
            }
        };
        graticule.extent = function (_) {
            if (!arguments.length) {
                return graticule.minorExtent()
            }
            return graticule.majorExtent(_).minorExtent(_)
        };
        graticule.majorExtent = function (_) {
            if (!arguments.length) {
                return [[X0, Y0], [X1, Y1]]
            }
            X0 = +_[0][0], X1 = +_[1][0];
            Y0 = +_[0][1], Y1 = +_[1][1];
            if (X0 > X1) {
                _ = X0, X0 = X1, X1 = _
            }
            if (Y0 > Y1) {
                _ = Y0, Y0 = Y1, Y1 = _
            }
            return graticule.precision(precision)
        };
        graticule.minorExtent = function (_) {
            if (!arguments.length) {
                return [[x0, y0], [x1, y1]]
            }
            x0 = +_[0][0], x1 = +_[1][0];
            y0 = +_[0][1], y1 = +_[1][1];
            if (x0 > x1) {
                _ = x0, x0 = x1, x1 = _
            }
            if (y0 > y1) {
                _ = y0, y0 = y1, y1 = _
            }
            return graticule.precision(precision)
        };
        graticule.step = function (_) {
            if (!arguments.length) {
                return graticule.minorStep()
            }
            return graticule.majorStep(_).minorStep(_)
        };
        graticule.majorStep = function (_) {
            if (!arguments.length) {
                return [DX, DY]
            }
            DX = +_[0], DY = +_[1];
            return graticule
        };
        graticule.minorStep = function (_) {
            if (!arguments.length) {
                return [dx, dy]
            }
            dx = +_[0], dy = +_[1];
            return graticule
        };
        graticule.precision = function (_) {
            if (!arguments.length) {
                return precision
            }
            precision = +_;
            x = d3_geo_graticuleX(y0, y1, 90);
            y = d3_geo_graticuleY(x0, x1, precision);
            X = d3_geo_graticuleX(Y0, Y1, 90);
            Y = d3_geo_graticuleY(X0, X1, precision);
            return graticule
        };
        return graticule.majorExtent([[-180, -90 + ε], [180, 90 - ε]]).minorExtent([[-180, -80 - ε], [180, 80 + ε]])
    };
    function d3_geo_graticuleX(y0, y1, dy) {
        var y = d3.range(y0, y1 - ε, dy).concat(y1);
        return function (x) {
            return y.map(function (y) {
                return [x, y]
            })
        }
    }

    function d3_geo_graticuleY(x0, x1, dx) {
        var x = d3.range(x0, x1 - ε, dx).concat(x1);
        return function (y) {
            return x.map(function (x) {
                return [x, y]
            })
        }
    }

    function d3_source(d) {
        return d.source
    }

    function d3_target(d) {
        return d.target
    }

    d3.geo.greatArc = function () {
        var source = d3_source, source_, target = d3_target, target_;

        function greatArc() {
            return {
                type: "LineString",
                coordinates: [source_ || source.apply(this, arguments), target_ || target.apply(this, arguments)]
            }
        }

        greatArc.distance = function () {
            return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments))
        };
        greatArc.source = function (_) {
            if (!arguments.length) {
                return source
            }
            source = _, source_ = typeof _ === "function" ? null : _;
            return greatArc
        };
        greatArc.target = function (_) {
            if (!arguments.length) {
                return target
            }
            target = _, target_ = typeof _ === "function" ? null : _;
            return greatArc
        };
        greatArc.precision = function () {
            return arguments.length ? greatArc : 0
        };
        return greatArc
    };
    d3.geo.interpolate = function (source, target) {
        return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians)
    };
    function d3_geo_interpolate(x0, y0, x1, y1) {
        var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
        var interpolate = d ? function (t) {
            var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
            return [Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees]
        } : function () {
            return [x0 * d3_degrees, y0 * d3_degrees]
        };
        interpolate.distance = d;
        return interpolate
    }

    d3.geo.length = function (object) {
        d3_geo_lengthSum = 0;
        d3.geo.stream(object, d3_geo_length);
        return d3_geo_lengthSum
    };
    var d3_geo_lengthSum;
    var d3_geo_length = {
        sphere: d3_noop,
        point: d3_noop,
        lineStart: d3_geo_lengthLineStart,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
    };

    function d3_geo_lengthLineStart() {
        var λ0, sinφ0, cosφ0;
        d3_geo_length.point = function (λ, φ) {
            λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
            d3_geo_length.point = nextPoint
        };
        d3_geo_length.lineEnd = function () {
            d3_geo_length.point = d3_geo_length.lineEnd = d3_noop
        };
        function nextPoint(λ, φ) {
            var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
            d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
            λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ
        }
    }

    function d3_geo_azimuthal(scale, angle) {
        function azimuthal(λ, φ) {
            var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
            return [k * cosφ * Math.sin(λ), k * Math.sin(φ)]
        }

        azimuthal.invert = function (x, y) {
            var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
            return [Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ)]
        };
        return azimuthal
    }

    var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function (cosλcosφ) {
        return Math.sqrt(2 / (1 + cosλcosφ))
    }, function (ρ) {
        return 2 * Math.asin(ρ / 2)
    });
    (d3.geo.azimuthalEqualArea = function () {
        return d3_geo_projection(d3_geo_azimuthalEqualArea)
    }).raw = d3_geo_azimuthalEqualArea;
    var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function (cosλcosφ) {
        var c = Math.acos(cosλcosφ);
        return c && c / Math.sin(c)
    }, d3_identity);
    (d3.geo.azimuthalEquidistant = function () {
        return d3_geo_projection(d3_geo_azimuthalEquidistant)
    }).raw = d3_geo_azimuthalEquidistant;
    function d3_geo_conicConformal(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), t = function (φ) {
            return Math.tan(π / 4 + φ / 2)
        }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
        if (!n) {
            return d3_geo_mercator
        }
        function forward(λ, φ) {
            if (F > 0) {
                if (φ < -halfπ + ε) {
                    φ = -halfπ + ε
                }
            } else {
                if (φ > halfπ - ε) {
                    φ = halfπ - ε
                }
            }
            var ρ = F / Math.pow(t(φ), n);
            return [ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ)]
        }

        forward.invert = function (x, y) {
            var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
            return [Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ]
        };
        return forward
    }

    (d3.geo.conicConformal = function () {
        return d3_geo_conic(d3_geo_conicConformal)
    }).raw = d3_geo_conicConformal;
    function d3_geo_conicEquidistant(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
        if (abs(n) < ε) {
            return d3_geo_equirectangular
        }
        function forward(λ, φ) {
            var ρ = G - φ;
            return [ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ)]
        }

        forward.invert = function (x, y) {
            var ρ0_y = G - y;
            return [Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y)]
        };
        return forward
    }

    (d3.geo.conicEquidistant = function () {
        return d3_geo_conic(d3_geo_conicEquidistant)
    }).raw = d3_geo_conicEquidistant;
    var d3_geo_gnomonic = d3_geo_azimuthal(function (cosλcosφ) {
        return 1 / cosλcosφ
    }, Math.atan);
    (d3.geo.gnomonic = function () {
        return d3_geo_projection(d3_geo_gnomonic)
    }).raw = d3_geo_gnomonic;
    function d3_geo_mercator(λ, φ) {
        return [λ, Math.log(Math.tan(π / 4 + φ / 2))]
    }

    d3_geo_mercator.invert = function (x, y) {
        return [x, 2 * Math.atan(Math.exp(y)) - halfπ]
    };
    function d3_geo_mercatorProjection(project) {
        var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
        m.scale = function () {
            var v = scale.apply(m, arguments);
            return v === m ? clipAuto ? m.clipExtent(null) : m : v
        };
        m.translate = function () {
            var v = translate.apply(m, arguments);
            return v === m ? clipAuto ? m.clipExtent(null) : m : v
        };
        m.clipExtent = function (_) {
            var v = clipExtent.apply(m, arguments);
            if (v === m) {
                if (clipAuto = _ == null) {
                    var k = π * scale(), t = translate();
                    clipExtent([[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]])
                }
            } else {
                if (clipAuto) {
                    v = null
                }
            }
            return v
        };
        return m.clipExtent(null)
    }

    (d3.geo.mercator = function () {
        return d3_geo_mercatorProjection(d3_geo_mercator)
    }).raw = d3_geo_mercator;
    var d3_geo_orthographic = d3_geo_azimuthal(function () {
        return 1
    }, Math.asin);
    (d3.geo.orthographic = function () {
        return d3_geo_projection(d3_geo_orthographic)
    }).raw = d3_geo_orthographic;
    var d3_geo_stereographic = d3_geo_azimuthal(function (cosλcosφ) {
        return 1 / (1 + cosλcosφ)
    }, function (ρ) {
        return 2 * Math.atan(ρ)
    });
    (d3.geo.stereographic = function () {
        return d3_geo_projection(d3_geo_stereographic)
    }).raw = d3_geo_stereographic;
    function d3_geo_transverseMercator(λ, φ) {
        return [Math.log(Math.tan(π / 4 + φ / 2)), -λ]
    }

    d3_geo_transverseMercator.invert = function (x, y) {
        return [-y, 2 * Math.atan(Math.exp(x)) - halfπ]
    };
    (d3.geo.transverseMercator = function () {
        var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
        projection.center = function (_) {
            return _ ? center([-_[1], _[0]]) : (_ = center(), [-_[1], _[0]])
        };
        projection.rotate = function (_) {
            return _ ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90])
        };
        return projection.rotate([0, 0])
    }).raw = d3_geo_transverseMercator;
    d3.geom = {};
    function d3_geom_pointX(d) {
        return d[0]
    }

    function d3_geom_pointY(d) {
        return d[1]
    }

    d3.geom.hull = function (vertices) {
        var x = d3_geom_pointX, y = d3_geom_pointY;
        if (arguments.length) {
            return hull(vertices)
        }
        function hull(data) {
            if (data.length < 3) {
                return []
            }
            var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
            for (i = 0; i < n; i++) {
                points.push([+fx.call(this, data[i], i), +fy.call(this, data[i], i), i])
            }
            points.sort(d3_geom_hullOrder);
            for (i = 0; i < n; i++) {
                flippedPoints.push([points[i][0], -points[i][1]])
            }
            var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
            var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
            for (i = upper.length - 1; i >= 0; --i) {
                polygon.push(data[points[upper[i]][2]])
            }
            for (i = +skipLeft; i < lower.length - skipRight; ++i) {
                polygon.push(data[points[lower[i]][2]])
            }
            return polygon
        }

        hull.x = function (_) {
            return arguments.length ? (x = _, hull) : x
        };
        hull.y = function (_) {
            return arguments.length ? (y = _, hull) : y
        };
        return hull
    };
    function d3_geom_hullUpper(points) {
        var n = points.length, hull = [0, 1], hs = 2;
        for (var i = 2; i < n; i++) {
            while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) {
                --hs
            }
            hull[hs++] = i
        }
        return hull.slice(0, hs)
    }

    function d3_geom_hullOrder(a, b) {
        return a[0] - b[0] || a[1] - b[1]
    }

    d3.geom.polygon = function (coordinates) {
        d3_subclass(coordinates, d3_geom_polygonPrototype);
        return coordinates
    };
    var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
    d3_geom_polygonPrototype.area = function () {
        var i = -1, n = this.length, a, b = this[n - 1], area = 0;
        while (++i < n) {
            a = b;
            b = this[i];
            area += a[1] * b[0] - a[0] * b[1]
        }
        return area * 0.5
    };
    d3_geom_polygonPrototype.centroid = function (k) {
        var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
        if (!arguments.length) {
            k = -1 / (6 * this.area())
        }
        while (++i < n) {
            a = b;
            b = this[i];
            c = a[0] * b[1] - b[0] * a[1];
            x += (a[0] + b[0]) * c;
            y += (a[1] + b[1]) * c
        }
        return [x * k, y * k]
    };
    d3_geom_polygonPrototype.clip = function (subject) {
        var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
        while (++i < n) {
            input = subject.slice();
            subject.length = 0;
            b = this[i];
            c = input[(m = input.length - closed) - 1];
            j = -1;
            while (++j < m) {
                d = input[j];
                if (d3_geom_polygonInside(d, a, b)) {
                    if (!d3_geom_polygonInside(c, a, b)) {
                        subject.push(d3_geom_polygonIntersect(c, d, a, b))
                    }
                    subject.push(d)
                } else {
                    if (d3_geom_polygonInside(c, a, b)) {
                        subject.push(d3_geom_polygonIntersect(c, d, a, b))
                    }
                }
                c = d
            }
            if (closed) {
                subject.push(subject[0])
            }
            a = b
        }
        return subject
    };
    function d3_geom_polygonInside(p, a, b) {
        return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0])
    }

    function d3_geom_polygonIntersect(c, d, a, b) {
        var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
        return [x1 + ua * x21, y1 + ua * y21]
    }

    function d3_geom_polygonClosed(coordinates) {
        var a = coordinates[0], b = coordinates[coordinates.length - 1];
        return !(a[0] - b[0] || a[1] - b[1])
    }

    var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];

    function d3_geom_voronoiBeach() {
        d3_geom_voronoiRedBlackNode(this);
        this.edge = this.site = this.circle = null
    }

    function d3_geom_voronoiCreateBeach(site) {
        var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
        beach.site = site;
        return beach
    }

    function d3_geom_voronoiDetachBeach(beach) {
        d3_geom_voronoiDetachCircle(beach);
        d3_geom_voronoiBeaches.remove(beach);
        d3_geom_voronoiBeachPool.push(beach);
        d3_geom_voronoiRedBlackNode(beach)
    }

    function d3_geom_voronoiRemoveBeach(beach) {
        var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
            x: x,
            y: y
        }, previous = beach.P, next = beach.N, disappearing = [beach];
        d3_geom_voronoiDetachBeach(beach);
        var lArc = previous;
        while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
            previous = lArc.P;
            disappearing.unshift(lArc);
            d3_geom_voronoiDetachBeach(lArc);
            lArc = previous
        }
        disappearing.unshift(lArc);
        d3_geom_voronoiDetachCircle(lArc);
        var rArc = next;
        while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
            next = rArc.N;
            disappearing.push(rArc);
            d3_geom_voronoiDetachBeach(rArc);
            rArc = next
        }
        disappearing.push(rArc);
        d3_geom_voronoiDetachCircle(rArc);
        var nArcs = disappearing.length, iArc;
        for (iArc = 1; iArc < nArcs; ++iArc) {
            rArc = disappearing[iArc];
            lArc = disappearing[iArc - 1];
            d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex)
        }
        lArc = disappearing[0];
        rArc = disappearing[nArcs - 1];
        rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc)
    }

    function d3_geom_voronoiAddBeach(site) {
        var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
        while (node) {
            dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
            if (dxl > ε) {
                node = node.L
            } else {
                dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
                if (dxr > ε) {
                    if (!node.R) {
                        lArc = node;
                        break
                    }
                    node = node.R
                } else {
                    if (dxl > -ε) {
                        lArc = node.P;
                        rArc = node
                    } else {
                        if (dxr > -ε) {
                            lArc = node;
                            rArc = node.N
                        } else {
                            lArc = rArc = node
                        }
                    }
                    break
                }
            }
        }
        var newArc = d3_geom_voronoiCreateBeach(site);
        d3_geom_voronoiBeaches.insert(lArc, newArc);
        if (!lArc && !rArc) {
            return
        }
        if (lArc === rArc) {
            d3_geom_voronoiDetachCircle(lArc);
            rArc = d3_geom_voronoiCreateBeach(lArc.site);
            d3_geom_voronoiBeaches.insert(newArc, rArc);
            newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
            d3_geom_voronoiAttachCircle(lArc);
            d3_geom_voronoiAttachCircle(rArc);
            return
        }
        if (!rArc) {
            newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
            return
        }
        d3_geom_voronoiDetachCircle(lArc);
        d3_geom_voronoiDetachCircle(rArc);
        var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
            x: (cy * hb - by * hc) / d + ax,
            y: (bx * hc - cx * hb) / d + ay
        };
        d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
        newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
        rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc)
    }

    function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
        var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
        if (!pby2) {
            return rfocx
        }
        var lArc = arc.P;
        if (!lArc) {
            return -Infinity
        }
        site = lArc.site;
        var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
        if (!plby2) {
            return lfocx
        }
        var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
        if (aby2) {
            return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx
        }
        return (rfocx + lfocx) / 2
    }

    function d3_geom_voronoiRightBreakPoint(arc, directrix) {
        var rArc = arc.N;
        if (rArc) {
            return d3_geom_voronoiLeftBreakPoint(rArc, directrix)
        }
        var site = arc.site;
        return site.y === directrix ? site.x : Infinity
    }

    function d3_geom_voronoiCell(site) {
        this.site = site;
        this.edges = []
    }

    d3_geom_voronoiCell.prototype.prepare = function () {
        var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
        while (iHalfEdge--) {
            edge = halfEdges[iHalfEdge].edge;
            if (!edge.b || !edge.a) {
                halfEdges.splice(iHalfEdge, 1)
            }
        }
        halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
        return halfEdges.length
    };
    function d3_geom_voronoiCloseCells(extent) {
        var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
        while (iCell--) {
            cell = cells[iCell];
            if (!cell || !cell.prepare()) {
                continue
            }
            halfEdges = cell.edges;
            nHalfEdges = halfEdges.length;
            iHalfEdge = 0;
            while (iHalfEdge < nHalfEdges) {
                end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
                start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
                if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
                    halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
                        x: x0,
                        y: abs(x2 - x0) < ε ? y2 : y1
                    } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
                        x: abs(y2 - y1) < ε ? x2 : x1,
                        y: y1
                    } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
                        x: x1,
                        y: abs(x2 - x1) < ε ? y2 : y0
                    } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
                        x: abs(y2 - y0) < ε ? x2 : x0,
                        y: y0
                    } : null), cell.site, null));
                    ++nHalfEdges
                }
            }
        }
    }

    function d3_geom_voronoiHalfEdgeOrder(a, b) {
        return b.angle - a.angle
    }

    function d3_geom_voronoiCircle() {
        d3_geom_voronoiRedBlackNode(this);
        this.x = this.y = this.arc = this.site = this.cy = null
    }

    function d3_geom_voronoiAttachCircle(arc) {
        var lArc = arc.P, rArc = arc.N;
        if (!lArc || !rArc) {
            return
        }
        var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
        if (lSite === rSite) {
            return
        }
        var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
        var d = 2 * (ax * cy - ay * cx);
        if (d >= -ε2) {
            return
        }
        var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
        var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
        circle.arc = arc;
        circle.site = cSite;
        circle.x = x + bx;
        circle.y = cy + Math.sqrt(x * x + y * y);
        circle.cy = cy;
        arc.circle = circle;
        var before = null, node = d3_geom_voronoiCircles._;
        while (node) {
            if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
                if (node.L) {
                    node = node.L
                } else {
                    before = node.P;
                    break
                }
            } else {
                if (node.R) {
                    node = node.R
                } else {
                    before = node;
                    break
                }
            }
        }
        d3_geom_voronoiCircles.insert(before, circle);
        if (!before) {
            d3_geom_voronoiFirstCircle = circle
        }
    }

    function d3_geom_voronoiDetachCircle(arc) {
        var circle = arc.circle;
        if (circle) {
            if (!circle.P) {
                d3_geom_voronoiFirstCircle = circle.N
            }
            d3_geom_voronoiCircles.remove(circle);
            d3_geom_voronoiCirclePool.push(circle);
            d3_geom_voronoiRedBlackNode(circle);
            arc.circle = null
        }
    }

    function d3_geom_voronoiClipEdges(extent) {
        var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
        while (i--) {
            e = edges[i];
            if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
                e.a = e.b = null;
                edges.splice(i, 1)
            }
        }
    }

    function d3_geom_voronoiConnectEdge(edge, extent) {
        var vb = edge.b;
        if (vb) {
            return true
        }
        var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
        if (ry === ly) {
            if (fx < x0 || fx >= x1) {
                return
            }
            if (lx > rx) {
                if (!va) {
                    va = {x: fx, y: y0}
                } else {
                    if (va.y >= y1) {
                        return
                    }
                }
                vb = {x: fx, y: y1}
            } else {
                if (!va) {
                    va = {x: fx, y: y1}
                } else {
                    if (va.y < y0) {
                        return
                    }
                }
                vb = {x: fx, y: y0}
            }
        } else {
            fm = (lx - rx) / (ry - ly);
            fb = fy - fm * fx;
            if (fm < -1 || fm > 1) {
                if (lx > rx) {
                    if (!va) {
                        va = {x: (y0 - fb) / fm, y: y0}
                    } else {
                        if (va.y >= y1) {
                            return
                        }
                    }
                    vb = {x: (y1 - fb) / fm, y: y1}
                } else {
                    if (!va) {
                        va = {x: (y1 - fb) / fm, y: y1}
                    } else {
                        if (va.y < y0) {
                            return
                        }
                    }
                    vb = {x: (y0 - fb) / fm, y: y0}
                }
            } else {
                if (ly < ry) {
                    if (!va) {
                        va = {x: x0, y: fm * x0 + fb}
                    } else {
                        if (va.x >= x1) {
                            return
                        }
                    }
                    vb = {x: x1, y: fm * x1 + fb}
                } else {
                    if (!va) {
                        va = {x: x1, y: fm * x1 + fb}
                    } else {
                        if (va.x < x0) {
                            return
                        }
                    }
                    vb = {x: x0, y: fm * x0 + fb}
                }
            }
        }
        edge.a = va;
        edge.b = vb;
        return true
    }

    function d3_geom_voronoiEdge(lSite, rSite) {
        this.l = lSite;
        this.r = rSite;
        this.a = this.b = null
    }

    function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, rSite);
        d3_geom_voronoiEdges.push(edge);
        if (va) {
            d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va)
        }
        if (vb) {
            d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb)
        }
        d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
        d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
        return edge
    }

    function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, null);
        edge.a = va;
        edge.b = vb;
        d3_geom_voronoiEdges.push(edge);
        return edge
    }

    function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
        if (!edge.a && !edge.b) {
            edge.a = vertex;
            edge.l = lSite;
            edge.r = rSite
        } else {
            if (edge.l === rSite) {
                edge.b = vertex
            } else {
                edge.a = vertex
            }
        }
    }

    function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
        var va = edge.a, vb = edge.b;
        this.edge = edge;
        this.site = lSite;
        this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y)
    }

    d3_geom_voronoiHalfEdge.prototype = {
        start: function () {
            return this.edge.l === this.site ? this.edge.a : this.edge.b
        }, end: function () {
            return this.edge.l === this.site ? this.edge.b : this.edge.a
        }
    };
    function d3_geom_voronoiRedBlackTree() {
        this._ = null
    }

    function d3_geom_voronoiRedBlackNode(node) {
        node.U = node.C = node.L = node.R = node.P = node.N = null
    }

    d3_geom_voronoiRedBlackTree.prototype = {
        insert: function (after, node) {
            var parent, grandpa, uncle;
            if (after) {
                node.P = after;
                node.N = after.N;
                if (after.N) {
                    after.N.P = node
                }
                after.N = node;
                if (after.R) {
                    after = after.R;
                    while (after.L) {
                        after = after.L
                    }
                    after.L = node
                } else {
                    after.R = node
                }
                parent = after
            } else {
                if (this._) {
                    after = d3_geom_voronoiRedBlackFirst(this._);
                    node.P = null;
                    node.N = after;
                    after.P = after.L = node;
                    parent = after
                } else {
                    node.P = node.N = null;
                    this._ = node;
                    parent = null
                }
            }
            node.L = node.R = null;
            node.U = parent;
            node.C = true;
            after = node;
            while (parent && parent.C) {
                grandpa = parent.U;
                if (parent === grandpa.L) {
                    uncle = grandpa.R;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa
                    } else {
                        if (after === parent.R) {
                            d3_geom_voronoiRedBlackRotateLeft(this, parent);
                            after = parent;
                            parent = after.U
                        }
                        parent.C = false;
                        grandpa.C = true;
                        d3_geom_voronoiRedBlackRotateRight(this, grandpa)
                    }
                } else {
                    uncle = grandpa.L;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa
                    } else {
                        if (after === parent.L) {
                            d3_geom_voronoiRedBlackRotateRight(this, parent);
                            after = parent;
                            parent = after.U
                        }
                        parent.C = false;
                        grandpa.C = true;
                        d3_geom_voronoiRedBlackRotateLeft(this, grandpa)
                    }
                }
                parent = after.U
            }
            this._.C = false
        }, remove: function (node) {
            if (node.N) {
                node.N.P = node.P
            }
            if (node.P) {
                node.P.N = node.N
            }
            node.N = node.P = null;
            var parent = node.U, sibling, left = node.L, right = node.R, next, red;
            if (!left) {
                next = right
            } else {
                if (!right) {
                    next = left
                } else {
                    next = d3_geom_voronoiRedBlackFirst(right)
                }
            }
            if (parent) {
                if (parent.L === node) {
                    parent.L = next
                } else {
                    parent.R = next
                }
            } else {
                this._ = next
            }
            if (left && right) {
                red = next.C;
                next.C = node.C;
                next.L = left;
                left.U = next;
                if (next !== right) {
                    parent = next.U;
                    next.U = node.U;
                    node = next.R;
                    parent.L = node;
                    next.R = right;
                    right.U = next
                } else {
                    next.U = parent;
                    parent = next;
                    node = next.R
                }
            } else {
                red = node.C;
                node = next
            }
            if (node) {
                node.U = parent
            }
            if (red) {
                return
            }
            if (node && node.C) {
                node.C = false;
                return
            }
            do {
                if (node === this._) {
                    break
                }
                if (node === parent.L) {
                    sibling = parent.R;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        d3_geom_voronoiRedBlackRotateLeft(this, parent);
                        sibling = parent.R
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.R || !sibling.R.C) {
                            sibling.L.C = false;
                            sibling.C = true;
                            d3_geom_voronoiRedBlackRotateRight(this, sibling);
                            sibling = parent.R
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.R.C = false;
                        d3_geom_voronoiRedBlackRotateLeft(this, parent);
                        node = this._;
                        break
                    }
                } else {
                    sibling = parent.L;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        d3_geom_voronoiRedBlackRotateRight(this, parent);
                        sibling = parent.L
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.L || !sibling.L.C) {
                            sibling.R.C = false;
                            sibling.C = true;
                            d3_geom_voronoiRedBlackRotateLeft(this, sibling);
                            sibling = parent.L
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.L.C = false;
                        d3_geom_voronoiRedBlackRotateRight(this, parent);
                        node = this._;
                        break
                    }
                }
                sibling.C = true;
                node = parent;
                parent = parent.U
            } while (!node.C);
            if (node) {
                node.C = false
            }
        }
    };
    function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
        var p = node, q = node.R, parent = p.U;
        if (parent) {
            if (parent.L === p) {
                parent.L = q
            } else {
                parent.R = q
            }
        } else {
            tree._ = q
        }
        q.U = parent;
        p.U = q;
        p.R = q.L;
        if (p.R) {
            p.R.U = p
        }
        q.L = p
    }

    function d3_geom_voronoiRedBlackRotateRight(tree, node) {
        var p = node, q = node.L, parent = p.U;
        if (parent) {
            if (parent.L === p) {
                parent.L = q
            } else {
                parent.R = q
            }
        } else {
            tree._ = q
        }
        q.U = parent;
        p.U = q;
        p.L = q.R;
        if (p.L) {
            p.L.U = p
        }
        q.R = p
    }

    function d3_geom_voronoiRedBlackFirst(node) {
        while (node.L) {
            node = node.L
        }
        return node
    }

    function d3_geom_voronoi(sites, bbox) {
        var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
        d3_geom_voronoiEdges = [];
        d3_geom_voronoiCells = new Array(sites.length);
        d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
        d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
        while (true) {
            circle = d3_geom_voronoiFirstCircle;
            if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
                if (site.x !== x0 || site.y !== y0) {
                    d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
                    d3_geom_voronoiAddBeach(site);
                    x0 = site.x, y0 = site.y
                }
                site = sites.pop()
            } else {
                if (circle) {
                    d3_geom_voronoiRemoveBeach(circle.arc)
                } else {
                    break
                }
            }
        }
        if (bbox) {
            d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox)
        }
        var diagram = {cells: d3_geom_voronoiCells, edges: d3_geom_voronoiEdges};
        d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
        return diagram
    }

    function d3_geom_voronoiVertexOrder(a, b) {
        return b.y - a.y || b.x - a.x
    }

    d3.geom.voronoi = function (points) {
        var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
        if (points) {
            return voronoi(points)
        }
        function voronoi(data) {
            var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
            d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {
                var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function (e) {
                    var s = e.start();
                    return [s.x, s.y]
                }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [[x0, y1], [x1, y1], [x1, y0], [x0, y0]] : [];
                polygon.point = data[i]
            });
            return polygons
        }

        function sites(data) {
            return data.map(function (d, i) {
                return {x: Math.round(fx(d, i) / ε) * ε, y: Math.round(fy(d, i) / ε) * ε, i: i}
            })
        }

        voronoi.links = function (data) {
            return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {
                return edge.l && edge.r
            }).map(function (edge) {
                return {source: data[edge.l.i], target: data[edge.r.i]}
            })
        };
        voronoi.triangles = function (data) {
            var triangles = [];
            d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {
                var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
                while (++j < m) {
                    e0 = e1;
                    s0 = s1;
                    e1 = edges[j].edge;
                    s1 = e1.l === site ? e1.r : e1.l;
                    if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
                        triangles.push([data[i], data[s0.i], data[s1.i]])
                    }
                }
            });
            return triangles
        };
        voronoi.x = function (_) {
            return arguments.length ? (fx = d3_functor(x = _), voronoi) : x
        };
        voronoi.y = function (_) {
            return arguments.length ? (fy = d3_functor(y = _), voronoi) : y
        };
        voronoi.clipExtent = function (_) {
            if (!arguments.length) {
                return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent
            }
            clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
            return voronoi
        };
        voronoi.size = function (_) {
            if (!arguments.length) {
                return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1]
            }
            return voronoi.clipExtent(_ && [[0, 0], _])
        };
        return voronoi
    };
    var d3_geom_voronoiClipExtent = [[-1000000, -1000000], [1000000, 1000000]];

    function d3_geom_voronoiTriangleArea(a, b, c) {
        return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y)
    }

    d3.geom.delaunay = function (vertices) {
        return d3.geom.voronoi().triangles(vertices)
    };
    d3.geom.quadtree = function (points, x1, y1, x2, y2) {
        var x = d3_geom_pointX, y = d3_geom_pointY, compat;
        if (compat = arguments.length) {
            x = d3_geom_quadtreeCompatX;
            y = d3_geom_quadtreeCompatY;
            if (compat === 3) {
                y2 = y1;
                x2 = x1;
                y1 = x1 = 0
            }
            return quadtree(points)
        }
        function quadtree(data) {
            var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
            if (x1 != null) {
                x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2
            } else {
                x2_ = y2_ = -(x1_ = y1_ = Infinity);
                xs = [], ys = [];
                n = data.length;
                if (compat) {
                    for (i = 0; i < n; ++i) {
                        d = data[i];
                        if (d.x < x1_) {
                            x1_ = d.x
                        }
                        if (d.y < y1_) {
                            y1_ = d.y
                        }
                        if (d.x > x2_) {
                            x2_ = d.x
                        }
                        if (d.y > y2_) {
                            y2_ = d.y
                        }
                        xs.push(d.x);
                        ys.push(d.y)
                    }
                } else {
                    for (i = 0; i < n; ++i) {
                        var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
                        if (x_ < x1_) {
                            x1_ = x_
                        }
                        if (y_ < y1_) {
                            y1_ = y_
                        }
                        if (x_ > x2_) {
                            x2_ = x_
                        }
                        if (y_ > y2_) {
                            y2_ = y_
                        }
                        xs.push(x_);
                        ys.push(y_)
                    }
                }
            }
            var dx = x2_ - x1_, dy = y2_ - y1_;
            if (dx > dy) {
                y2_ = y1_ + dx
            } else {
                x2_ = x1_ + dy
            }
            function insert(n, d, x, y, x1, y1, x2, y2) {
                if (isNaN(x) || isNaN(y)) {
                    return
                }
                if (n.leaf) {
                    var nx = n.x, ny = n.y;
                    if (nx != null) {
                        if (abs(nx - x) + abs(ny - y) < 0.01) {
                            insertChild(n, d, x, y, x1, y1, x2, y2)
                        } else {
                            var nPoint = n.point;
                            n.x = n.y = n.point = null;
                            insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
                            insertChild(n, d, x, y, x1, y1, x2, y2)
                        }
                    } else {
                        n.x = x, n.y = y, n.point = d
                    }
                } else {
                    insertChild(n, d, x, y, x1, y1, x2, y2)
                }
            }

            function insertChild(n, d, x, y, x1, y1, x2, y2) {
                var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
                n.leaf = false;
                n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
                if (right) {
                    x1 = sx
                } else {
                    x2 = sx
                }
                if (bottom) {
                    y1 = sy
                } else {
                    y2 = sy
                }
                insert(n, d, x, y, x1, y1, x2, y2)
            }

            var root = d3_geom_quadtreeNode();
            root.add = function (d) {
                insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_)
            };
            root.visit = function (f) {
                d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_)
            };
            i = -1;
            if (x1 == null) {
                while (++i < n) {
                    insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_)
                }
                --i
            } else {
                data.forEach(root.add)
            }
            xs = ys = data = d = null;
            return root
        }

        quadtree.x = function (_) {
            return arguments.length ? (x = _, quadtree) : x
        };
        quadtree.y = function (_) {
            return arguments.length ? (y = _, quadtree) : y
        };
        quadtree.extent = function (_) {
            if (!arguments.length) {
                return x1 == null ? null : [[x1, y1], [x2, y2]]
            }
            if (_ == null) {
                x1 = y1 = x2 = y2 = null
            } else {
                x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1]
            }
            return quadtree
        };
        quadtree.size = function (_) {
            if (!arguments.length) {
                return x1 == null ? null : [x2 - x1, y2 - y1]
            }
            if (_ == null) {
                x1 = y1 = x2 = y2 = null
            } else {
                x1 = y1 = 0, x2 = +_[0], y2 = +_[1]
            }
            return quadtree
        };
        return quadtree
    };
    function d3_geom_quadtreeCompatX(d) {
        return d.x
    }

    function d3_geom_quadtreeCompatY(d) {
        return d.y
    }

    function d3_geom_quadtreeNode() {
        return {leaf: true, nodes: [], point: null, x: null, y: null}
    }

    function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
        if (!f(node, x1, y1, x2, y2)) {
            var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, children = node.nodes;
            if (children[0]) {
                d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy)
            }
            if (children[1]) {
                d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy)
            }
            if (children[2]) {
                d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2)
            }
            if (children[3]) {
                d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2)
            }
        }
    }

    d3.interpolateRgb = d3_interpolateRgb;
    function d3_interpolateRgb(a, b) {
        a = d3.rgb(a);
        b = d3.rgb(b);
        var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
        return function (t) {
            return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t))
        }
    }

    d3.interpolateObject = d3_interpolateObject;
    function d3_interpolateObject(a, b) {
        var i = {}, c = {}, k;
        for (k in a) {
            if (k in b) {
                i[k] = d3_interpolate(a[k], b[k])
            } else {
                c[k] = a[k]
            }
        }
        for (k in b) {
            if (!(k in a)) {
                c[k] = b[k]
            }
        }
        return function (t) {
            for (k in i) {
                c[k] = i[k](t)
            }
            return c
        }
    }

    d3.interpolateNumber = d3_interpolateNumber;
    function d3_interpolateNumber(a, b) {
        b -= a = +a;
        return function (t) {
            return a + b * t
        }
    }

    d3.interpolateString = d3_interpolateString;
    function d3_interpolateString(a, b) {
        var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
        a = a + "", b = b + "";
        while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
            if ((bs = bm.index) > bi) {
                bs = b.substring(bi, bs);
                if (s[i]) {
                    s[i] += bs
                } else {
                    s[++i] = bs
                }
            }
            if ((am = am[0]) === (bm = bm[0])) {
                if (s[i]) {
                    s[i] += bm
                } else {
                    s[++i] = bm
                }
            } else {
                s[++i] = null;
                q.push({i: i, x: d3_interpolateNumber(am, bm)})
            }
            bi = d3_interpolate_numberB.lastIndex
        }
        if (bi < b.length) {
            bs = b.substring(bi);
            if (s[i]) {
                s[i] += bs
            } else {
                s[++i] = bs
            }
        }
        return s.length < 2 ? q[0] ? (b = q[0].x, function (t) {
            return b(t) + ""
        }) : function () {
            return b
        } : (b = q.length, function (t) {
            for (var i = 0, o; i < b; ++i) {
                s[(o = q[i]).i] = o.x(t)
            }
            return s.join("")
        })
    }

    var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
    d3.interpolate = d3_interpolate;
    function d3_interpolate(a, b) {
        var i = d3.interpolators.length, f;
        while (--i >= 0 && !(f = d3.interpolators[i](a, b))) {
        }
        return f
    }

    d3.interpolators = [function (a, b) {
        var t = typeof b;
        return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_Color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b)
    }];
    d3.interpolateArray = d3_interpolateArray;
    function d3_interpolateArray(a, b) {
        var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
        for (i = 0; i < n0; ++i) {
            x.push(d3_interpolate(a[i], b[i]))
        }
        for (; i < na; ++i) {
            c[i] = a[i]
        }
        for (; i < nb; ++i) {
            c[i] = b[i]
        }
        return function (t) {
            for (i = 0; i < n0; ++i) {
                c[i] = x[i](t)
            }
            return c
        }
    }

    var d3_ease_default = function () {
        return d3_identity
    };
    var d3_ease = d3.map({
        linear: d3_ease_default, poly: d3_ease_poly, quad: function () {
            return d3_ease_quad
        }, cubic: function () {
            return d3_ease_cubic
        }, sin: function () {
            return d3_ease_sin
        }, exp: function () {
            return d3_ease_exp
        }, circle: function () {
            return d3_ease_circle
        }, elastic: d3_ease_elastic, back: d3_ease_back, bounce: function () {
            return d3_ease_bounce
        }
    });
    var d3_ease_mode = d3.map({
        "in": d3_identity,
        out: d3_ease_reverse,
        "in-out": d3_ease_reflect,
        "out-in": function (f) {
            return d3_ease_reflect(d3_ease_reverse(f))
        }
    });
    d3.ease = function (name) {
        var i = name.indexOf("-"), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : "in";
        t = d3_ease.get(t) || d3_ease_default;
        m = d3_ease_mode.get(m) || d3_identity;
        return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))))
    };
    function d3_ease_clamp(f) {
        return function (t) {
            return t <= 0 ? 0 : t >= 1 ? 1 : f(t)
        }
    }

    function d3_ease_reverse(f) {
        return function (t) {
            return 1 - f(1 - t)
        }
    }

    function d3_ease_reflect(f) {
        return function (t) {
            return 0.5 * (t < 0.5 ? f(2 * t) : 2 - f(2 - 2 * t))
        }
    }

    function d3_ease_quad(t) {
        return t * t
    }

    function d3_ease_cubic(t) {
        return t * t * t
    }

    function d3_ease_cubicInOut(t) {
        if (t <= 0) {
            return 0
        }
        if (t >= 1) {
            return 1
        }
        var t2 = t * t, t3 = t2 * t;
        return 4 * (t < 0.5 ? t3 : 3 * (t - t2) + t3 - 0.75)
    }

    function d3_ease_poly(e) {
        return function (t) {
            return Math.pow(t, e)
        }
    }

    function d3_ease_sin(t) {
        return 1 - Math.cos(t * halfπ)
    }

    function d3_ease_exp(t) {
        return Math.pow(2, 10 * (t - 1))
    }

    function d3_ease_circle(t) {
        return 1 - Math.sqrt(1 - t * t)
    }

    function d3_ease_elastic(a, p) {
        var s;
        if (arguments.length < 2) {
            p = 0.45
        }
        if (arguments.length) {
            s = p / τ * Math.asin(1 / a)
        } else {
            a = 1, s = p / 4
        }
        return function (t) {
            return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p)
        }
    }

    function d3_ease_back(s) {
        if (!s) {
            s = 1.70158
        }
        return function (t) {
            return t * t * ((s + 1) * t - s)
        }
    }

    function d3_ease_bounce(t) {
        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375
    }

    d3.interpolateHcl = d3_interpolateHcl;
    function d3_interpolateHcl(a, b) {
        a = d3.hcl(a);
        b = d3.hcl(b);
        var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
        if (isNaN(bc)) {
            bc = 0, ac = isNaN(ac) ? b.c : ac
        }
        if (isNaN(bh)) {
            bh = 0, ah = isNaN(ah) ? b.h : ah
        } else {
            if (bh > 180) {
                bh -= 360
            } else {
                if (bh < -180) {
                    bh += 360
                }
            }
        }
        return function (t) {
            return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + ""
        }
    }

    d3.interpolateHsl = d3_interpolateHsl;
    function d3_interpolateHsl(a, b) {
        a = d3.hsl(a);
        b = d3.hsl(b);
        var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
        if (isNaN(bs)) {
            bs = 0, as = isNaN(as) ? b.s : as
        }
        if (isNaN(bh)) {
            bh = 0, ah = isNaN(ah) ? b.h : ah
        } else {
            if (bh > 180) {
                bh -= 360
            } else {
                if (bh < -180) {
                    bh += 360
                }
            }
        }
        return function (t) {
            return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + ""
        }
    }

    d3.interpolateLab = d3_interpolateLab;
    function d3_interpolateLab(a, b) {
        a = d3.lab(a);
        b = d3.lab(b);
        var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
        return function (t) {
            return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + ""
        }
    }

    d3.interpolateRound = d3_interpolateRound;
    function d3_interpolateRound(a, b) {
        b -= a;
        return function (t) {
            return Math.round(a + b * t)
        }
    }

    d3.transform = function (string) {
        var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
        return (d3.transform = function (string) {
            if (string != null) {
                g.setAttribute("transform", string);
                var t = g.transform.baseVal.consolidate()
            }
            return new d3_transform(t ? t.matrix : d3_transformIdentity)
        })(string)
    };
    function d3_transform(m) {
        var r0 = [m.a, m.b], r1 = [m.c, m.d], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
        if (r0[0] * r1[1] < r1[0] * r0[1]) {
            r0[0] *= -1;
            r0[1] *= -1;
            kx *= -1;
            kz *= -1
        }
        this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
        this.translate = [m.e, m.f];
        this.scale = [kx, ky];
        this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0
    }

    d3_transform.prototype.toString = function () {
        return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")"
    };
    function d3_transformDot(a, b) {
        return a[0] * b[0] + a[1] * b[1]
    }

    function d3_transformNormalize(a) {
        var k = Math.sqrt(d3_transformDot(a, a));
        if (k) {
            a[0] /= k;
            a[1] /= k
        }
        return k
    }

    function d3_transformCombine(a, b, k) {
        a[0] += k * b[0];
        a[1] += k * b[1];
        return a
    }

    var d3_transformIdentity = {a: 1, b: 0, c: 0, d: 1, e: 0, f: 0};
    d3.interpolateTransform = d3_interpolateTransform;
    function d3_interpolateTransform(a, b) {
        var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
        if (ta[0] != tb[0] || ta[1] != tb[1]) {
            s.push("translate(", null, ",", null, ")");
            q.push({i: 1, x: d3_interpolateNumber(ta[0], tb[0])}, {i: 3, x: d3_interpolateNumber(ta[1], tb[1])})
        } else {
            if (tb[0] || tb[1]) {
                s.push("translate(" + tb + ")")
            } else {
                s.push("")
            }
        }
        if (ra != rb) {
            if (ra - rb > 180) {
                rb += 360
            } else {
                if (rb - ra > 180) {
                    ra += 360
                }
            }
            q.push({i: s.push(s.pop() + "rotate(", null, ")") - 2, x: d3_interpolateNumber(ra, rb)})
        } else {
            if (rb) {
                s.push(s.pop() + "rotate(" + rb + ")")
            }
        }
        if (wa != wb) {
            q.push({i: s.push(s.pop() + "skewX(", null, ")") - 2, x: d3_interpolateNumber(wa, wb)})
        } else {
            if (wb) {
                s.push(s.pop() + "skewX(" + wb + ")")
            }
        }
        if (ka[0] != kb[0] || ka[1] != kb[1]) {
            n = s.push(s.pop() + "scale(", null, ",", null, ")");
            q.push({i: n - 4, x: d3_interpolateNumber(ka[0], kb[0])}, {i: n - 2, x: d3_interpolateNumber(ka[1], kb[1])})
        } else {
            if (kb[0] != 1 || kb[1] != 1) {
                s.push(s.pop() + "scale(" + kb + ")")
            }
        }
        n = q.length;
        return function (t) {
            var i = -1, o;
            while (++i < n) {
                s[(o = q[i]).i] = o.x(t)
            }
            return s.join("")
        }
    }

    function d3_uninterpolateNumber(a, b) {
        b = b - (a = +a) ? 1 / (b - a) : 0;
        return function (x) {
            return (x - a) * b
        }
    }

    function d3_uninterpolateClamp(a, b) {
        b = b - (a = +a) ? 1 / (b - a) : 0;
        return function (x) {
            return Math.max(0, Math.min(1, (x - a) * b))
        }
    }

    d3.layout = {};
    d3.layout.bundle = function () {
        return function (links) {
            var paths = [], i = -1, n = links.length;
            while (++i < n) {
                paths.push(d3_layout_bundlePath(links[i]))
            }
            return paths
        }
    };
    function d3_layout_bundlePath(link) {
        var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [start];
        while (start !== lca) {
            start = start.parent;
            points.push(start)
        }
        var k = points.length;
        while (end !== lca) {
            points.splice(k, 0, end);
            end = end.parent
        }
        return points
    }

    function d3_layout_bundleAncestors(node) {
        var ancestors = [], parent = node.parent;
        while (parent != null) {
            ancestors.push(node);
            node = parent;
            parent = parent.parent
        }
        ancestors.push(node);
        return ancestors
    }

    function d3_layout_bundleLeastCommonAncestor(a, b) {
        if (a === b) {
            return a
        }
        var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
        while (aNode === bNode) {
            sharedNode = aNode;
            aNode = aNodes.pop();
            bNode = bNodes.pop()
        }
        return sharedNode
    }

    d3.layout.chord = function () {
        var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;

        function relayout() {
            var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
            chords = [];
            groups = [];
            k = 0, i = -1;
            while (++i < n) {
                x = 0, j = -1;
                while (++j < n) {
                    x += matrix[i][j]
                }
                groupSums.push(x);
                subgroupIndex.push(d3.range(n));
                k += x
            }
            if (sortGroups) {
                groupIndex.sort(function (a, b) {
                    return sortGroups(groupSums[a], groupSums[b])
                })
            }
            if (sortSubgroups) {
                subgroupIndex.forEach(function (d, i) {
                    d.sort(function (a, b) {
                        return sortSubgroups(matrix[i][a], matrix[i][b])
                    })
                })
            }
            k = (τ - padding * n) / k;
            x = 0, i = -1;
            while (++i < n) {
                x0 = x, j = -1;
                while (++j < n) {
                    var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
                    subgroups[di + "-" + dj] = {index: di, subindex: dj, startAngle: a0, endAngle: a1, value: v}
                }
                groups[di] = {index: di, startAngle: x0, endAngle: x, value: (x - x0) / k};
                x += padding
            }
            i = -1;
            while (++i < n) {
                j = i - 1;
                while (++j < n) {
                    var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
                    if (source.value || target.value) {
                        chords.push(source.value < target.value ? {source: target, target: source} : {
                            source: source,
                            target: target
                        })
                    }
                }
            }
            if (sortChords) {
                resort()
            }
        }

        function resort() {
            chords.sort(function (a, b) {
                return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2)
            })
        }

        chord.matrix = function (x) {
            if (!arguments.length) {
                return matrix
            }
            n = (matrix = x) && matrix.length;
            chords = groups = null;
            return chord
        };
        chord.padding = function (x) {
            if (!arguments.length) {
                return padding
            }
            padding = x;
            chords = groups = null;
            return chord
        };
        chord.sortGroups = function (x) {
            if (!arguments.length) {
                return sortGroups
            }
            sortGroups = x;
            chords = groups = null;
            return chord
        };
        chord.sortSubgroups = function (x) {
            if (!arguments.length) {
                return sortSubgroups
            }
            sortSubgroups = x;
            chords = null;
            return chord
        };
        chord.sortChords = function (x) {
            if (!arguments.length) {
                return sortChords
            }
            sortChords = x;
            if (chords) {
                resort()
            }
            return chord
        };
        chord.chords = function () {
            if (!chords) {
                relayout()
            }
            return chords
        };
        chord.groups = function () {
            if (!groups) {
                relayout()
            }
            return groups
        };
        return chord
    };
    d3.layout.force = function () {
        var force = {}, event = d3.dispatch("start", "tick", "end"), size = [1, 1], drag, alpha, friction = 0.9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = 0.1, theta2 = 0.64, nodes = [], links = [], distances, strengths, charges;

        function repulse(node) {
            return function (quad, x1, _, x2) {
                if (quad.point !== node) {
                    var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
                    if (dw * dw / theta2 < dn) {
                        if (dn < chargeDistance2) {
                            var k = quad.charge / dn;
                            node.px -= dx * k;
                            node.py -= dy * k
                        }
                        return true
                    }
                    if (quad.point && dn && dn < chargeDistance2) {
                        var k = quad.pointCharge / dn;
                        node.px -= dx * k;
                        node.py -= dy * k
                    }
                }
                return !quad.charge
            }
        }

        force.tick = function () {
            if ((alpha *= 0.99) < 0.005) {
                event.end({type: "end", alpha: alpha = 0});
                return true
            }
            var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
            for (i = 0; i < m; ++i) {
                o = links[i];
                s = o.source;
                t = o.target;
                x = t.x - s.x;
                y = t.y - s.y;
                if (l = x * x + y * y) {
                    l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
                    x *= l;
                    y *= l;
                    t.x -= x * (k = s.weight / (t.weight + s.weight));
                    t.y -= y * k;
                    s.x += x * (k = 1 - k);
                    s.y += y * k
                }
            }
            if (k = alpha * gravity) {
                x = size[0] / 2;
                y = size[1] / 2;
                i = -1;
                if (k) {
                    while (++i < n) {
                        o = nodes[i];
                        o.x += (x - o.x) * k;
                        o.y += (y - o.y) * k
                    }
                }
            }
            if (charge) {
                d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
                i = -1;
                while (++i < n) {
                    if (!(o = nodes[i]).fixed) {
                        q.visit(repulse(o))
                    }
                }
            }
            i = -1;
            while (++i < n) {
                o = nodes[i];
                if (o.fixed) {
                    o.x = o.px;
                    o.y = o.py
                } else {
                    o.x -= (o.px - (o.px = o.x)) * friction;
                    o.y -= (o.py - (o.py = o.y)) * friction
                }
            }
            event.tick({type: "tick", alpha: alpha})
        };
        force.nodes = function (x) {
            if (!arguments.length) {
                return nodes
            }
            nodes = x;
            return force
        };
        force.links = function (x) {
            if (!arguments.length) {
                return links
            }
            links = x;
            return force
        };
        force.size = function (x) {
            if (!arguments.length) {
                return size
            }
            size = x;
            return force
        };
        force.linkDistance = function (x) {
            if (!arguments.length) {
                return linkDistance
            }
            linkDistance = typeof x === "function" ? x : +x;
            return force
        };
        force.distance = force.linkDistance;
        force.linkStrength = function (x) {
            if (!arguments.length) {
                return linkStrength
            }
            linkStrength = typeof x === "function" ? x : +x;
            return force
        };
        force.friction = function (x) {
            if (!arguments.length) {
                return friction
            }
            friction = +x;
            return force
        };
        force.charge = function (x) {
            if (!arguments.length) {
                return charge
            }
            charge = typeof x === "function" ? x : +x;
            return force
        };
        force.chargeDistance = function (x) {
            if (!arguments.length) {
                return Math.sqrt(chargeDistance2)
            }
            chargeDistance2 = x * x;
            return force
        };
        force.gravity = function (x) {
            if (!arguments.length) {
                return gravity
            }
            gravity = +x;
            return force
        };
        force.theta = function (x) {
            if (!arguments.length) {
                return Math.sqrt(theta2)
            }
            theta2 = x * x;
            return force
        };
        force.alpha = function (x) {
            if (!arguments.length) {
                return alpha
            }
            x = +x;
            if (alpha) {
                if (x > 0) {
                    alpha = x
                } else {
                    alpha = 0
                }
            } else {
                if (x > 0) {
                    event.start({type: "start", alpha: alpha = x});
                    d3.timer(force.tick)
                }
            }
            return force
        };
        force.start = function () {
            var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
            for (i = 0; i < n; ++i) {
                (o = nodes[i]).index = i;
                o.weight = 0
            }
            for (i = 0; i < m; ++i) {
                o = links[i];
                if (typeof o.source == "number") {
                    o.source = nodes[o.source]
                }
                if (typeof o.target == "number") {
                    o.target = nodes[o.target]
                }
                ++o.source.weight;
                ++o.target.weight
            }
            for (i = 0; i < n; ++i) {
                o = nodes[i];
                if (isNaN(o.x)) {
                    o.x = position("x", w)
                }
                if (isNaN(o.y)) {
                    o.y = position("y", h)
                }
                if (isNaN(o.px)) {
                    o.px = o.x
                }
                if (isNaN(o.py)) {
                    o.py = o.y
                }
            }
            distances = [];
            if (typeof linkDistance === "function") {
                for (i = 0; i < m; ++i) {
                    distances[i] = +linkDistance.call(this, links[i], i)
                }
            } else {
                for (i = 0; i < m; ++i) {
                    distances[i] = linkDistance
                }
            }
            strengths = [];
            if (typeof linkStrength === "function") {
                for (i = 0; i < m; ++i) {
                    strengths[i] = +linkStrength.call(this, links[i], i)
                }
            } else {
                for (i = 0; i < m; ++i) {
                    strengths[i] = linkStrength
                }
            }
            charges = [];
            if (typeof charge === "function") {
                for (i = 0; i < n; ++i) {
                    charges[i] = +charge.call(this, nodes[i], i)
                }
            } else {
                for (i = 0; i < n; ++i) {
                    charges[i] = charge
                }
            }
            function position(dimension, size) {
                if (!neighbors) {
                    neighbors = new Array(n);
                    for (j = 0; j < n; ++j) {
                        neighbors[j] = []
                    }
                    for (j = 0; j < m; ++j) {
                        var o = links[j];
                        neighbors[o.source.index].push(o.target);
                        neighbors[o.target.index].push(o.source)
                    }
                }
                var candidates = neighbors[i], j = -1, m = candidates.length, x;
                while (++j < m) {
                    if (!isNaN(x = candidates[j][dimension])) {
                        return x
                    }
                }
                return Math.random() * size
            }

            return force.resume()
        };
        force.resume = function () {
            return force.alpha(0.1)
        };
        force.stop = function () {
            return force.alpha(0)
        };
        force.drag = function () {
            if (!drag) {
                drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend)
            }
            if (!arguments.length) {
                return drag
            }
            this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag)
        };
        function dragmove(d) {
            d.px = d3.event.x, d.py = d3.event.y;
            force.resume()
        }

        return d3.rebind(force, event, "on")
    };
    function d3_layout_forceDragstart(d) {
        d.fixed |= 2
    }

    function d3_layout_forceDragend(d) {
        d.fixed &= ~6
    }

    function d3_layout_forceMouseover(d) {
        d.fixed |= 4;
        d.px = d.x, d.py = d.y
    }

    function d3_layout_forceMouseout(d) {
        d.fixed &= ~4
    }

    function d3_layout_forceAccumulate(quad, alpha, charges) {
        var cx = 0, cy = 0;
        quad.charge = 0;
        if (!quad.leaf) {
            var nodes = quad.nodes, n = nodes.length, i = -1, c;
            while (++i < n) {
                c = nodes[i];
                if (c == null) {
                    continue
                }
                d3_layout_forceAccumulate(c, alpha, charges);
                quad.charge += c.charge;
                cx += c.charge * c.cx;
                cy += c.charge * c.cy
            }
        }
        if (quad.point) {
            if (!quad.leaf) {
                quad.point.x += Math.random() - 0.5;
                quad.point.y += Math.random() - 0.5
            }
            var k = alpha * charges[quad.point.index];
            quad.charge += quad.pointCharge = k;
            cx += k * quad.point.x;
            cy += k * quad.point.y
        }
        quad.cx = cx / quad.charge;
        quad.cy = cy / quad.charge
    }

    var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
    d3.layout.hierarchy = function () {
        var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;

        function hierarchy(root) {
            var stack = [root], nodes = [], node;
            root.depth = 0;
            while ((node = stack.pop()) != null) {
                nodes.push(node);
                if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
                    var n, childs, child;
                    while (--n >= 0) {
                        stack.push(child = childs[n]);
                        child.parent = node;
                        child.depth = node.depth + 1
                    }
                    if (value) {
                        node.value = 0
                    }
                    node.children = childs
                } else {
                    if (value) {
                        node.value = +value.call(hierarchy, node, node.depth) || 0
                    }
                    delete node.children
                }
            }
            d3_layout_hierarchyVisitAfter(root, function (node) {
                var childs, parent;
                if (sort && (childs = node.children)) {
                    childs.sort(sort)
                }
                if (value && (parent = node.parent)) {
                    parent.value += node.value
                }
            });
            return nodes
        }

        hierarchy.sort = function (x) {
            if (!arguments.length) {
                return sort
            }
            sort = x;
            return hierarchy
        };
        hierarchy.children = function (x) {
            if (!arguments.length) {
                return children
            }
            children = x;
            return hierarchy
        };
        hierarchy.value = function (x) {
            if (!arguments.length) {
                return value
            }
            value = x;
            return hierarchy
        };
        hierarchy.revalue = function (root) {
            if (value) {
                d3_layout_hierarchyVisitBefore(root, function (node) {
                    if (node.children) {
                        node.value = 0
                    }
                });
                d3_layout_hierarchyVisitAfter(root, function (node) {
                    var parent;
                    if (!node.children) {
                        node.value = +value.call(hierarchy, node, node.depth) || 0
                    }
                    if (parent = node.parent) {
                        parent.value += node.value
                    }
                })
            }
            return root
        };
        return hierarchy
    };
    function d3_layout_hierarchyRebind(object, hierarchy) {
        d3.rebind(object, hierarchy, "sort", "children", "value");
        object.nodes = object;
        object.links = d3_layout_hierarchyLinks;
        return object
    }

    function d3_layout_hierarchyVisitBefore(node, callback) {
        var nodes = [node];
        while ((node = nodes.pop()) != null) {
            callback(node);
            if ((children = node.children) && (n = children.length)) {
                var n, children;
                while (--n >= 0) {
                    nodes.push(children[n])
                }
            }
        }
    }

    function d3_layout_hierarchyVisitAfter(node, callback) {
        var nodes = [node], nodes2 = [];
        while ((node = nodes.pop()) != null) {
            nodes2.push(node);
            if ((children = node.children) && (n = children.length)) {
                var i = -1, n, children;
                while (++i < n) {
                    nodes.push(children[i])
                }
            }
        }
        while ((node = nodes2.pop()) != null) {
            callback(node)
        }
    }

    function d3_layout_hierarchyChildren(d) {
        return d.children
    }

    function d3_layout_hierarchyValue(d) {
        return d.value
    }

    function d3_layout_hierarchySort(a, b) {
        return b.value - a.value
    }

    function d3_layout_hierarchyLinks(nodes) {
        return d3.merge(nodes.map(function (parent) {
            return (parent.children || []).map(function (child) {
                return {source: parent, target: child}
            })
        }))
    }

    d3.layout.partition = function () {
        var hierarchy = d3.layout.hierarchy(), size = [1, 1];

        function position(node, x, dx, dy) {
            var children = node.children;
            node.x = x;
            node.y = node.depth * dy;
            node.dx = dx;
            node.dy = dy;
            if (children && (n = children.length)) {
                var i = -1, n, c, d;
                dx = node.value ? dx / node.value : 0;
                while (++i < n) {
                    position(c = children[i], x, d = c.value * dx, dy);
                    x += d
                }
            }
        }

        function depth(node) {
            var children = node.children, d = 0;
            if (children && (n = children.length)) {
                var i = -1, n;
                while (++i < n) {
                    d = Math.max(d, depth(children[i]))
                }
            }
            return 1 + d
        }

        function partition(d, i) {
            var nodes = hierarchy.call(this, d, i);
            position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
            return nodes
        }

        partition.size = function (x) {
            if (!arguments.length) {
                return size
            }
            size = x;
            return partition
        };
        return d3_layout_hierarchyRebind(partition, hierarchy)
    };
    d3.layout.pie = function () {
        var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;

        function pie(data) {
            var values = data.map(function (d, i) {
                return +value.call(pie, d, i)
            });
            var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
            var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
            var index = d3.range(data.length);
            if (sort != null) {
                index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {
                    return values[j] - values[i]
                } : function (i, j) {
                    return sort(data[i], data[j])
                })
            }
            var arcs = [];
            index.forEach(function (i) {
                var d;
                arcs[i] = {data: data[i], value: d = values[i], startAngle: a, endAngle: a += d * k}
            });
            return arcs
        }

        pie.value = function (x) {
            if (!arguments.length) {
                return value
            }
            value = x;
            return pie
        };
        pie.sort = function (x) {
            if (!arguments.length) {
                return sort
            }
            sort = x;
            return pie
        };
        pie.startAngle = function (x) {
            if (!arguments.length) {
                return startAngle
            }
            startAngle = x;
            return pie
        };
        pie.endAngle = function (x) {
            if (!arguments.length) {
                return endAngle
            }
            endAngle = x;
            return pie
        };
        return pie
    };
    var d3_layout_pieSortByValue = {};
    d3.layout.stack = function () {
        var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;

        function stack(data, index) {
            var series = data.map(function (d, i) {
                return values.call(stack, d, i)
            });
            var points = series.map(function (d) {
                return d.map(function (v, i) {
                    return [x.call(stack, v, i), y.call(stack, v, i)]
                })
            });
            var orders = order.call(stack, points, index);
            series = d3.permute(series, orders);
            points = d3.permute(points, orders);
            var offsets = offset.call(stack, points, index);
            var n = series.length, m = series[0].length, i, j, o;
            for (j = 0; j < m; ++j) {
                out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
                for (i = 1; i < n; ++i) {
                    out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1])
                }
            }
            return data
        }

        stack.values = function (x) {
            if (!arguments.length) {
                return values
            }
            values = x;
            return stack
        };
        stack.order = function (x) {
            if (!arguments.length) {
                return order
            }
            order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
            return stack
        };
        stack.offset = function (x) {
            if (!arguments.length) {
                return offset
            }
            offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
            return stack
        };
        stack.x = function (z) {
            if (!arguments.length) {
                return x
            }
            x = z;
            return stack
        };
        stack.y = function (z) {
            if (!arguments.length) {
                return y
            }
            y = z;
            return stack
        };
        stack.out = function (z) {
            if (!arguments.length) {
                return out
            }
            out = z;
            return stack
        };
        return stack
    };
    function d3_layout_stackX(d) {
        return d.x
    }

    function d3_layout_stackY(d) {
        return d.y
    }

    function d3_layout_stackOut(d, y0, y) {
        d.y0 = y0;
        d.y = y
    }

    var d3_layout_stackOrders = d3.map({
        "inside-out": function (data) {
            var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function (a, b) {
                return max[a] - max[b]
            }), top = 0, bottom = 0, tops = [], bottoms = [];
            for (i = 0; i < n; ++i) {
                j = index[i];
                if (top < bottom) {
                    top += sums[j];
                    tops.push(j)
                } else {
                    bottom += sums[j];
                    bottoms.push(j)
                }
            }
            return bottoms.reverse().concat(tops)
        }, reverse: function (data) {
            return d3.range(data.length).reverse()
        }, "default": d3_layout_stackOrderDefault
    });
    var d3_layout_stackOffsets = d3.map({
        silhouette: function (data) {
            var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
            for (j = 0; j < m; ++j) {
                for (i = 0, o = 0; i < n; i++) {
                    o += data[i][j][1]
                }
                if (o > max) {
                    max = o
                }
                sums.push(o)
            }
            for (j = 0; j < m; ++j) {
                y0[j] = (max - sums[j]) / 2
            }
            return y0
        }, wiggle: function (data) {
            var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
            y0[0] = o = o0 = 0;
            for (j = 1; j < m; ++j) {
                for (i = 0, s1 = 0; i < n; ++i) {
                    s1 += data[i][j][1]
                }
                for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
                    for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
                        s3 += (data[k][j][1] - data[k][j - 1][1]) / dx
                    }
                    s2 += s3 * data[i][j][1]
                }
                y0[j] = o -= s1 ? s2 / s1 * dx : 0;
                if (o < o0) {
                    o0 = o
                }
            }
            for (j = 0; j < m; ++j) {
                y0[j] -= o0
            }
            return y0
        }, expand: function (data) {
            var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
            for (j = 0; j < m; ++j) {
                for (i = 0, o = 0; i < n; i++) {
                    o += data[i][j][1]
                }
                if (o) {
                    for (i = 0; i < n; i++) {
                        data[i][j][1] /= o
                    }
                } else {
                    for (i = 0; i < n; i++) {
                        data[i][j][1] = k
                    }
                }
            }
            for (j = 0; j < m; ++j) {
                y0[j] = 0
            }
            return y0
        }, zero: d3_layout_stackOffsetZero
    });

    function d3_layout_stackOrderDefault(data) {
        return d3.range(data.length)
    }

    function d3_layout_stackOffsetZero(data) {
        var j = -1, m = data[0].length, y0 = [];
        while (++j < m) {
            y0[j] = 0
        }
        return y0
    }

    function d3_layout_stackMaxIndex(array) {
        var i = 1, j = 0, v = array[0][1], k, n = array.length;
        for (; i < n; ++i) {
            if ((k = array[i][1]) > v) {
                j = i;
                v = k
            }
        }
        return j
    }

    function d3_layout_stackReduceSum(d) {
        return d.reduce(d3_layout_stackSum, 0)
    }

    function d3_layout_stackSum(p, d) {
        return p + d[1]
    }

    d3.layout.histogram = function () {
        var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;

        function histogram(data, i) {
            var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
            while (++i < m) {
                bin = bins[i] = [];
                bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
                bin.y = 0
            }
            if (m > 0) {
                i = -1;
                while (++i < n) {
                    x = values[i];
                    if (x >= range[0] && x <= range[1]) {
                        bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
                        bin.y += k;
                        bin.push(data[i])
                    }
                }
            }
            return bins
        }

        histogram.value = function (x) {
            if (!arguments.length) {
                return valuer
            }
            valuer = x;
            return histogram
        };
        histogram.range = function (x) {
            if (!arguments.length) {
                return ranger
            }
            ranger = d3_functor(x);
            return histogram
        };
        histogram.bins = function (x) {
            if (!arguments.length) {
                return binner
            }
            binner = typeof x === "number" ? function (range) {
                return d3_layout_histogramBinFixed(range, x)
            } : d3_functor(x);
            return histogram
        };
        histogram.frequency = function (x) {
            if (!arguments.length) {
                return frequency
            }
            frequency = !!x;
            return histogram
        };
        return histogram
    };
    function d3_layout_histogramBinSturges(range, values) {
        return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1))
    }

    function d3_layout_histogramBinFixed(range, n) {
        var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
        while (++x <= n) {
            f[x] = m * x + b
        }
        return f
    }

    function d3_layout_histogramRange(values) {
        return [d3.min(values), d3.max(values)]
    }

    d3.layout.pack = function () {
        var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [1, 1], radius;

        function pack(d, i) {
            var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function () {
                return radius
            };
            root.x = root.y = 0;
            d3_layout_hierarchyVisitAfter(root, function (d) {
                d.r = +r(d.value)
            });
            d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
            if (padding) {
                var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
                d3_layout_hierarchyVisitAfter(root, function (d) {
                    d.r += dr
                });
                d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
                d3_layout_hierarchyVisitAfter(root, function (d) {
                    d.r -= dr
                })
            }
            d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
            return nodes
        }

        pack.size = function (_) {
            if (!arguments.length) {
                return size
            }
            size = _;
            return pack
        };
        pack.radius = function (_) {
            if (!arguments.length) {
                return radius
            }
            radius = _ == null || typeof _ === "function" ? _ : +_;
            return pack
        };
        pack.padding = function (_) {
            if (!arguments.length) {
                return padding
            }
            padding = +_;
            return pack
        };
        return d3_layout_hierarchyRebind(pack, hierarchy)
    };
    function d3_layout_packSort(a, b) {
        return a.value - b.value
    }

    function d3_layout_packInsert(a, b) {
        var c = a._pack_next;
        a._pack_next = b;
        b._pack_prev = a;
        b._pack_next = c;
        c._pack_prev = b
    }

    function d3_layout_packSplice(a, b) {
        a._pack_next = b;
        b._pack_prev = a
    }

    function d3_layout_packIntersects(a, b) {
        var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
        return 0.999 * dr * dr > dx * dx + dy * dy
    }

    function d3_layout_packSiblings(node) {
        if (!(nodes = node.children) || !(n = nodes.length)) {
            return
        }
        var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;

        function bound(node) {
            xMin = Math.min(node.x - node.r, xMin);
            xMax = Math.max(node.x + node.r, xMax);
            yMin = Math.min(node.y - node.r, yMin);
            yMax = Math.max(node.y + node.r, yMax)
        }

        nodes.forEach(d3_layout_packLink);
        a = nodes[0];
        a.x = -a.r;
        a.y = 0;
        bound(a);
        if (n > 1) {
            b = nodes[1];
            b.x = b.r;
            b.y = 0;
            bound(b);
            if (n > 2) {
                c = nodes[2];
                d3_layout_packPlace(a, b, c);
                bound(c);
                d3_layout_packInsert(a, c);
                a._pack_prev = c;
                d3_layout_packInsert(c, b);
                b = a._pack_next;
                for (i = 3; i < n; i++) {
                    d3_layout_packPlace(a, b, c = nodes[i]);
                    var isect = 0, s1 = 1, s2 = 1;
                    for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
                        if (d3_layout_packIntersects(j, c)) {
                            isect = 1;
                            break
                        }
                    }
                    if (isect == 1) {
                        for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
                            if (d3_layout_packIntersects(k, c)) {
                                break
                            }
                        }
                    }
                    if (isect) {
                        if (s1 < s2 || s1 == s2 && b.r < a.r) {
                            d3_layout_packSplice(a, b = j)
                        } else {
                            d3_layout_packSplice(a = k, b)
                        }
                        i--
                    } else {
                        d3_layout_packInsert(a, c);
                        b = c;
                        bound(c)
                    }
                }
            }
        }
        var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
        for (i = 0; i < n; i++) {
            c = nodes[i];
            c.x -= cx;
            c.y -= cy;
            cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y))
        }
        node.r = cr;
        nodes.forEach(d3_layout_packUnlink)
    }

    function d3_layout_packLink(node) {
        node._pack_next = node._pack_prev = node
    }

    function d3_layout_packUnlink(node) {
        delete node._pack_next;
        delete node._pack_prev
    }

    function d3_layout_packTransform(node, x, y, k) {
        var children = node.children;
        node.x = x += k * node.x;
        node.y = y += k * node.y;
        node.r *= k;
        if (children) {
            var i = -1, n = children.length;
            while (++i < n) {
                d3_layout_packTransform(children[i], x, y, k)
            }
        }
    }

    function d3_layout_packPlace(a, b, c) {
        var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
        if (db && (dx || dy)) {
            var da = b.r + c.r, dc = dx * dx + dy * dy;
            da *= da;
            db *= db;
            var x = 0.5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
            c.x = a.x + x * dx + y * dy;
            c.y = a.y + x * dy - y * dx
        } else {
            c.x = a.x + db;
            c.y = a.y
        }
    }

    d3.layout.tree = function () {
        var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [1, 1], nodeSize = null;

        function tree(d, i) {
            var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
            d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
            d3_layout_hierarchyVisitBefore(root1, secondWalk);
            if (nodeSize) {
                d3_layout_hierarchyVisitBefore(root0, sizeNode)
            } else {
                var left = root0, right = root0, bottom = root0;
                d3_layout_hierarchyVisitBefore(root0, function (node) {
                    if (node.x < left.x) {
                        left = node
                    }
                    if (node.x > right.x) {
                        right = node
                    }
                    if (node.depth > bottom.depth) {
                        bottom = node
                    }
                });
                var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
                d3_layout_hierarchyVisitBefore(root0, function (node) {
                    node.x = (node.x + tx) * kx;
                    node.y = node.depth * ky
                })
            }
            return nodes
        }

        function wrapTree(root0) {
            var root1 = {A: null, children: [root0]}, queue = [root1], node1;
            while ((node1 = queue.pop()) != null) {
                for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
                    queue.push((children[i] = child = {
                        _: children[i],
                        parent: node1,
                        children: (child = children[i].children) && child.slice() || [],
                        A: null,
                        a: null,
                        z: 0,
                        m: 0,
                        c: 0,
                        s: 0,
                        t: null,
                        i: i
                    }).a = child)
                }
            }
            return root1.children[0]
        }

        function firstWalk(v) {
            var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
            if (children.length) {
                d3_layout_treeShift(v);
                var midpoint = (children[0].z + children[children.length - 1].z) / 2;
                if (w) {
                    v.z = w.z + separation(v._, w._);
                    v.m = v.z - midpoint
                } else {
                    v.z = midpoint
                }
            } else {
                if (w) {
                    v.z = w.z + separation(v._, w._)
                }
            }
            v.parent.A = apportion(v, w, v.parent.A || siblings[0])
        }

        function secondWalk(v) {
            v._.x = v.z + v.parent.m;
            v.m += v.parent.m
        }

        function apportion(v, w, ancestor) {
            if (w) {
                var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
                while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
                    vom = d3_layout_treeLeft(vom);
                    vop = d3_layout_treeRight(vop);
                    vop.a = v;
                    shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                    if (shift > 0) {
                        d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
                        sip += shift;
                        sop += shift
                    }
                    sim += vim.m;
                    sip += vip.m;
                    som += vom.m;
                    sop += vop.m
                }
                if (vim && !d3_layout_treeRight(vop)) {
                    vop.t = vim;
                    vop.m += sim - sop
                }
                if (vip && !d3_layout_treeLeft(vom)) {
                    vom.t = vip;
                    vom.m += sip - som;
                    ancestor = v
                }
            }
            return ancestor
        }

        function sizeNode(node) {
            node.x *= size[0];
            node.y = node.depth * size[1]
        }

        tree.separation = function (x) {
            if (!arguments.length) {
                return separation
            }
            separation = x;
            return tree
        };
        tree.size = function (x) {
            if (!arguments.length) {
                return nodeSize ? null : size
            }
            nodeSize = (size = x) == null ? sizeNode : null;
            return tree
        };
        tree.nodeSize = function (x) {
            if (!arguments.length) {
                return nodeSize ? size : null
            }
            nodeSize = (size = x) == null ? null : sizeNode;
            return tree
        };
        return d3_layout_hierarchyRebind(tree, hierarchy)
    };
    function d3_layout_treeSeparation(a, b) {
        return a.parent == b.parent ? 1 : 2
    }

    function d3_layout_treeLeft(v) {
        var children = v.children;
        return children.length ? children[0] : v.t
    }

    function d3_layout_treeRight(v) {
        var children = v.children, n;
        return (n = children.length) ? children[n - 1] : v.t
    }

    function d3_layout_treeMove(wm, wp, shift) {
        var change = shift / (wp.i - wm.i);
        wp.c -= change;
        wp.s += shift;
        wm.c += change;
        wp.z += shift;
        wp.m += shift
    }

    function d3_layout_treeShift(v) {
        var shift = 0, change = 0, children = v.children, i = children.length, w;
        while (--i >= 0) {
            w = children[i];
            w.z += shift;
            w.m += shift;
            shift += w.s + (change += w.c)
        }
    }

    function d3_layout_treeAncestor(vim, v, ancestor) {
        return vim.a.parent === v.parent ? vim.a : ancestor
    }

    d3.layout.cluster = function () {
        var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [1, 1], nodeSize = false;

        function cluster(d, i) {
            var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
            d3_layout_hierarchyVisitAfter(root, function (node) {
                var children = node.children;
                if (children && children.length) {
                    node.x = d3_layout_clusterX(children);
                    node.y = d3_layout_clusterY(children)
                } else {
                    node.x = previousNode ? x += separation(node, previousNode) : 0;
                    node.y = 0;
                    previousNode = node
                }
            });
            var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
            d3_layout_hierarchyVisitAfter(root, nodeSize ? function (node) {
                node.x = (node.x - root.x) * size[0];
                node.y = (root.y - node.y) * size[1]
            } : function (node) {
                node.x = (node.x - x0) / (x1 - x0) * size[0];
                node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1]
            });
            return nodes
        }

        cluster.separation = function (x) {
            if (!arguments.length) {
                return separation
            }
            separation = x;
            return cluster
        };
        cluster.size = function (x) {
            if (!arguments.length) {
                return nodeSize ? null : size
            }
            nodeSize = (size = x) == null;
            return cluster
        };
        cluster.nodeSize = function (x) {
            if (!arguments.length) {
                return nodeSize ? size : null
            }
            nodeSize = (size = x) != null;
            return cluster
        };
        return d3_layout_hierarchyRebind(cluster, hierarchy)
    };
    function d3_layout_clusterY(children) {
        return 1 + d3.max(children, function (child) {
                return child.y
            })
    }

    function d3_layout_clusterX(children) {
        return children.reduce(function (x, child) {
                return x + child.x
            }, 0) / children.length
    }

    function d3_layout_clusterLeft(node) {
        var children = node.children;
        return children && children.length ? d3_layout_clusterLeft(children[0]) : node
    }

    function d3_layout_clusterRight(node) {
        var children = node.children, n;
        return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node
    }

    d3.layout.treemap = function () {
        var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [1, 1], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = 0.5 * (1 + Math.sqrt(5));

        function scale(children, k) {
            var i = -1, n = children.length, child, area;
            while (++i < n) {
                area = (child = children[i]).value * (k < 0 ? 0 : k);
                child.area = isNaN(area) || area <= 0 ? 0 : area
            }
        }

        function squarify(node) {
            var children = node.children;
            if (children && children.length) {
                var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
                scale(remaining, rect.dx * rect.dy / node.value);
                row.area = 0;
                while ((n = remaining.length) > 0) {
                    row.push(child = remaining[n - 1]);
                    row.area += child.area;
                    if (mode !== "squarify" || (score = worst(row, u)) <= best) {
                        remaining.pop();
                        best = score
                    } else {
                        row.area -= row.pop().area;
                        position(row, u, rect, false);
                        u = Math.min(rect.dx, rect.dy);
                        row.length = row.area = 0;
                        best = Infinity
                    }
                }
                if (row.length) {
                    position(row, u, rect, true);
                    row.length = row.area = 0
                }
                children.forEach(squarify)
            }
        }

        function stickify(node) {
            var children = node.children;
            if (children && children.length) {
                var rect = pad(node), remaining = children.slice(), child, row = [];
                scale(remaining, rect.dx * rect.dy / node.value);
                row.area = 0;
                while (child = remaining.pop()) {
                    row.push(child);
                    row.area += child.area;
                    if (child.z != null) {
                        position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
                        row.length = row.area = 0
                    }
                }
                children.forEach(stickify)
            }
        }

        function worst(row, u) {
            var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
            while (++i < n) {
                if (!(r = row[i].area)) {
                    continue
                }
                if (r < rmin) {
                    rmin = r
                }
                if (r > rmax) {
                    rmax = r
                }
            }
            s *= s;
            u *= u;
            return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity
        }

        function position(row, u, rect, flush) {
            var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
            if (u == rect.dx) {
                if (flush || v > rect.dy) {
                    v = rect.dy
                }
                while (++i < n) {
                    o = row[i];
                    o.x = x;
                    o.y = y;
                    o.dy = v;
                    x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0)
                }
                o.z = true;
                o.dx += rect.x + rect.dx - x;
                rect.y += v;
                rect.dy -= v
            } else {
                if (flush || v > rect.dx) {
                    v = rect.dx
                }
                while (++i < n) {
                    o = row[i];
                    o.x = x;
                    o.y = y;
                    o.dx = v;
                    y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0)
                }
                o.z = false;
                o.dy += rect.y + rect.dy - y;
                rect.x += v;
                rect.dx -= v
            }
        }

        function treemap(d) {
            var nodes = stickies || hierarchy(d), root = nodes[0];
            root.x = 0;
            root.y = 0;
            root.dx = size[0];
            root.dy = size[1];
            if (stickies) {
                hierarchy.revalue(root)
            }
            scale([root], root.dx * root.dy / root.value);
            (stickies ? stickify : squarify)(root);
            if (sticky) {
                stickies = nodes
            }
            return nodes
        }

        treemap.size = function (x) {
            if (!arguments.length) {
                return size
            }
            size = x;
            return treemap
        };
        treemap.padding = function (x) {
            if (!arguments.length) {
                return padding
            }
            function padFunction(node) {
                var p = x.call(treemap, node, node.depth);
                return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p, p] : p)
            }

            function padConstant(node) {
                return d3_layout_treemapPad(node, x)
            }

            var type;
            pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [x, x, x, x], padConstant) : padConstant;
            return treemap
        };
        treemap.round = function (x) {
            if (!arguments.length) {
                return round != Number
            }
            round = x ? Math.round : Number;
            return treemap
        };
        treemap.sticky = function (x) {
            if (!arguments.length) {
                return sticky
            }
            sticky = x;
            stickies = null;
            return treemap
        };
        treemap.ratio = function (x) {
            if (!arguments.length) {
                return ratio
            }
            ratio = x;
            return treemap
        };
        treemap.mode = function (x) {
            if (!arguments.length) {
                return mode
            }
            mode = x + "";
            return treemap
        };
        return d3_layout_hierarchyRebind(treemap, hierarchy)
    };
    function d3_layout_treemapPadNull(node) {
        return {x: node.x, y: node.y, dx: node.dx, dy: node.dy}
    }

    function d3_layout_treemapPad(node, padding) {
        var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
        if (dx < 0) {
            x += dx / 2;
            dx = 0
        }
        if (dy < 0) {
            y += dy / 2;
            dy = 0
        }
        return {x: x, y: y, dx: dx, dy: dy}
    }

    d3.random = {
        normal: function (µ, σ) {
            var n = arguments.length;
            if (n < 2) {
                σ = 1
            }
            if (n < 1) {
                µ = 0
            }
            return function () {
                var x, y, r;
                do {
                    x = Math.random() * 2 - 1;
                    y = Math.random() * 2 - 1;
                    r = x * x + y * y
                } while (!r || r > 1);
                return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r)
            }
        }, logNormal: function () {
            var random = d3.random.normal.apply(d3, arguments);
            return function () {
                return Math.exp(random())
            }
        }, bates: function (m) {
            var random = d3.random.irwinHall(m);
            return function () {
                return random() / m
            }
        }, irwinHall: function (m) {
            return function () {
                for (var s = 0, j = 0; j < m; j++) {
                    s += Math.random()
                }
                return s
            }
        }
    };
    d3.scale = {};
    function d3_scaleExtent(domain) {
        var start = domain[0], stop = domain[domain.length - 1];
        return start < stop ? [start, stop] : [stop, start]
    }

    function d3_scaleRange(scale) {
        return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range())
    }

    function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
        var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
        return function (x) {
            return i(u(x))
        }
    }

    function d3_scale_nice(domain, nice) {
        var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
        if (x1 < x0) {
            dx = i0, i0 = i1, i1 = dx;
            dx = x0, x0 = x1, x1 = dx
        }
        domain[i0] = nice.floor(x0);
        domain[i1] = nice.ceil(x1);
        return domain
    }

    function d3_scale_niceStep(step) {
        return step ? {
            floor: function (x) {
                return Math.floor(x / step) * step
            }, ceil: function (x) {
                return Math.ceil(x / step) * step
            }
        } : d3_scale_niceIdentity
    }

    var d3_scale_niceIdentity = {floor: d3_identity, ceil: d3_identity};

    function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
        var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
        if (domain[k] < domain[0]) {
            domain = domain.slice().reverse();
            range = range.slice().reverse()
        }
        while (++j <= k) {
            u.push(uninterpolate(domain[j - 1], domain[j]));
            i.push(interpolate(range[j - 1], range[j]))
        }
        return function (x) {
            var j = d3.bisect(domain, x, 1, k) - 1;
            return i[j](u[j](x))
        }
    }

    d3.scale.linear = function () {
        return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false)
    };
    function d3_scale_linear(domain, range, interpolate, clamp) {
        var output, input;

        function rescale() {
            var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
            output = linear(domain, range, uninterpolate, interpolate);
            input = linear(range, domain, uninterpolate, d3_interpolate);
            return scale
        }

        function scale(x) {
            return output(x)
        }

        scale.invert = function (y) {
            return input(y)
        };
        scale.domain = function (x) {
            if (!arguments.length) {
                return domain
            }
            domain = x.map(Number);
            return rescale()
        };
        scale.range = function (x) {
            if (!arguments.length) {
                return range
            }
            range = x;
            return rescale()
        };
        scale.rangeRound = function (x) {
            return scale.range(x).interpolate(d3_interpolateRound)
        };
        scale.clamp = function (x) {
            if (!arguments.length) {
                return clamp
            }
            clamp = x;
            return rescale()
        };
        scale.interpolate = function (x) {
            if (!arguments.length) {
                return interpolate
            }
            interpolate = x;
            return rescale()
        };
        scale.ticks = function (m) {
            return d3_scale_linearTicks(domain, m)
        };
        scale.tickFormat = function (m, format) {
            return d3_scale_linearTickFormat(domain, m, format)
        };
        scale.nice = function (m) {
            d3_scale_linearNice(domain, m);
            return rescale()
        };
        scale.copy = function () {
            return d3_scale_linear(domain, range, interpolate, clamp)
        };
        return rescale()
    }

    function d3_scale_linearRebind(scale, linear) {
        return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp")
    }

    function d3_scale_linearNice(domain, m) {
        return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]))
    }

    function d3_scale_linearTickRange(domain, m) {
        if (m == null) {
            m = 10
        }
        var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
        if (err <= 0.15) {
            step *= 10
        } else {
            if (err <= 0.35) {
                step *= 5
            } else {
                if (err <= 0.75) {
                    step *= 2
                }
            }
        }
        extent[0] = Math.ceil(extent[0] / step) * step;
        extent[1] = Math.floor(extent[1] / step) * step + step * 0.5;
        extent[2] = step;
        return extent
    }

    function d3_scale_linearTicks(domain, m) {
        return d3.range.apply(d3, d3_scale_linearTickRange(domain, m))
    }

    function d3_scale_linearTickFormat(domain, m, format) {
        var range = d3_scale_linearTickRange(domain, m);
        if (format) {
            var match = d3_format_re.exec(format);
            match.shift();
            if (match[8] === "s") {
                var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
                if (!match[7]) {
                    match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]))
                }
                match[8] = "f";
                format = d3.format(match.join(""));
                return function (d) {
                    return format(prefix.scale(d)) + prefix.symbol
                }
            }
            if (!match[7]) {
                match[7] = "." + d3_scale_linearFormatPrecision(match[8], range)
            }
            format = match.join("")
        } else {
            format = ",." + d3_scale_linearPrecision(range[2]) + "f"
        }
        return d3.format(format)
    }

    var d3_scale_linearFormatSignificant = {s: 1, g: 1, p: 1, r: 1, e: 1};

    function d3_scale_linearPrecision(value) {
        return -Math.floor(Math.log(value) / Math.LN10 + 0.01)
    }

    function d3_scale_linearFormatPrecision(type, range) {
        var p = d3_scale_linearPrecision(range[2]);
        return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2
    }

    d3.scale.log = function () {
        return d3_scale_log(d3.scale.linear().domain([0, 1]), 10, true, [1, 10])
    };
    function d3_scale_log(linear, base, positive, domain) {
        function log(x) {
            return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base)
        }

        function pow(x) {
            return positive ? Math.pow(base, x) : -Math.pow(base, -x)
        }

        function scale(x) {
            return linear(log(x))
        }

        scale.invert = function (x) {
            return pow(linear.invert(x))
        };
        scale.domain = function (x) {
            if (!arguments.length) {
                return domain
            }
            positive = x[0] >= 0;
            linear.domain((domain = x.map(Number)).map(log));
            return scale
        };
        scale.base = function (_) {
            if (!arguments.length) {
                return base
            }
            base = +_;
            linear.domain(domain.map(log));
            return scale
        };
        scale.nice = function () {
            var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
            linear.domain(niced);
            domain = niced.map(pow);
            return scale
        };
        scale.ticks = function () {
            var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
            if (isFinite(j - i)) {
                if (positive) {
                    for (; i < j; i++) {
                        for (var k = 1; k < n; k++) {
                            ticks.push(pow(i) * k)
                        }
                    }
                    ticks.push(pow(i))
                } else {
                    ticks.push(pow(i));
                    for (; i++ < j;) {
                        for (var k = n - 1; k > 0; k--) {
                            ticks.push(pow(i) * k)
                        }
                    }
                }
                for (i = 0; ticks[i] < u; i++) {
                }
                for (j = ticks.length; ticks[j - 1] > v; j--) {
                }
                ticks = ticks.slice(i, j)
            }
            return ticks
        };
        scale.tickFormat = function (n, format) {
            if (!arguments.length) {
                return d3_scale_logFormat
            }
            if (arguments.length < 2) {
                format = d3_scale_logFormat
            } else {
                if (typeof format !== "function") {
                    format = d3.format(format)
                }
            }
            var k = Math.max(0.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, Math.floor), e;
            return function (d) {
                return d / pow(f(log(d) + e)) <= k ? format(d) : ""
            }
        };
        scale.copy = function () {
            return d3_scale_log(linear.copy(), base, positive, domain)
        };
        return d3_scale_linearRebind(scale, linear)
    }

    var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
        floor: function (x) {
            return -Math.ceil(-x)
        }, ceil: function (x) {
            return -Math.floor(-x)
        }
    };
    d3.scale.pow = function () {
        return d3_scale_pow(d3.scale.linear(), 1, [0, 1])
    };
    function d3_scale_pow(linear, exponent, domain) {
        var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);

        function scale(x) {
            return linear(powp(x))
        }

        scale.invert = function (x) {
            return powb(linear.invert(x))
        };
        scale.domain = function (x) {
            if (!arguments.length) {
                return domain
            }
            linear.domain((domain = x.map(Number)).map(powp));
            return scale
        };
        scale.ticks = function (m) {
            return d3_scale_linearTicks(domain, m)
        };
        scale.tickFormat = function (m, format) {
            return d3_scale_linearTickFormat(domain, m, format)
        };
        scale.nice = function (m) {
            return scale.domain(d3_scale_linearNice(domain, m))
        };
        scale.exponent = function (x) {
            if (!arguments.length) {
                return exponent
            }
            powp = d3_scale_powPow(exponent = x);
            powb = d3_scale_powPow(1 / exponent);
            linear.domain(domain.map(powp));
            return scale
        };
        scale.copy = function () {
            return d3_scale_pow(linear.copy(), exponent, domain)
        };
        return d3_scale_linearRebind(scale, linear)
    }

    function d3_scale_powPow(e) {
        return function (x) {
            return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e)
        }
    }

    d3.scale.sqrt = function () {
        return d3.scale.pow().exponent(0.5)
    };
    d3.scale.ordinal = function () {
        return d3_scale_ordinal([], {t: "range", a: [[]]})
    };
    function d3_scale_ordinal(domain, ranger) {
        var index, range, rangeBand;

        function scale(x) {
            return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length]
        }

        function steps(start, step) {
            return d3.range(domain.length).map(function (i) {
                return start + step * i
            })
        }

        scale.domain = function (x) {
            if (!arguments.length) {
                return domain
            }
            domain = [];
            index = new d3_Map();
            var i = -1, n = x.length, xi;
            while (++i < n) {
                if (!index.has(xi = x[i])) {
                    index.set(xi, domain.push(xi))
                }
            }
            return scale[ranger.t].apply(scale, ranger.a)
        };
        scale.range = function (x) {
            if (!arguments.length) {
                return range
            }
            range = x;
            rangeBand = 0;
            ranger = {t: "range", a: arguments};
            return scale
        };
        scale.rangePoints = function (x, padding) {
            if (arguments.length < 2) {
                padding = 0
            }
            var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
            range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
            rangeBand = 0;
            ranger = {t: "rangePoints", a: arguments};
            return scale
        };
        scale.rangeBands = function (x, padding, outerPadding) {
            if (arguments.length < 2) {
                padding = 0
            }
            if (arguments.length < 3) {
                outerPadding = padding
            }
            var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
            range = steps(start + step * outerPadding, step);
            if (reverse) {
                range.reverse()
            }
            rangeBand = step * (1 - padding);
            ranger = {t: "rangeBands", a: arguments};
            return scale
        };
        scale.rangeRoundBands = function (x, padding, outerPadding) {
            if (arguments.length < 2) {
                padding = 0
            }
            if (arguments.length < 3) {
                outerPadding = padding
            }
            var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
            range = steps(start + Math.round(error / 2), step);
            if (reverse) {
                range.reverse()
            }
            rangeBand = Math.round(step * (1 - padding));
            ranger = {t: "rangeRoundBands", a: arguments};
            return scale
        };
        scale.rangeBand = function () {
            return rangeBand
        };
        scale.rangeExtent = function () {
            return d3_scaleExtent(ranger.a[0])
        };
        scale.copy = function () {
            return d3_scale_ordinal(domain, ranger)
        };
        return scale.domain(domain)
    }

    d3.scale.category10 = function () {
        return d3.scale.ordinal().range(d3_category10)
    };
    d3.scale.category20 = function () {
        return d3.scale.ordinal().range(d3_category20)
    };
    d3.scale.category20b = function () {
        return d3.scale.ordinal().range(d3_category20b)
    };
    d3.scale.category20c = function () {
        return d3.scale.ordinal().range(d3_category20c)
    };
    var d3_category10 = [2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175].map(d3_rgbString);
    var d3_category20 = [2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725].map(d3_rgbString);
    var d3_category20b = [3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654].map(d3_rgbString);
    var d3_category20c = [3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081].map(d3_rgbString);
    d3.scale.quantile = function () {
        return d3_scale_quantile([], [])
    };
    function d3_scale_quantile(domain, range) {
        var thresholds;

        function rescale() {
            var k = 0, q = range.length;
            thresholds = [];
            while (++k < q) {
                thresholds[k - 1] = d3.quantile(domain, k / q)
            }
            return scale
        }

        function scale(x) {
            if (!isNaN(x = +x)) {
                return range[d3.bisect(thresholds, x)]
            }
        }

        scale.domain = function (x) {
            if (!arguments.length) {
                return domain
            }
            domain = x.filter(d3_number).sort(d3_ascending);
            return rescale()
        };
        scale.range = function (x) {
            if (!arguments.length) {
                return range
            }
            range = x;
            return rescale()
        };
        scale.quantiles = function () {
            return thresholds
        };
        scale.invertExtent = function (y) {
            y = range.indexOf(y);
            return y < 0 ? [NaN, NaN] : [y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1]]
        };
        scale.copy = function () {
            return d3_scale_quantile(domain, range)
        };
        return rescale()
    }

    d3.scale.quantize = function () {
        return d3_scale_quantize(0, 1, [0, 1])
    };
    function d3_scale_quantize(x0, x1, range) {
        var kx, i;

        function scale(x) {
            return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))]
        }

        function rescale() {
            kx = range.length / (x1 - x0);
            i = range.length - 1;
            return scale
        }

        scale.domain = function (x) {
            if (!arguments.length) {
                return [x0, x1]
            }
            x0 = +x[0];
            x1 = +x[x.length - 1];
            return rescale()
        };
        scale.range = function (x) {
            if (!arguments.length) {
                return range
            }
            range = x;
            return rescale()
        };
        scale.invertExtent = function (y) {
            y = range.indexOf(y);
            y = y < 0 ? NaN : y / kx + x0;
            return [y, y + 1 / kx]
        };
        scale.copy = function () {
            return d3_scale_quantize(x0, x1, range)
        };
        return rescale()
    }

    d3.scale.threshold = function () {
        return d3_scale_threshold([0.5], [0, 1])
    };
    function d3_scale_threshold(domain, range) {
        function scale(x) {
            if (x <= x) {
                return range[d3.bisect(domain, x)]
            }
        }

        scale.domain = function (_) {
            if (!arguments.length) {
                return domain
            }
            domain = _;
            return scale
        };
        scale.range = function (_) {
            if (!arguments.length) {
                return range
            }
            range = _;
            return scale
        };
        scale.invertExtent = function (y) {
            y = range.indexOf(y);
            return [domain[y - 1], domain[y]]
        };
        scale.copy = function () {
            return d3_scale_threshold(domain, range)
        };
        return scale
    }

    d3.scale.identity = function () {
        return d3_scale_identity([0, 1])
    };
    function d3_scale_identity(domain) {
        function identity(x) {
            return +x
        }

        identity.invert = identity;
        identity.domain = identity.range = function (x) {
            if (!arguments.length) {
                return domain
            }
            domain = x.map(identity);
            return identity
        };
        identity.ticks = function (m) {
            return d3_scale_linearTicks(domain, m)
        };
        identity.tickFormat = function (m, format) {
            return d3_scale_linearTickFormat(domain, m, format)
        };
        identity.copy = function () {
            return d3_scale_identity(domain)
        };
        return identity
    }

    d3.svg = {};
    d3.svg.arc = function () {
        var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;

        function arc() {
            var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
            return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0Z"
        }

        arc.innerRadius = function (v) {
            if (!arguments.length) {
                return innerRadius
            }
            innerRadius = d3_functor(v);
            return arc
        };
        arc.outerRadius = function (v) {
            if (!arguments.length) {
                return outerRadius
            }
            outerRadius = d3_functor(v);
            return arc
        };
        arc.startAngle = function (v) {
            if (!arguments.length) {
                return startAngle
            }
            startAngle = d3_functor(v);
            return arc
        };
        arc.endAngle = function (v) {
            if (!arguments.length) {
                return endAngle
            }
            endAngle = d3_functor(v);
            return arc
        };
        arc.centroid = function () {
            var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
            return [Math.cos(a) * r, Math.sin(a) * r]
        };
        return arc
    };
    var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;

    function d3_svg_arcInnerRadius(d) {
        return d.innerRadius
    }

    function d3_svg_arcOuterRadius(d) {
        return d.outerRadius
    }

    function d3_svg_arcStartAngle(d) {
        return d.startAngle
    }

    function d3_svg_arcEndAngle(d) {
        return d.endAngle
    }

    function d3_svg_line(projection) {
        var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = 0.7;

        function line(data) {
            var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);

            function segment() {
                segments.push("M", interpolate(projection(points), tension))
            }

            while (++i < n) {
                if (defined.call(this, d = data[i], i)) {
                    points.push([+fx.call(this, d, i), +fy.call(this, d, i)])
                } else {
                    if (points.length) {
                        segment();
                        points = []
                    }
                }
            }
            if (points.length) {
                segment()
            }
            return segments.length ? segments.join("") : null
        }

        line.x = function (_) {
            if (!arguments.length) {
                return x
            }
            x = _;
            return line
        };
        line.y = function (_) {
            if (!arguments.length) {
                return y
            }
            y = _;
            return line
        };
        line.defined = function (_) {
            if (!arguments.length) {
                return defined
            }
            defined = _;
            return line
        };
        line.interpolate = function (_) {
            if (!arguments.length) {
                return interpolateKey
            }
            if (typeof _ === "function") {
                interpolateKey = interpolate = _
            } else {
                interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key
            }
            return line
        };
        line.tension = function (_) {
            if (!arguments.length) {
                return tension
            }
            tension = _;
            return line
        };
        return line
    }

    d3.svg.line = function () {
        return d3_svg_line(d3_identity)
    };
    var d3_svg_lineInterpolators = d3.map({
        linear: d3_svg_lineLinear,
        "linear-closed": d3_svg_lineLinearClosed,
        step: d3_svg_lineStep,
        "step-before": d3_svg_lineStepBefore,
        "step-after": d3_svg_lineStepAfter,
        basis: d3_svg_lineBasis,
        "basis-open": d3_svg_lineBasisOpen,
        "basis-closed": d3_svg_lineBasisClosed,
        bundle: d3_svg_lineBundle,
        cardinal: d3_svg_lineCardinal,
        "cardinal-open": d3_svg_lineCardinalOpen,
        "cardinal-closed": d3_svg_lineCardinalClosed,
        monotone: d3_svg_lineMonotone
    });
    d3_svg_lineInterpolators.forEach(function (key, value) {
        value.key = key;
        value.closed = /-closed$/.test(key)
    });
    function d3_svg_lineLinear(points) {
        return points.join("L")
    }

    function d3_svg_lineLinearClosed(points) {
        return d3_svg_lineLinear(points) + "Z"
    }

    function d3_svg_lineStep(points) {
        var i = 0, n = points.length, p = points[0], path = [p[0], ",", p[1]];
        while (++i < n) {
            path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1])
        }
        if (n > 1) {
            path.push("H", p[0])
        }
        return path.join("")
    }

    function d3_svg_lineStepBefore(points) {
        var i = 0, n = points.length, p = points[0], path = [p[0], ",", p[1]];
        while (++i < n) {
            path.push("V", (p = points[i])[1], "H", p[0])
        }
        return path.join("")
    }

    function d3_svg_lineStepAfter(points) {
        var i = 0, n = points.length, p = points[0], path = [p[0], ",", p[1]];
        while (++i < n) {
            path.push("H", (p = points[i])[0], "V", p[1])
        }
        return path.join("")
    }

    function d3_svg_lineCardinalOpen(points, tension) {
        return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension))
    }

    function d3_svg_lineCardinalClosed(points, tension) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension))
    }

    function d3_svg_lineCardinal(points, tension) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension))
    }

    function d3_svg_lineHermite(points, tangents) {
        if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
            return d3_svg_lineLinear(points)
        }
        var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
        if (quad) {
            path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
            p0 = points[1];
            pi = 2
        }
        if (tangents.length > 1) {
            t = tangents[1];
            p = points[pi];
            pi++;
            path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
            for (var i = 2; i < tangents.length; i++, pi++) {
                p = points[pi];
                t = tangents[i];
                path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1]
            }
        }
        if (quad) {
            var lp = points[pi];
            path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1]
        }
        return path
    }

    function d3_svg_lineCardinalTangents(points, tension) {
        var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
        while (++i < n) {
            p0 = p1;
            p1 = p2;
            p2 = points[i];
            tangents.push([a * (p2[0] - p0[0]), a * (p2[1] - p0[1])])
        }
        return tangents
    }

    function d3_svg_lineBasis(points) {
        if (points.length < 3) {
            return d3_svg_lineLinear(points)
        }
        var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [x0, x0, x0, (pi = points[1])[0]], py = [y0, y0, y0, pi[1]], path = [x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
        points.push(points[n - 1]);
        while (++i <= n) {
            pi = points[i];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py)
        }
        points.pop();
        path.push("L", pi);
        return path.join("")
    }

    function d3_svg_lineBasisOpen(points) {
        if (points.length < 4) {
            return d3_svg_lineLinear(points)
        }
        var path = [], i = -1, n = points.length, pi, px = [0], py = [0];
        while (++i < 3) {
            pi = points[i];
            px.push(pi[0]);
            py.push(pi[1])
        }
        path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
        --i;
        while (++i < n) {
            pi = points[i];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py)
        }
        return path.join("")
    }

    function d3_svg_lineBasisClosed(points) {
        var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
        while (++i < 4) {
            pi = points[i % n];
            px.push(pi[0]);
            py.push(pi[1])
        }
        path = [d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
        --i;
        while (++i < m) {
            pi = points[i % n];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py)
        }
        return path.join("")
    }

    function d3_svg_lineBundle(points, tension) {
        var n = points.length - 1;
        if (n) {
            var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
            while (++i <= n) {
                p = points[i];
                t = i / n;
                p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
                p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy)
            }
        }
        return d3_svg_lineBasis(points)
    }

    function d3_svg_lineDot4(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]
    }

    var d3_svg_lineBasisBezier1 = [0, 2 / 3, 1 / 3, 0], d3_svg_lineBasisBezier2 = [0, 1 / 3, 2 / 3, 0], d3_svg_lineBasisBezier3 = [0, 1 / 6, 2 / 3, 1 / 6];

    function d3_svg_lineBasisBezier(path, x, y) {
        path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y))
    }

    function d3_svg_lineSlope(p0, p1) {
        return (p1[1] - p0[1]) / (p1[0] - p0[0])
    }

    function d3_svg_lineFiniteDifferences(points) {
        var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
        while (++i < j) {
            m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2
        }
        m[i] = d;
        return m
    }

    function d3_svg_lineMonotoneTangents(points) {
        var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
        while (++i < j) {
            d = d3_svg_lineSlope(points[i], points[i + 1]);
            if (abs(d) < ε) {
                m[i] = m[i + 1] = 0
            } else {
                a = m[i] / d;
                b = m[i + 1] / d;
                s = a * a + b * b;
                if (s > 9) {
                    s = d * 3 / Math.sqrt(s);
                    m[i] = s * a;
                    m[i + 1] = s * b
                }
            }
        }
        i = -1;
        while (++i <= j) {
            s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
            tangents.push([s || 0, m[i] * s || 0])
        }
        return tangents
    }

    function d3_svg_lineMonotone(points) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points))
    }

    d3.svg.line.radial = function () {
        var line = d3_svg_line(d3_svg_lineRadial);
        line.radius = line.x, delete line.x;
        line.angle = line.y, delete line.y;
        return line
    };
    function d3_svg_lineRadial(points) {
        var point, i = -1, n = points.length, r, a;
        while (++i < n) {
            point = points[i];
            r = point[0];
            a = point[1] + d3_svg_arcOffset;
            point[0] = r * Math.cos(a);
            point[1] = r * Math.sin(a)
        }
        return points
    }

    function d3_svg_area(projection) {
        var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = 0.7;

        function area(data) {
            var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function () {
                return x
            } : d3_functor(x1), fy1 = y0 === y1 ? function () {
                return y
            } : d3_functor(y1), x, y;

            function segment() {
                segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z")
            }

            while (++i < n) {
                if (defined.call(this, d = data[i], i)) {
                    points0.push([x = +fx0.call(this, d, i), y = +fy0.call(this, d, i)]);
                    points1.push([+fx1.call(this, d, i), +fy1.call(this, d, i)])
                } else {
                    if (points0.length) {
                        segment();
                        points0 = [];
                        points1 = []
                    }
                }
            }
            if (points0.length) {
                segment()
            }
            return segments.length ? segments.join("") : null
        }

        area.x = function (_) {
            if (!arguments.length) {
                return x1
            }
            x0 = x1 = _;
            return area
        };
        area.x0 = function (_) {
            if (!arguments.length) {
                return x0
            }
            x0 = _;
            return area
        };
        area.x1 = function (_) {
            if (!arguments.length) {
                return x1
            }
            x1 = _;
            return area
        };
        area.y = function (_) {
            if (!arguments.length) {
                return y1
            }
            y0 = y1 = _;
            return area
        };
        area.y0 = function (_) {
            if (!arguments.length) {
                return y0
            }
            y0 = _;
            return area
        };
        area.y1 = function (_) {
            if (!arguments.length) {
                return y1
            }
            y1 = _;
            return area
        };
        area.defined = function (_) {
            if (!arguments.length) {
                return defined
            }
            defined = _;
            return area
        };
        area.interpolate = function (_) {
            if (!arguments.length) {
                return interpolateKey
            }
            if (typeof _ === "function") {
                interpolateKey = interpolate = _
            } else {
                interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key
            }
            interpolateReverse = interpolate.reverse || interpolate;
            L = interpolate.closed ? "M" : "L";
            return area
        };
        area.tension = function (_) {
            if (!arguments.length) {
                return tension
            }
            tension = _;
            return area
        };
        return area
    }

    d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
    d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
    d3.svg.area = function () {
        return d3_svg_area(d3_identity)
    };
    d3.svg.area.radial = function () {
        var area = d3_svg_area(d3_svg_lineRadial);
        area.radius = area.x, delete area.x;
        area.innerRadius = area.x0, delete area.x0;
        area.outerRadius = area.x1, delete area.x1;
        area.angle = area.y, delete area.y;
        area.startAngle = area.y0, delete area.y0;
        area.endAngle = area.y1, delete area.y1;
        return area
    };
    d3.svg.chord = function () {
        var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;

        function chord(d, i) {
            var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
            return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z"
        }

        function subgroup(self, f, d, i) {
            var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
            return {
                r: r,
                a0: a0,
                a1: a1,
                p0: [r * Math.cos(a0), r * Math.sin(a0)],
                p1: [r * Math.cos(a1), r * Math.sin(a1)]
            }
        }

        function equals(a, b) {
            return a.a0 == b.a0 && a.a1 == b.a1
        }

        function arc(r, p, a) {
            return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p
        }

        function curve(r0, p0, r1, p1) {
            return "Q 0,0 " + p1
        }

        chord.radius = function (v) {
            if (!arguments.length) {
                return radius
            }
            radius = d3_functor(v);
            return chord
        };
        chord.source = function (v) {
            if (!arguments.length) {
                return source
            }
            source = d3_functor(v);
            return chord
        };
        chord.target = function (v) {
            if (!arguments.length) {
                return target
            }
            target = d3_functor(v);
            return chord
        };
        chord.startAngle = function (v) {
            if (!arguments.length) {
                return startAngle
            }
            startAngle = d3_functor(v);
            return chord
        };
        chord.endAngle = function (v) {
            if (!arguments.length) {
                return endAngle
            }
            endAngle = d3_functor(v);
            return chord
        };
        return chord
    };
    function d3_svg_chordRadius(d) {
        return d.radius
    }

    d3.svg.diagonal = function () {
        var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;

        function diagonal(d, i) {
            var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [p0, {
                x: p0.x,
                y: m
            }, {x: p3.x, y: m}, p3];
            p = p.map(projection);
            return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3]
        }

        diagonal.source = function (x) {
            if (!arguments.length) {
                return source
            }
            source = d3_functor(x);
            return diagonal
        };
        diagonal.target = function (x) {
            if (!arguments.length) {
                return target
            }
            target = d3_functor(x);
            return diagonal
        };
        diagonal.projection = function (x) {
            if (!arguments.length) {
                return projection
            }
            projection = x;
            return diagonal
        };
        return diagonal
    };
    function d3_svg_diagonalProjection(d) {
        return [d.x, d.y]
    }

    d3.svg.diagonal.radial = function () {
        var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
        diagonal.projection = function (x) {
            return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection
        };
        return diagonal
    };
    function d3_svg_diagonalRadialProjection(projection) {
        return function () {
            var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
            return [r * Math.cos(a), r * Math.sin(a)]
        }
    }

    d3.svg.symbol = function () {
        var type = d3_svg_symbolType, size = d3_svg_symbolSize;

        function symbol(d, i) {
            return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i))
        }

        symbol.type = function (x) {
            if (!arguments.length) {
                return type
            }
            type = d3_functor(x);
            return symbol
        };
        symbol.size = function (x) {
            if (!arguments.length) {
                return size
            }
            size = d3_functor(x);
            return symbol
        };
        return symbol
    };
    function d3_svg_symbolSize() {
        return 64
    }

    function d3_svg_symbolType() {
        return "circle"
    }

    function d3_svg_symbolCircle(size) {
        var r = Math.sqrt(size / π);
        return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z"
    }

    var d3_svg_symbols = d3.map({
        circle: d3_svg_symbolCircle, cross: function (size) {
            var r = Math.sqrt(size / 5) / 2;
            return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z"
        }, diamond: function (size) {
            var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
            return "M0," + -ry + "L" + rx + ",0 0," + ry + " " + -rx + ",0Z"
        }, square: function (size) {
            var r = Math.sqrt(size) / 2;
            return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z"
        }, "triangle-down": function (size) {
            var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
            return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z"
        }, "triangle-up": function (size) {
            var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
            return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z"
        }
    });
    d3.svg.symbolTypes = d3_svg_symbols.keys();
    var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);

    function d3_transition(groups, id) {
        d3_subclass(groups, d3_transitionPrototype);
        groups.id = id;
        return groups
    }

    var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
    d3_transitionPrototype.call = d3_selectionPrototype.call;
    d3_transitionPrototype.empty = d3_selectionPrototype.empty;
    d3_transitionPrototype.node = d3_selectionPrototype.node;
    d3_transitionPrototype.size = d3_selectionPrototype.size;
    d3.transition = function (selection) {
        return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition()
    };
    d3.transition.prototype = d3_transitionPrototype;
    d3_transitionPrototype.select = function (selector) {
        var id = this.id, subgroups = [], subgroup, subnode, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
                    if ("__data__" in node) {
                        subnode.__data__ = node.__data__
                    }
                    d3_transitionNode(subnode, i, id, node.__transition__[id]);
                    subgroup.push(subnode)
                } else {
                    subgroup.push(null)
                }
            }
        }
        return d3_transition(subgroups, id)
    };
    d3_transitionPrototype.selectAll = function (selector) {
        var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    transition = node.__transition__[id];
                    subnodes = selector.call(node, node.__data__, i, j);
                    subgroups.push(subgroup = []);
                    for (var k = -1, o = subnodes.length; ++k < o;) {
                        if (subnode = subnodes[k]) {
                            d3_transitionNode(subnode, k, id, transition)
                        }
                        subgroup.push(subnode)
                    }
                }
            }
        }
        return d3_transition(subgroups, id)
    };
    d3_transitionPrototype.filter = function (filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== "function") {
            filter = d3_selection_filter(filter)
        }
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
                    subgroup.push(node)
                }
            }
        }
        return d3_transition(subgroups, this.id)
    };
    d3_transitionPrototype.tween = function (name, tween) {
        var id = this.id;
        if (arguments.length < 2) {
            return this.node().__transition__[id].tween.get(name)
        }
        return d3_selection_each(this, tween == null ? function (node) {
            node.__transition__[id].tween.remove(name)
        } : function (node) {
            node.__transition__[id].tween.set(name, tween)
        })
    };
    function d3_transition_tween(groups, name, value, tween) {
        var id = groups.id;
        return d3_selection_each(groups, typeof value === "function" ? function (node, i, j) {
            node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)))
        } : (value = tween(value), function (node) {
            node.__transition__[id].tween.set(name, value)
        }))
    }

    d3_transitionPrototype.attr = function (nameNS, value) {
        if (arguments.length < 2) {
            for (value in nameNS) {
                this.attr(value, nameNS[value])
            }
            return this
        }
        var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);

        function attrNull() {
            this.removeAttribute(name)
        }

        function attrNullNS() {
            this.removeAttributeNS(name.space, name.local)
        }

        function attrTween(b) {
            return b == null ? attrNull : (b += "", function () {
                var a = this.getAttribute(name), i;
                return a !== b && (i = interpolate(a, b), function (t) {
                        this.setAttribute(name, i(t))
                    })
            })
        }

        function attrTweenNS(b) {
            return b == null ? attrNullNS : (b += "", function () {
                var a = this.getAttributeNS(name.space, name.local), i;
                return a !== b && (i = interpolate(a, b), function (t) {
                        this.setAttributeNS(name.space, name.local, i(t))
                    })
            })
        }

        return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween)
    };
    d3_transitionPrototype.attrTween = function (nameNS, tween) {
        var name = d3.ns.qualify(nameNS);

        function attrTween(d, i) {
            var f = tween.call(this, d, i, this.getAttribute(name));
            return f && function (t) {
                    this.setAttribute(name, f(t))
                }
        }

        function attrTweenNS(d, i) {
            var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
            return f && function (t) {
                    this.setAttributeNS(name.space, name.local, f(t))
                }
        }

        return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween)
    };
    d3_transitionPrototype.style = function (name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof name !== "string") {
                if (n < 2) {
                    value = ""
                }
                for (priority in name) {
                    this.style(priority, name[priority], value)
                }
                return this
            }
            priority = ""
        }
        function styleNull() {
            this.style.removeProperty(name)
        }

        function styleString(b) {
            return b == null ? styleNull : (b += "", function () {
                var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
                return a !== b && (i = d3_interpolate(a, b), function (t) {
                        this.style.setProperty(name, i(t), priority)
                    })
            })
        }

        return d3_transition_tween(this, "style." + name, value, styleString)
    };
    d3_transitionPrototype.styleTween = function (name, tween, priority) {
        if (arguments.length < 3) {
            priority = ""
        }
        function styleTween(d, i) {
            var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
            return f && function (t) {
                    this.style.setProperty(name, f(t), priority)
                }
        }

        return this.tween("style." + name, styleTween)
    };
    d3_transitionPrototype.text = function (value) {
        return d3_transition_tween(this, "text", value, d3_transition_text)
    };
    function d3_transition_text(b) {
        if (b == null) {
            b = ""
        }
        return function () {
            this.textContent = b
        }
    }

    d3_transitionPrototype.remove = function () {
        return this.each("end.transition", function () {
            var p;
            if (this.__transition__.count < 2 && (p = this.parentNode)) {
                p.removeChild(this)
            }
        })
    };
    d3_transitionPrototype.ease = function (value) {
        var id = this.id;
        if (arguments.length < 1) {
            return this.node().__transition__[id].ease
        }
        if (typeof value !== "function") {
            value = d3.ease.apply(d3, arguments)
        }
        return d3_selection_each(this, function (node) {
            node.__transition__[id].ease = value
        })
    };
    d3_transitionPrototype.delay = function (value) {
        var id = this.id;
        if (arguments.length < 1) {
            return this.node().__transition__[id].delay
        }
        return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
            node.__transition__[id].delay = +value.call(node, node.__data__, i, j)
        } : (value = +value, function (node) {
            node.__transition__[id].delay = value
        }))
    };
    d3_transitionPrototype.duration = function (value) {
        var id = this.id;
        if (arguments.length < 1) {
            return this.node().__transition__[id].duration
        }
        return d3_selection_each(this, typeof value === "function" ? function (node, i, j) {
            node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j))
        } : (value = Math.max(1, value), function (node) {
            node.__transition__[id].duration = value
        }))
    };
    d3_transitionPrototype.each = function (type, listener) {
        var id = this.id;
        if (arguments.length < 2) {
            var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
            d3_transitionInheritId = id;
            d3_selection_each(this, function (node, i, j) {
                d3_transitionInherit = node.__transition__[id];
                type.call(node, node.__data__, i, j)
            });
            d3_transitionInherit = inherit;
            d3_transitionInheritId = inheritId
        } else {
            d3_selection_each(this, function (node) {
                var transition = node.__transition__[id];
                (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener)
            })
        }
        return this
    };
    d3_transitionPrototype.transition = function () {
        var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                if (node = group[i]) {
                    transition = Object.create(node.__transition__[id0]);
                    transition.delay += transition.duration;
                    d3_transitionNode(node, i, id1, transition)
                }
                subgroup.push(node)
            }
        }
        return d3_transition(subgroups, id1)
    };
    function d3_transitionNode(node, i, id, inherit) {
        var lock = node.__transition__ || (node.__transition__ = {active: 0, count: 0}), transition = lock[id];
        if (!transition) {
            var time = inherit.time;
            transition = lock[id] = {
                tween: new d3_Map(),
                time: time,
                ease: inherit.ease,
                delay: inherit.delay,
                duration: inherit.duration
            };
            ++lock.count;
            d3.timer(function (elapsed) {
                var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
                timer.t = delay + time;
                if (delay <= elapsed) {
                    return start(elapsed - delay)
                }
                timer.c = start;
                function start(elapsed) {
                    if (lock.active > id) {
                        return stop()
                    }
                    lock.active = id;
                    transition.event && transition.event.start.call(node, d, i);
                    transition.tween.forEach(function (key, value) {
                        if (value = value.call(node, d, i)) {
                            tweened.push(value)
                        }
                    });
                    d3.timer(function () {
                        timer.c = tick(elapsed || 1) ? d3_true : tick;
                        return 1
                    }, 0, time)
                }

                function tick(elapsed) {
                    if (lock.active !== id) {
                        return stop()
                    }
                    var t = elapsed / duration, e = ease(t), n = tweened.length;
                    while (n > 0) {
                        tweened[--n].call(node, e)
                    }
                    if (t >= 1) {
                        transition.event && transition.event.end.call(node, d, i);
                        return stop()
                    }
                }

                function stop() {
                    if (--lock.count) {
                        delete lock[id]
                    } else {
                        delete node.__transition__
                    }
                    return 1
                }
            }, 0, time)
        }
    }

    d3.svg.axis = function () {
        var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [10], tickValues = null, tickFormat_;

        function axis(g) {
            g.each(function () {
                var g = d3.select(this);
                var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
                var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickTransform;
                var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([0]), pathUpdate = (path.enter().append("path").attr("class", "domain"), d3.transition(path));
                tickEnter.append("line");
                tickEnter.append("text");
                var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text");
                switch (orient) {
                    case"bottom":
                        tickTransform = d3_svg_axisX;
                        lineEnter.attr("y2", innerTickSize);
                        textEnter.attr("y", Math.max(innerTickSize, 0) + tickPadding);
                        lineUpdate.attr("x2", 0).attr("y2", innerTickSize);
                        textUpdate.attr("x", 0).attr("y", Math.max(innerTickSize, 0) + tickPadding);
                        text.attr("dy", ".71em").style("text-anchor", "middle");
                        pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
                        break;
                    case"top":
                        tickTransform = d3_svg_axisX;
                        lineEnter.attr("y2", -innerTickSize);
                        textEnter.attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
                        lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
                        textUpdate.attr("x", 0).attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
                        text.attr("dy", "0em").style("text-anchor", "middle");
                        pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
                        break;
                    case"left":
                        tickTransform = d3_svg_axisY;
                        lineEnter.attr("x2", -innerTickSize);
                        textEnter.attr("x", -(Math.max(innerTickSize, 0) + tickPadding));
                        lineUpdate.attr("x2", -innerTickSize).attr("y2", 0);
                        textUpdate.attr("x", -(Math.max(innerTickSize, 0) + tickPadding)).attr("y", 0);
                        text.attr("dy", ".32em").style("text-anchor", "end");
                        pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
                        break;
                    case"right":
                        tickTransform = d3_svg_axisY;
                        lineEnter.attr("x2", innerTickSize);
                        textEnter.attr("x", Math.max(innerTickSize, 0) + tickPadding);
                        lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
                        textUpdate.attr("x", Math.max(innerTickSize, 0) + tickPadding).attr("y", 0);
                        text.attr("dy", ".32em").style("text-anchor", "start");
                        pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
                        break
                }
                if (scale1.rangeBand) {
                    var x = scale1, dx = x.rangeBand() / 2;
                    scale0 = scale1 = function (d) {
                        return x(d) + dx
                    }
                } else {
                    if (scale0.rangeBand) {
                        scale0 = scale1
                    } else {
                        tickExit.call(tickTransform, scale1)
                    }
                }
                tickEnter.call(tickTransform, scale0);
                tickUpdate.call(tickTransform, scale1)
            })
        }

        axis.scale = function (x) {
            if (!arguments.length) {
                return scale
            }
            scale = x;
            return axis
        };
        axis.orient = function (x) {
            if (!arguments.length) {
                return orient
            }
            orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
            return axis
        };
        axis.ticks = function () {
            if (!arguments.length) {
                return tickArguments_
            }
            tickArguments_ = arguments;
            return axis
        };
        axis.tickValues = function (x) {
            if (!arguments.length) {
                return tickValues
            }
            tickValues = x;
            return axis
        };
        axis.tickFormat = function (x) {
            if (!arguments.length) {
                return tickFormat_
            }
            tickFormat_ = x;
            return axis
        };
        axis.tickSize = function (x) {
            var n = arguments.length;
            if (!n) {
                return innerTickSize
            }
            innerTickSize = +x;
            outerTickSize = +arguments[n - 1];
            return axis
        };
        axis.innerTickSize = function (x) {
            if (!arguments.length) {
                return innerTickSize
            }
            innerTickSize = +x;
            return axis
        };
        axis.outerTickSize = function (x) {
            if (!arguments.length) {
                return outerTickSize
            }
            outerTickSize = +x;
            return axis
        };
        axis.tickPadding = function (x) {
            if (!arguments.length) {
                return tickPadding
            }
            tickPadding = +x;
            return axis
        };
        axis.tickSubdivide = function () {
            return arguments.length && axis
        };
        return axis
    };
    var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {top: 1, right: 1, bottom: 1, left: 1};

    function d3_svg_axisX(selection, x) {
        selection.attr("transform", function (d) {
            return "translate(" + x(d) + ",0)"
        })
    }

    function d3_svg_axisY(selection, y) {
        selection.attr("transform", function (d) {
            return "translate(0," + y(d) + ")"
        })
    }

    d3.svg.brush = function () {
        var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [0, 0], yExtent = [0, 0], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];

        function brush(g) {
            g.each(function () {
                var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
                var background = g.selectAll(".background").data([0]);
                background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
                g.selectAll(".extent").data([0]).enter().append("rect").attr("class", "extent").style("cursor", "move");
                var resize = g.selectAll(".resize").data(resizes, d3_identity);
                resize.exit().remove();
                resize.enter().append("g").attr("class", function (d) {
                    return "resize " + d
                }).style("cursor", function (d) {
                    return d3_svg_brushCursor[d]
                }).append("rect").attr("x", function (d) {
                    return /[ew]$/.test(d) ? -3 : null
                }).attr("y", function (d) {
                    return /^[ns]/.test(d) ? -3 : null
                }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
                resize.style("display", brush.empty() ? "none" : null);
                var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
                if (x) {
                    range = d3_scaleRange(x);
                    backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
                    redrawX(gUpdate)
                }
                if (y) {
                    range = d3_scaleRange(y);
                    backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
                    redrawY(gUpdate)
                }
                redraw(gUpdate)
            })
        }

        brush.event = function (g) {
            g.each(function () {
                var event_ = event.of(this, arguments), extent1 = {
                    x: xExtent,
                    y: yExtent,
                    i: xExtentDomain,
                    j: yExtentDomain
                }, extent0 = this.__chart__ || extent1;
                this.__chart__ = extent1;
                if (d3_transitionInheritId) {
                    d3.select(this).transition().each("start.brush", function () {
                        xExtentDomain = extent0.i;
                        yExtentDomain = extent0.j;
                        xExtent = extent0.x;
                        yExtent = extent0.y;
                        event_({type: "brushstart"})
                    }).tween("brush:brush", function () {
                        var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
                        xExtentDomain = yExtentDomain = null;
                        return function (t) {
                            xExtent = extent1.x = xi(t);
                            yExtent = extent1.y = yi(t);
                            event_({type: "brush", mode: "resize"})
                        }
                    }).each("end.brush", function () {
                        xExtentDomain = extent1.i;
                        yExtentDomain = extent1.j;
                        event_({type: "brush", mode: "resize"});
                        event_({type: "brushend"})
                    })
                } else {
                    event_({type: "brushstart"});
                    event_({type: "brush", mode: "resize"});
                    event_({type: "brushend"})
                }
            })
        };
        function redraw(g) {
            g.selectAll(".resize").attr("transform", function (d) {
                return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")"
            })
        }

        function redrawX(g) {
            g.select(".extent").attr("x", xExtent[0]);
            g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0])
        }

        function redrawY(g) {
            g.select(".extent").attr("y", yExtent[0]);
            g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0])
        }

        function brushstart() {
            var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
            var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
            if (d3.event.changedTouches) {
                w.on("touchmove.brush", brushmove).on("touchend.brush", brushend)
            } else {
                w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend)
            }
            g.interrupt().selectAll("*").interrupt();
            if (dragging) {
                origin[0] = xExtent[0] - origin[0];
                origin[1] = yExtent[0] - origin[1]
            } else {
                if (resizing) {
                    var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
                    offset = [xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1]];
                    origin[0] = xExtent[ex];
                    origin[1] = yExtent[ey]
                } else {
                    if (d3.event.altKey) {
                        center = origin.slice()
                    }
                }
            }
            g.style("pointer-events", "none").selectAll(".resize").style("display", null);
            d3.select("body").style("cursor", eventTarget.style("cursor"));
            event_({type: "brushstart"});
            brushmove();
            function keydown() {
                if (d3.event.keyCode == 32) {
                    if (!dragging) {
                        center = null;
                        origin[0] -= xExtent[1];
                        origin[1] -= yExtent[1];
                        dragging = 2
                    }
                    d3_eventPreventDefault()
                }
            }

            function keyup() {
                if (d3.event.keyCode == 32 && dragging == 2) {
                    origin[0] += xExtent[1];
                    origin[1] += yExtent[1];
                    dragging = 0;
                    d3_eventPreventDefault()
                }
            }

            function brushmove() {
                var point = d3.mouse(target), moved = false;
                if (offset) {
                    point[0] += offset[0];
                    point[1] += offset[1]
                }
                if (!dragging) {
                    if (d3.event.altKey) {
                        if (!center) {
                            center = [(xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2]
                        }
                        origin[0] = xExtent[+(point[0] < center[0])];
                        origin[1] = yExtent[+(point[1] < center[1])]
                    } else {
                        center = null
                    }
                }
                if (resizingX && move1(point, x, 0)) {
                    redrawX(g);
                    moved = true
                }
                if (resizingY && move1(point, y, 1)) {
                    redrawY(g);
                    moved = true
                }
                if (moved) {
                    redraw(g);
                    event_({type: "brush", mode: dragging ? "move" : "resize"})
                }
            }

            function move1(point, scale, i) {
                var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
                if (dragging) {
                    r0 -= position;
                    r1 -= size + position
                }
                min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
                if (dragging) {
                    max = (min += position) + size
                } else {
                    if (center) {
                        position = Math.max(r0, Math.min(r1, 2 * center[i] - min))
                    }
                    if (position < min) {
                        max = min;
                        min = position
                    } else {
                        max = position
                    }
                }
                if (extent[0] != min || extent[1] != max) {
                    if (i) {
                        yExtentDomain = null
                    } else {
                        xExtentDomain = null
                    }
                    extent[0] = min;
                    extent[1] = max;
                    return true
                }
            }

            function brushend() {
                brushmove();
                g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
                d3.select("body").style("cursor", null);
                w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
                dragRestore();
                event_({type: "brushend"})
            }
        }

        brush.x = function (z) {
            if (!arguments.length) {
                return x
            }
            x = z;
            resizes = d3_svg_brushResizes[!x << 1 | !y];
            return brush
        };
        brush.y = function (z) {
            if (!arguments.length) {
                return y
            }
            y = z;
            resizes = d3_svg_brushResizes[!x << 1 | !y];
            return brush
        };
        brush.clamp = function (z) {
            if (!arguments.length) {
                return x && y ? [xClamp, yClamp] : x ? xClamp : y ? yClamp : null
            }
            if (x && y) {
                xClamp = !!z[0], yClamp = !!z[1]
            } else {
                if (x) {
                    xClamp = !!z
                } else {
                    if (y) {
                        yClamp = !!z
                    }
                }
            }
            return brush
        };
        brush.extent = function (z) {
            var x0, x1, y0, y1, t;
            if (!arguments.length) {
                if (x) {
                    if (xExtentDomain) {
                        x0 = xExtentDomain[0], x1 = xExtentDomain[1]
                    } else {
                        x0 = xExtent[0], x1 = xExtent[1];
                        if (x.invert) {
                            x0 = x.invert(x0), x1 = x.invert(x1)
                        }
                        if (x1 < x0) {
                            t = x0, x0 = x1, x1 = t
                        }
                    }
                }
                if (y) {
                    if (yExtentDomain) {
                        y0 = yExtentDomain[0], y1 = yExtentDomain[1]
                    } else {
                        y0 = yExtent[0], y1 = yExtent[1];
                        if (y.invert) {
                            y0 = y.invert(y0), y1 = y.invert(y1)
                        }
                        if (y1 < y0) {
                            t = y0, y0 = y1, y1 = t
                        }
                    }
                }
                return x && y ? [[x0, y0], [x1, y1]] : x ? [x0, x1] : y && [y0, y1]
            }
            if (x) {
                x0 = z[0], x1 = z[1];
                if (y) {
                    x0 = x0[0], x1 = x1[0]
                }
                xExtentDomain = [x0, x1];
                if (x.invert) {
                    x0 = x(x0), x1 = x(x1)
                }
                if (x1 < x0) {
                    t = x0, x0 = x1, x1 = t
                }
                if (x0 != xExtent[0] || x1 != xExtent[1]) {
                    xExtent = [x0, x1]
                }
            }
            if (y) {
                y0 = z[0], y1 = z[1];
                if (x) {
                    y0 = y0[1], y1 = y1[1]
                }
                yExtentDomain = [y0, y1];
                if (y.invert) {
                    y0 = y(y0), y1 = y(y1)
                }
                if (y1 < y0) {
                    t = y0, y0 = y1, y1 = t
                }
                if (y0 != yExtent[0] || y1 != yExtent[1]) {
                    yExtent = [y0, y1]
                }
            }
            return brush
        };
        brush.clear = function () {
            if (!brush.empty()) {
                xExtent = [0, 0], yExtent = [0, 0];
                xExtentDomain = yExtentDomain = null
            }
            return brush
        };
        brush.empty = function () {
            return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1]
        };
        return d3.rebind(brush, event, "on")
    };
    var d3_svg_brushCursor = {
        n: "ns-resize",
        e: "ew-resize",
        s: "ns-resize",
        w: "ew-resize",
        nw: "nwse-resize",
        ne: "nesw-resize",
        se: "nwse-resize",
        sw: "nesw-resize"
    };
    var d3_svg_brushResizes = [["n", "e", "s", "w", "nw", "ne", "se", "sw"], ["e", "w"], ["n", "s"], []];
    var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
    var d3_time_formatUtc = d3_time_format.utc;
    var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
    d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
    function d3_time_formatIsoNative(date) {
        return date.toISOString()
    }

    d3_time_formatIsoNative.parse = function (string) {
        var date = new Date(string);
        return isNaN(date) ? null : date
    };
    d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
    d3_time.second = d3_time_interval(function (date) {
        return new d3_date(Math.floor(date / 1000) * 1000)
    }, function (date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 1000)
    }, function (date) {
        return date.getSeconds()
    });
    d3_time.seconds = d3_time.second.range;
    d3_time.seconds.utc = d3_time.second.utc.range;
    d3_time.minute = d3_time_interval(function (date) {
        return new d3_date(Math.floor(date / 60000) * 60000)
    }, function (date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 60000)
    }, function (date) {
        return date.getMinutes()
    });
    d3_time.minutes = d3_time.minute.range;
    d3_time.minutes.utc = d3_time.minute.utc.range;
    d3_time.hour = d3_time_interval(function (date) {
        var timezone = date.getTimezoneOffset() / 60;
        return new d3_date((Math.floor(date / 3600000 - timezone) + timezone) * 3600000)
    }, function (date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 3600000)
    }, function (date) {
        return date.getHours()
    });
    d3_time.hours = d3_time.hour.range;
    d3_time.hours.utc = d3_time.hour.utc.range;
    d3_time.month = d3_time_interval(function (date) {
        date = d3_time.day(date);
        date.setDate(1);
        return date
    }, function (date, offset) {
        date.setMonth(date.getMonth() + offset)
    }, function (date) {
        return date.getMonth()
    });
    d3_time.months = d3_time.month.range;
    d3_time.months.utc = d3_time.month.utc.range;
    function d3_time_scale(linear, methods, format) {
        function scale(x) {
            return linear(x)
        }

        scale.invert = function (x) {
            return d3_time_scaleDate(linear.invert(x))
        };
        scale.domain = function (x) {
            if (!arguments.length) {
                return linear.domain().map(d3_time_scaleDate)
            }
            linear.domain(x);
            return scale
        };
        function tickMethod(extent, count) {
            var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
            return i == d3_time_scaleSteps.length ? [methods.year, d3_scale_linearTickRange(extent.map(function (d) {
                return d / 31536000000
            }), count)[2]] : !i ? [d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2]] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i]
        }

        scale.nice = function (interval, skip) {
            var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
            if (method) {
                interval = method[0], skip = method[1]
            }
            function skipped(date) {
                return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length
            }

            return scale.domain(d3_scale_nice(domain, skip > 1 ? {
                floor: function (date) {
                    while (skipped(date = interval.floor(date))) {
                        date = d3_time_scaleDate(date - 1)
                    }
                    return date
                }, ceil: function (date) {
                    while (skipped(date = interval.ceil(date))) {
                        date = d3_time_scaleDate(+date + 1)
                    }
                    return date
                }
            } : interval))
        };
        scale.ticks = function (interval, skip) {
            var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [{range: interval}, skip];
            if (method) {
                interval = method[0], skip = method[1]
            }
            return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip)
        };
        scale.tickFormat = function () {
            return format
        };
        scale.copy = function () {
            return d3_time_scale(linear.copy(), methods, format)
        };
        return d3_scale_linearRebind(scale, linear)
    }

    function d3_time_scaleDate(t) {
        return new Date(t)
    }

    var d3_time_scaleSteps = [1000, 5000, 15000, 30000, 60000, 300000, 900000, 1800000, 3600000, 10800000, 21600000, 43200000, 86400000, 172800000, 604800000, 2592000000, 7776000000, 31536000000];
    var d3_time_scaleLocalMethods = [[d3_time.second, 1], [d3_time.second, 5], [d3_time.second, 15], [d3_time.second, 30], [d3_time.minute, 1], [d3_time.minute, 5], [d3_time.minute, 15], [d3_time.minute, 30], [d3_time.hour, 1], [d3_time.hour, 3], [d3_time.hour, 6], [d3_time.hour, 12], [d3_time.day, 1], [d3_time.day, 2], [d3_time.week, 1], [d3_time.month, 1], [d3_time.month, 3], [d3_time.year, 1]];
    var d3_time_scaleLocalFormat = d3_time_format.multi([[".%L", function (d) {
        return d.getMilliseconds()
    }], [":%S", function (d) {
        return d.getSeconds()
    }], ["%I:%M", function (d) {
        return d.getMinutes()
    }], ["%I %p", function (d) {
        return d.getHours()
    }], ["%a %d", function (d) {
        return d.getDay() && d.getDate() != 1
    }], ["%b %d", function (d) {
        return d.getDate() != 1
    }], ["%B", function (d) {
        return d.getMonth()
    }], ["%Y", d3_true]]);
    var d3_time_scaleMilliseconds = {
        range: function (start, stop, step) {
            return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate)
        }, floor: d3_identity, ceil: d3_identity
    };
    d3_time_scaleLocalMethods.year = d3_time.year;
    d3_time.scale = function () {
        return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat)
    };
    var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function (m) {
        return [m[0].utc, m[1]]
    });
    var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([[".%L", function (d) {
        return d.getUTCMilliseconds()
    }], [":%S", function (d) {
        return d.getUTCSeconds()
    }], ["%I:%M", function (d) {
        return d.getUTCMinutes()
    }], ["%I %p", function (d) {
        return d.getUTCHours()
    }], ["%a %d", function (d) {
        return d.getUTCDay() && d.getUTCDate() != 1
    }], ["%b %d", function (d) {
        return d.getUTCDate() != 1
    }], ["%B", function (d) {
        return d.getUTCMonth()
    }], ["%Y", d3_true]]);
    d3_time_scaleUtcMethods.year = d3_time.year.utc;
    d3_time.scale.utc = function () {
        return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat)
    };
    d3.text = d3_xhrType(function (request) {
        return request.responseText
    });
    d3.json = function (url, callback) {
        return d3_xhr(url, "application/json", d3_json, callback)
    };
    function d3_json(request) {
        return JSON.parse(request.responseText)
    }

    d3.html = function (url, callback) {
        return d3_xhr(url, "text/html", d3_html, callback)
    };
    function d3_html(request) {
        var range = d3_document.createRange();
        range.selectNode(d3_document.body);
        return range.createContextualFragment(request.responseText)
    }

    d3.xml = d3_xhrType(function (request) {
        return request.responseXML
    });
    if (typeof define === "function" && define.amd) {
        define(d3)
    } else {
        if (typeof module === "object" && module.exports) {
            module.exports = d3
        } else {
            this.d3 = d3
        }
    }
}();
(function () {
    var project_data = {};
    project_data.lang = "ru_RU";
    project_data.languageCode = "ru";
    project_data.countryCode = "RU";
    project_data.token = "af8c6dda67d0072084121531447a7aa6";
    project_data.coordinatesOrder = "latlong";
    project_data.geolocation = {
        longitude: 30.313497,
        latitude: 59.938531,
        isHighAccuracy: false,
        city: "Санкт-Петербург",
        region: "Санкт-Петербург и Ленинградская область",
        country: "Россия",
        zoom: 11
    };
    project_data.hosts = {
        api: {
            main: "https://api-maps.yandex.ru/",
            ua: "https://legal.yandex.ru/maps_termsofuse/?lang={{lang}}",
            maps: "https://maps.yandex.ru/",
            services: {
                coverage: "https://api-maps.yandex.ru/services/coverage/",
                geoxml: "https://api-maps.yandex.ru/services/geoxml/",
                route: "https://api-maps.yandex.ru/services/route/",
                regions: "https://api-maps.yandex.ru/services/regions/",
                psearch: "https://psearch-maps.yandex.ru/",
                search: "https://api-maps.yandex.ru/services/search/"
            }
        },
        layers: {
            map: "https://vec0%d.maps.yandex.net/tiles?l=map&%c&%l",
            sat: "https://sat0%d.maps.yandex.net/tiles?l=sat&%c&%l",
            skl: "https://vec0%d.maps.yandex.net/tiles?l=skl&%c&%l",
            pmap: "https://0%d.pvec.maps.yandex.net/?l=pmap&%c&%l",
            pskl: "https://0%d.pvec.maps.yandex.net/?l=pskl&%c&%l"
        },
        traffic: "https://jgo.maps.yandex.net/",
        trafficArchive: "https://jft.maps.yandex.net/"
    };
    project_data.distribution = {enabled: false};
    project_data.layers = {
        map: {version: "4.31.0", scaled: true},
        sat: {version: "3.222.0"},
        skl: {version: "4.31.0", scaled: true},
        pmap: {version: "1428354000", scaled: true},
        pskl: {version: "1428354000", scaled: true}
    };
    var init = function (e, t) {
        function r(e) {
            this.browser = e, this.css = new s(this), this.graphics = new i
        }

        function i() {
            this.hasSVG = function () {
                return e.implementation && e.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1")
            }, this.hasCanvas = function () {
                var t = e.createElement("canvas");
                return !!("getContext" in t && t.getContext("2d"))
            }, this.hasVML = function () {
                var t = !1, n = e.createElement("div");
                n.innerHTML = '<v:shape id="yamaps_testVML"  adj="1" />';
                var r = n.firstChild;
                return r && (r.style.behavior = "url(#default#VML)", t = r ? typeof r.adj == "object" : !0, n.removeChild(r)), this.hasVML = function () {
                    return t
                }, t
            }
        }

        function s(t) {
            function o(e) {
                return typeof s[e] == "undefined" ? s[e] = u(e) : s[e]
            }

            function u(e) {
                return a(e) || a(t.browser.cssPrefix + l(e))
            }

            function a(e) {
                return typeof f().style[e] != "undefined" ? e : null
            }

            function f() {
                return n || (n = e.createElement("div"))
            }

            function l(e) {
                return e ? e.substr(0, 1).toUpperCase() + e.substr(1) : e
            }

            function c(e) {
                return r[e] && o("transitionProperty") ? h(r[e]) : null
            }

            function h(e) {
                var n = o(e);
                return n && n != e && (n = "-" + t.browser.cssPrefix.toLowerCase() + "-" + e), n
            }

            var n, r = {
                transform: "transform",
                opacity: "opacity",
                transitionTimingFunction: "transition-timing-function",
                userSelect: "user-select",
                height: "height"
            }, i = {}, s = {};
            this.checkProperty = o, this.checkTransitionProperty = function (e) {
                return typeof i[e] == "undefined" ? i[e] = c(e) : i[e]
            }
        }

        function a(e, t, n) {
            o = new l(e, this), u = new f(t);
            var r = new y(n);
            this.load = function (e, t, n, i) {
                typeof t == "string" && (t = [t]);
                var s = [], o;
                x(t, function (e) {
                    (o = u.byName[e]) && s.push(o)
                }), r.load(s, function () {
                    c(e, s, function () {
                        n && n.call(i)
                    })
                })
            }
        }

        function f(e) {
            var t = this;
            this.byName = {}, this.byAlias = {};
            for (var n in e) {
                x(e[n], function (e) {
                    e = {
                        _gK: e,
                        type: n,
                        alias: e[0].substr(0, 2),
                        name: e[0].substr(2)
                    }, t.byName[e.name] = t.byAlias[e.alias] = e
                })
            }
            this.getDepends = function (e) {
                if (!e._hK) {
                    var n = e._gK[1], r = [];
                    if (n) {
                        var i, s;
                        if (typeof n == "string") {
                            i = [];
                            for (var u = 0, a = n.length; u < a; u += 2) {
                                i.push(n.substr(u, 2))
                            }
                            s = "byAlias"
                        } else {
                            i = n.call(e, o), s = "byName"
                        }
                        x(i, function (e) {
                            r.push(t[s][e])
                        })
                    }
                    e._hK = r
                }
                return e._hK
            }, this.execByType = function (e, t) {
                x(e, function (e) {
                    var n = t[e.type];
                    n && n(e)
                })
            }
        }

        function l(e, t) {
            for (var n in e) {
                this[n] = e[n]
            }
            this.load = function () {
                t.load.apply(t, arguments)
            }
        }

        function c(e, t, n) {
            m(e, t, function () {
                p(), n()
            })
        }

        function d(e, t, n) {
            v(t, function () {
                t.providedPaths && x(t.providedPaths, function (t) {
                    T(e, t.path, t.data)
                }), n()
            })
        }

        function v(e, t) {
            var n = e.execute;
            if (n) {
                n.done ? t() : n.callbacks.push(t)
            } else {
                n = e.execute = {callbacks: [t]};
                var r = {};
                m(r, u.getDepends(e), function () {
                    function s() {
                        n.done = !0, t.length && (e.providedPaths = t), x(n.callbacks, function (e) {
                            e()
                        })
                    }

                    var t = [], i = 0;
                    e.source(function (e, n) {
                        t.push({path: e.split("."), data: n})
                    }, function (e) {
                        i++, e(function () {
                            i--, i || s()
                        })
                    }, b, r, o), i || s()
                })
            }
        }

        function m(e, t, n) {
            if (!t.length) {
                n()
            } else {
                var r = 0, i = function () {
                    ++r == t.length && n()
                };
                x(t, function (t) {
                    t.type == "css" ? h(e, t, i) : t.type == "js" ? d(e, t, i) : g(e, t, i)
                })
            }
        }

        function g(e, t, n) {
            m(e, u.getDepends(t), n)
        }

        function y(n) {
            function i(e) {
                var t = [], n = {}, i;
                while (e.length) {
                    i = e.shift(), !n[i.name] && !r[i.name] && (n[i.name] = !0, t.push(i), e.push.apply(e, u.getDepends(i)))
                }
                return t
            }

            function s(e, t) {
                var n = [], i = function (e) {
                    n.push(e)
                };
                u.execByType(e, {css: i, js: i}), n.length ? a(n, function (n) {
                    x(n, function (e) {
                        var t = u.byAlias[e[0]];
                        r[t.name] = !0, t.source = e[1]
                    }), u.execByType(e, {
                        "package": function (e) {
                            r[e.name] = !0
                        }
                    }), t()
                }) : t()
            }

            function a(e, r) {
                var i = [];
                x(e, function (e) {
                    i.push(e.alias)
                }), i = i.join("");
                var s = n + "_" + i;
                t[s] ? t[s].listeners.push(r) : f(i, s, function (e) {
                    r(e), t[s] = undefined;
                    try {
                        delete t[s]
                    } catch (n) {
                    }
                })
            }

            function f(r, i, s) {
                var u = [s], a = function (e) {
                    x(u, function (t) {
                        t(e)
                    }), u = null
                }, f = e.createElement("script");
                f.charset = "utf-8", f.async = !0, f.src = o.PATH + "combine.xml?modules=" + r + "&jsonp_prefix=" + n, u.push(function () {
                    t.setTimeout(function () {
                        f.parentNode.removeChild(f)
                    }, 0)
                }), a.listeners = u, t[i] = a, e.getElementsByTagName("head")[0].appendChild(f)
            }

            var r = {};
            this.load = function (e, t) {
                e = e.slice(0), e = i(e), s(e, t)
            }
        }

        function b(e) {
            var t = 1, n = typeof arguments[t] == "function" ? arguments[t++] : null;
            n && w(e, n);
            var r = arguments.length;
            while (t < r) {
                S(e.prototype, arguments[t++])
            }
            return e
        }

        function x(e, t) {
            for (var n = 0, r; r = e[n++];) {
                t(r)
            }
        }

        function T(e, t, n) {
            var r = e, i = 0, s = t.length - 1, o;
            for (; i < s; i++) {
                r = r[o = t[i]] || (r[o] = {})
            }
            r[t[s]] = n
        }

        function N(e, t) {
            var n = e;
            t = t.split(".");
            var r = 0, i = t.length - 1;
            for (; r < i; r++) {
                n = n[t[r]];
                if (!n) {
                    return undefined
                }
            }
            return n[t[i]]
        }

        function C(i, s, o, u, f, l, c, h) {
            function y() {
                if (g && m) {
                    var e;
                    while (e = v.shift()) {
                        e[0].call(e[1])
                    }
                    v = []
                }
            }

            function w(e) {
                var n = N(t, h);
                n ? n(d) : t.setTimeout(function () {
                    w(++e)
                }, 100 * Math.pow(2, e))
            }

            !u, u.name == "MSIE" && (e.documentMode ? u.documentMode = e.documentMode : u.documentMode = e.compatMode == "BackCompat" ? 0 : 7), u.transformTransition = u.name == "MSIE" && u.documentMode >= 10 || u.engine == "WebKit" && u.osFamily == "iOS", u.css3DTransform = u.engine == "WebKit" && !(u.osFamily == "Android" && parseFloat(u.osVersion) < 3) || u.engine == "Gecko" && parseInt(u.engineVersion.split(".")[0]) >= 10;
            var p = new a({PATH: s, DEBUG: o, support: new r(u), data: l}, n, c), d = {};
            T(t, i.split("."), d), d.load = function (e, t, n) {
                p.load(d, e, t, n)
            };
            var v = [], m = e.readyState == "complete", g = !f;
            if (!m) {
                function b() {
                    m || (m = !0, y())
                }

                e.addEventListener ? (e.addEventListener("DOMContentLoaded", b, !1), t.addEventListener("load", b, !1)) : e.attachEvent && t.attachEvent("onload", b)
            }
            f && p.load(d, f.split(","), function () {
                g = !0, y(), h && w(0)
            }), d.ready = function (e, t) {
                v.push([e, t]), y()
            }
        }

        var n = {
            "package": [["!Qb-form-switch_type_switch", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["!Jb-zoom__sprite", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["!Zb-search", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*ab-form-radio__button_checked_yes", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*bb-zoom__scale", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*cb-traffic-panel__layer", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*db-form-radio__button_side_both", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*eb-search-panel", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*fb-form-button", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*gb-traffic-panel", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*hb-zoom__hint", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*ib-cluster-carousel", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*kb-traffic-panel__scale", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*lb-form-radio__button", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*mb-search__input", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*nb-cluster-accordion", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*ob-select", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*pb-select__hint", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*rb-form-switch_disabled_yes", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*sb-form-input_size_16", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*tb-select_control_search", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*ub-select_control_traffic", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*vb-form-radio__button_disabled_yes", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*wb-form-button_theme_grey-19", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*xb-form-input__hint", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*yb-form-button_theme_grey-sm", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Ab-popupa", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Bi-popup__under", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Cb-balloon", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Db-form-checkbox_size_13", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Eb-form-button_theme_grey-22", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Fb-traffic-week", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : ".standards")]
            }], ["*Gb-ico", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Hi-popup__under_color_white", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Ib-form-switch_theme_switch-s", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*Kb-form-checkbox_disabled_yes", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Lb-tip", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Mb-cluster-carousel_pager_numeric", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Nb-form-radio", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*Ob-popupa__tail", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Pb-listbox-panel", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*Rb-form-button_theme_simple-grey", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Sb-form-button__input", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Tb-form-radio_size_11", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Ub-form-checkbox_checked_yes", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Vb-form-checkbox_focused_yes", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Wb-popupa__shadow", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*Xb-form-input", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*Yb-pseudo-link", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*0b-form-checkbox", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ".ie8" : e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ".ie" : ".standards")]
            }], ["*1b-cluster-carousel_pager_marker", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*2b-select_control_listbox", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*3b-zoom", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*4b-form-button__click", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*5b-poi-balloon-content", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*6b-select__arrow", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*7b-popupa_theme_ffffff", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*8b-ruler", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*9b-dropdown-button", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*$b-select__pager", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*-b-form-switch", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*_i-popup__under_type_paranja", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*.b-select_search", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*!b-form-input__clear", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["**b-select_type_prognos", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*(b-form-button_theme_grey-no-transparent-26", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*)b-select__panel-switcher", function (e) {
                return [this.name + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["*,package.hotspots", "57-L-M56588,54-D-I-H-E-F-K*j(j-*-5"], ["*qpackage.tileContainer", "6Q6j6J6Z"], ["*jpackage.layouts", "38$252"], ["*zpackage.controls", "(C(0"], ["*Qpackage.editor", "(E(2"], ["*Jpackage.geoXml", "(D(1"], ["*Zpackage.overlays", "9(9q9j9z9,676968666_6-6.6$6!6362646065(G"], ["(apackage.clusters", "(H(5"], ["(bpackage.search", "(I(4"], ["(cpackage.geocode", "3R9l9n9k()(.)e"], ["(dpackage.geoQuery", "3S5N"], ["(epackage.route", "(M(8(K(6"], ["(fpackage.full", "(P($"], ["(gpackage.map", "(S)g"], ["(hpackage.standard", "(T(-"], ["(ipackage.traffic", "(U(_"], ["(kpackage.regions", "3Y"], ["(lpackage.geoObjects", "(V(."], ["(mpackage.geometries", "9$9_9!9.9*9-9(9q9j9z9,9S9U9V9W9T"], ["(npane.GlassPane.css", function (e) {
                var t = [];
                return (e.support.browser.name == "MSIE" || e.support.browser.name == "IEMobile") && t.push(["pane.GlassPane.css-ie"]), t
            }], ["(omap.copyrights.css", function (e) {
                return e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ["map.copyrights.css.ie"] : ["map.copyrights.css.standards"]
            }], ["(ppane.events", "50"], ["(rpane.graphics", function (e) {
                return e.support.browser.transformTransition ? ["pane.graphics.TransitionPane"] : ["pane.graphics.StepwisePane"]
            }], ["(spane.controls", "5U"], ["(tpane.copyrights", "5V"], ["(upane.overlays", function (e) {
                return e.support.browser.transformTransition ? ["pane.overlay.TransitionPane"] : ["pane.overlay.StepwisePane"]
            }], ["(vpane.shadows", function (e) {
                return e.support.browser.transformTransition ? ["pane.shadow.TransitionPane"] : ["pane.shadow.StepwisePane"]
            }], ["(wpane.floats", "5Y"], ["(xpane.movableOuters", function (e) {
                return e.support.browser.transformTransition ? ["pane.movableOuter.TransitionPane"] : ["pane.movableOuter.StepwisePane"]
            }], ["(ypane.outers", "51"], ["(Apane.glass", "5X"], ["(Bpane.layers", function (e) {
                return e.support.browser.transformTransition ? ["pane.layer.TransitionPane"] : ["pane.layer.StepwisePane"]
            }], ["(Cpackage.controls.core", "4V42404Y7X7Y4-72484.4!-d5I-c-t-e5K474$4X44435K9A"], ["(Dpackage.geoXml.core", "-f(F(L369F7j7!7q7,77765a"], ["(Epackage.editor.core", "(V$x$B$C75$x$B$C"], ["(Fpackage.mapHint.core", "9C*j3O"], ["(Gpackage.staticGraphicsOverlays", "6X6V6W6Y6U"], ["(Hpackage.clusters.core", "8E.E5m*j(L(F()-_"], ["(Ipackage.search.core", "(c9A459F9S7j7!-n77765a"], ["(Kpackage.routeEditor.core", "(M74465H"], ["(Lpackage.mapBalloon.core", "9E*j3V"], ["(Mpackage.route.core", "3T-f(F(L9F7j7!7q7,77765a"], ["(Npackage.behaviors.base", "5D-65I-t5B(9"], ["(Opackage.private.yandex.enterprise", "5!"], ["(Ppackage.full.core", "(T(H(E(U(D(V(M(K(d(m*Z*,(k3N5v6C3H363R3G3-5v"], ["(Rpackage.map.css", function (e) {
                return ["map.css", "map.css." + {
                    en: "en",
                    ru: "ru",
                    tr: "en",
                    uk: "ru"
                }[e.data.lang.substr(0, 2)] + (e.support.browser.name == "MSIE" && e.support.browser.documentMode < 9 ? ".ie" : ".standards")]
            }], ["(Spackage.map.core", ")d3G3H3W5j9H9K9M3,3)3!3*6x$I3P5L4I3I3_3-3N5v(N6f5P3X5O6N6O31306C3U5u5r5p5t5n5s4l4E4m4i4n4h4a7O7R7S"], ["(Tpackage.standard.core", "(g(C(I()(L(F5c5f*j*,*q"], ["(Upackage.traffic.core", "4_-M-L$a$e$b9A9S7j7!-f77765a9F"], ["(Vpackage.geoObjects.core", "5e5c5f()(!(((*(,-h-p-k-f8b*j"], ["(Wgraphics.render.detect.bestMatch", function (e) {
                return e.support.graphics.hasCanvas() && e.support.browser.name != "MSIE" && e.support.browser.name != "IEMobile" ? ["graphics.render.canvas.Shapes"] : e.support.graphics.hasSVG() ? ["graphics.render.svg.Shapes"] : e.support.graphics.hasVML() ? ["graphics.render.vml.Shapes"] : []
            }], ["(Xgraphics.render.detect.all", function (e) {
                var t = [];
                return e.support.graphics.hasCanvas() && t.push("graphics.render.canvas.Shapes"), e.support.graphics.hasSVG() && t.push("graphics.render.svg.Shapes"), e.support.graphics.hasVML() && t.push("graphics.render.vml.Shapes"), t
            }], ["(Ytheme.twirl.label.css", function (e) {
                return e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ["theme.twirl.label.css.common", "theme.twirl.label.css.ie"] : ["theme.twirl.label.css.common"]
            }], ["(0package.controls.theme.twirl", "-2"], ["(1package.geoXml.theme.twirl", ".w(7(3"], ["(2package.editor.theme.twirl", "(.-j"], ["(3package.mapHint.theme.twirl", "-q-5"], ["(4package.search.theme.twirl", "-8.x(7(3"], ["(5package.clusters.theme.twirl", "-_(7(3"], ["(6package.routeEditor.theme.twirl", "-$.x(7(3"], ["(7package.mapBalloon.theme.twirl", "-*"], ["(8package.route.theme.twirl", ".w(7(34Q"], ["(9package.behaviors.base.dynamic", "5D-65I-t5B5E-r5F"], ["($package.full.theme.twirl", "(-(5(2(.(_(1(8(6-6.w-*-q-5-2(j"], ["(-package.standard.theme.twirl", "(4(0(7(3.x"], ["(_package.traffic.theme.twirl", "_w_s_u!s!u!t!I.x(7(3!v!r.X!p!l"], ["(.package.geoObjects.theme.twirl", ".w(7(3"], ["(!package.geoObjects.polyline", "(L(F9U8f7J7,-l77765a9F"], ["(*package.geoObjects.rectangle", "(L(F9T8d7Q7(-i77765a9F"], ["((package.geoObjects.polygon", "9F(L(F8e9V7Z7q-m77765a"], ["()package.geoObjects.placemark", "9F(L(F8g9S7j7!-n77765a3937"], ["(,package.geoObjects.circle", "(L(F9W8i8a7)-o77765a9F"], ["(qtheme.twirl.control.layouts.core", ".)!x.g.f.!.*.k.l.z.i.h.m"], ["(jtheme.twirl.hotspot.meta.full", ".F.D"], ["(zcontrol.minimap.css", function (e) {
                return e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ["control.minimap.css.ie"] : e.support.browser.name == "MSIE" && e.support.browser.documentMode == 8 ? ["control.minimap.css.ie8"] : ["control.minimap.css.common"]
            }], ["(Qtheme.twirl.clusterNightContent.css", "!L"], ["(Jtheme.twirl.cluster.default.css", function (e) {
                return e.support.browser.msie && e.support.browser.documentMode < 8 ? ["theme.twirl.cluster.default.common.css", "theme.twirl.cluster.default.ie.css"] : ["theme.twirl.cluster.default.common.css"]
            }], ["(Ztraffic.balloon.infoLayout.css", function (e) {
                return e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ["traffic.balloon.infoLayout.css.common", "traffic.balloon.infoLayout.css.ie"] : ["traffic.balloon.infoLayout.css.common"]
            }], [")atraffic.balloon.tip.css", function (e) {
                return e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ["traffic.balloon.tip.css.common", "traffic.balloon.tip.css.ie", "traffic.balloon.tip.theme.css"] : ["traffic.balloon.tip.css.common", "traffic.balloon.tip.theme.css"]
            }], [")btraffic.balloon.layout.css", function (e) {
                return e.support.browser.name == "MSIE" && e.support.browser.documentMode < 8 ? ["traffic.balloon.layout.css.common", "traffic.balloon.layout.css.ie"] : ["traffic.balloon.layout.css.common"]
            }], [")ctraffic.balloon.tip.theme.css", "!.!_!!!-"], [")dtheme.browser.current", function (e) {
                var t = e.support.browser, n = t.documentMode, r = t.engine.toLowerCase(), i = ["theme.browser.common"];
                if (t.name == "MSIE" && n >= 10 && t.osVersion > 6.1 || t.name == "IEMobile" && t.engineVersion >= 6) {
                    i.push("theme.browser.pointer.ie10")
                } else {
                    if (t.multiTouch) {
                        i.push("theme.browser.touch.common"), t.engine == "WebKit" && i.push("theme.browser.touch.webkit")
                    } else {
                        switch (t.engine) {
                            case"WebKit":
                                i.push("theme.browser.desktop." + (t.name == "Safari" ? "safari" : r));
                                break;
                            case"Gecko":
                            case"Presto":
                                i.push("theme.browser.desktop." + r);
                                break;
                            default:
                                t.name == "MSIE" ? i.push("theme.browser.desktop.ie" + (n ? Math.min(9, Math.max(n, 7)) : 7)) : i.push("theme.browser.unknown")
                        }
                    }
                }
                return i
            }], [")epackage.geocode.dynamic", function (e) {
                var t = [];
                return e.data.layers.pmap && t.push("yandex.geocodeProvider.publicMap"), t
            }], [")ftheme.twirl.balloon.css", function (e) {
                var t = "theme.twirl.balloon.css.", n = "", r = e.support.browser;
                if (r.name == "IEMobile") {
                    n = [t + "ie9"]
                } else {
                    if (r.name == "MSIE") {
                        var i = Math.max(r.documentMode, 7), n = [t + "ie" + (i > 9 ? 9 : i)]
                    } else {
                        n = [t + "standards"]
                    }
                }
                return n
            }], [")gpackage.map.yandex.layers", function (e) {
                var t = {
                    map: "Map",
                    sat: "Satellite",
                    skl: "Skeleton",
                    pmap: "PublicMap",
                    pskl: "PublicMapSkeleton"
                }, n = {
                    map: ["map"],
                    satellite: ["sat"],
                    hybrid: ["sat", "skl"],
                    publicMap: ["pmap"],
                    publicMapHybrid: ["sat", "pskl"]
                };
                e.data.layers.pmap || delete t.pmap, e.data.layers.pskl || delete t.pskl;
                if (e.data.restrictions && e.data.restrictions.prohibitedLayers) {
                    var r = e.data.restrictions.prohibitedLayers.split(",");
                    for (var i = 0, s = r.length; i < s; i++) {
                        delete t[r[i]]
                    }
                }
                var o = ["MapType", "mapType.storage", "layer.storage", "yandex.mapType.metaOptions", "package.hotspots"];
                for (var s in t) {
                    t.hasOwnProperty(s) && o.push("yandex.layer." + t[s])
                }
                for (var u in n) {
                    if (n.hasOwnProperty(u)) {
                        var a = n[u];
                        for (var i = 0, s = a.length; i < s; i++) {
                            if (!t[a[i]]) {
                                break
                            }
                        }
                        i == s && o.push("yandex.mapType." + u)
                    }
                }
                return o
            }]],
            js: [["0atraffic.layout.control.Header.html", "*f*S*40B1,1l1H*w0p*(0b0y*G"], ["0ctip.layout.html", "*L"], ["0elistbox.layout.content.html", "*o"], ["0mclusterCarousel.layout.pager.html", "1U*i*1*M"], ["0straffic.layout.control.archive.PanelFoot.html", "*g0A"], ["0utraffic.layout.control.archive.timeLine.html", "*g*k*A*W*708*B0n*H*_*O0o"], ["0vballoon.layout.html", "*C1u"], ["0xlistbox.layout.checkbox.html", "*P*D*U*0*K*V"], ["0CclusterTabs.layout.html", "1U0O"], ["0Ftraffic.layout.control.archive.stateHint.html", "*g0P"], ["0TpoiBalloonContent.layout.html", "*50S"], ["0XclusterAccordion.layout.itemTitle.html", "1U*n0M1C"], ["03balloon.layout.content.html", "*C1u"], ["06search.layout.pager.html", "*o*$*p*t*.*Y!Z*e24"], ["0.clusterCarousel.layout.html", "1U*i*1*M"], ["0*traffic.layout.control.ChooseCity.html", "*g0A"], ["0(traffic.layout.control.archive.OpenedPanelContent.html"], ["0ztraffic.layout.control.prognos.oneDay.html", "*P*D*U*0*K*V"], ["1bzoom.layout.html", "*3!J*b2j*f*S*40B1,1l1H*w0p*(0b3e*y"], ["1fsearch.layout.form.html", "*Y!Z*m05*X*x3f*s*!1c1j*f*S*40B1,1l1H*w0p*(0b"], ["1hbutton.layout.html", "*f*S*40B1,1l1H*w0p*(0b0y"], ["1mtraffic.layout.control.archive.TimeDay.html", "*l*a2W*v*d*N*T*F"], ["1nlistbox.layout.separat.html", "*P*D*U*0*K*V"], ["1vclusterTabs.layout.content.html", "1U0O"], ["1xlistbox.layout.item.html", "*P*D*U*0*K*V"], ["1Ntraffic.layout.control.actual.ServicesList.html", "*g*c*D*U*0*K*V"], ["1PtrafficBallonLevel.layout.html", "2Z*Y"], ["1StrafficBallonTip.layout.html", "2Z0r1i"], ["11placemark.layout.html", "1w1."], ["12zoom.layout.hint.html", "*3*h"], ["14traffic.layout.control.Switcher.html", "*-2q*r3n!Q*I"], ["19clusterCarousel.layout.pagerItem.html", "1U*i*1*M"], ["1-search.layout.item.html", "241a"], ["1_traffic.layout.control.prognos.timeLine.html", "*g*k*A*W*708*B0n*H*_*O0o"], ["1)traffic.layout.control.prognos.onTheNearestTime.html", "*P*D*U*0*K*V"], ["1Qsearch.layout.popup.html", "*A*W*708*B0n*H*_*o*p*)*e"], ["2bsearch.layout.html", "*o*p*$*Y!Z*e24*t*."], ["2cclusterAccordion.layout.html", "1U*n0M1C"], ["2druler.layout.html", "*8*L"], ["2itraffic.layout.control.prognos.selectButton.html", "*f*S*40B1,1l1H*w0p*(0b2y*E*o*6"], ["2ktraffic.layout.control.points.html", "*g3v"], ["2ptraffic.layout.control.archive.weekDays.html", "*l*a2W*v*d*N*T*F"], ["2tclusterAccordion.layout.itemContent.html", "1U*n0M1C"], ["2Dtraffic.layout.control.prognos.html", "*o***A*W*708*B0n*H*_*P*D*U*0*K*V"], ["2Mruler.layout.content.html", "*8*L"], ["2SclusterTabs.layout.menu.html", "1U0O"], ["2Ttraffic.layout.control.Body.html", "*A*W*708*B0n*H*_*g"], ["23dropdownbutton.layout.html", "*9"], ["26button.layout.text.html", "*G"], ["2_clusterTabs.layout.menuItem.html", "1U0O"], ["2!clusterAccordion.layout.Item.html", "1U*n0M1C"], ["2)listbox.layout.button.html", "*f*S*40B1,1l1H*w0p*(0b"], ["2zlistbox.layout.html", "*o*6*2*f*S*40B1,1l1H*w0p*(0b*A*W*708*B0n*H*_*P*D*U*0*K*V"], ["2Jballoon.layout.closeButton.html", "*C1u"], ["3ctraffic.layout.control.archive.timeControl.html"], ["3lballoon.layout.Shadow.html", "*C1u"], ["3rclusterCarousel.layout.contentItem.html", "1U*i*1*M"], ["3ytraffic.layout.html", "*o*)*6*O2U*u"], ["3DtrafficBallonInfo.layout.html", "2Z0D0S"], ["3Ggeolocation"], ["3Hformatter", "8n5h"], ["3ILayer", "4h4E7u4a4T6I5L(B7a6q6,3X"], ["3KTemplate", "4O4m4N"], ["3LMapEventController", "30"], ["3MCluster", "4E4l5P5k5L6I315l6f3X8H4Z4l4M"], ["3NMapType"], ["3OHint", "7O4c4h4m316N5P819S695x4R"], ["3PCollection", "4E5L4h8K"], ["3Rgeocode", "9l5j"], ["3SgeoQuery", "5N"], ["3Troute", "4,4*4i"], ["3UgetZoomRange", "3_3-5v"], ["3VBalloon", "4l7O4c316N5P3X9S679K4R4N"], ["3WMap", "(R5J6b5q5)5j5Z9I9O9N9t4h30(p6I3L6C4R5s5v9K9L5P5,4l3_3-)d4T4l7E7o7O4C"], ["3XMonitor", "4m4h4N"], ["3Yregions", "4s4v4i4E4O9x4T5e5f((-p8w"], ["30MapEvent", "4E316w8P"], ["31Event"], ["32overlay.optionMapper", "5S"], ["33overlay.storage", "4n"], ["34geoXml.util", "5O"], ["35geoXml.getJson", "4s4i"], ["36geoXml.load", "35.y$X$Y$0$1344i"], ["37layout.ImageWithContent", "4E3K39$238"], ["38layout.storage", "4n"], ["39layout.Image", "52387v7u3X6C4a4H"], ["3$layer.optionMapper", "5S"], ["3-layer.storage", "4n"], ["3_LayerCollection", "3P3-4E4h4i5w5A"], ["3.projection.idle"], ["3!projection.sphericalMercator", "3,"], ["3*projection.Cartesian", "7R$H"], ["3(projection.Mercator", "7S7R"], ["3)projection.wgs84Mercator", "3,"], ["3,projection.GeoToGlobalPixels", "3(6x7R"], ["3qprojection.zeroZoom"], ["3jgraphics.Shape", "4E7b4F3Q"], ["3zgraphics.CSG", "7O4F3Q4l"], ["3Qgraphics.Path", "4F4l"], ["3Jgraphics.Representation", "4m4l3Q"], ["3Zgraphics.renderManager", "7u7v4k4O7u7v4D4o4l"], ["4autil.hd"], ["4butil.safeAccess"], ["4cutil.once"], ["4dutil.geoBounds", "4l7R"], ["4eutil.nodeSize", "4m7v7u4m$87r7u4o$q$)"], ["4futil.EventPropagator"], ["4gutil.EventSieve", "4h"], ["4hutil.bind"], ["4iutil.Promise"], ["4kutil.Associate", "4O"], ["4lutil.bounds", "3)7R4M4m"], ["4mutil.extend"], ["4nutil.Storage"], ["4outil.scheduler", "4O4h$*$!"], ["4putil.fireWithBeforeEvent", "4m31"], ["4rutil.eventId", "4O"], ["4sutil.jsonp", "4O4C4i8w"], ["4tutil.json"], ["4uutil.tremorer"], ["4vutil.base64"], ["4wutil.ImageLoadObserver", "6N6C317v4O$Z"], ["4xutil.mbr", "4l"], ["4yutil.getPixelRadius"], ["4Autil.ContentSizeObserver", "6N314w4e"], ["4Butil.Chunker", "4h4m"], ["4Cutil.script"], ["4Dutil.List", "4O"], ["4Eutil.augment", "4m"], ["4Futil.vector", "7O"], ["4Gutil.data", "4O"], ["4Hutil.imageLoader", "6C4o$)"], ["4Iutil.Dragger", "7r4m7w6N6C"], ["4Kutil.instantCache"], ["4Lutil.callbackChunker", "4h4m4k$q"], ["4Mutil.correctMargin"], ["4Nutil.array"], ["4Outil.id"], ["4Pconstants.hotspotManagerTimeout"], ["4Rconstants.mapDomEvents"], ["4Sconstants.hotspotEvents"], ["4Tconstants.zIndex"], ["4Uconstants.mapListenerPriority"], ["4Vcontrol.factory", "4E499u"], ["4Wcontrol.Selectable", "4E49"], ["4Xcontrol.TypeSelector", "4E4Y7X5v8w414N9u425j4h"], ["4Ycontrol.ListBox", "4O4E719u4e"], ["40control.RadioGroup", "4E7038"], ["41control.storage", "4n"], ["42control.Group", "4E7138"], ["43control.ZoomControl", "4E44419u3X"], ["44control.SmallZoomControl", "4E7S49(s419u"], ["45control.SearchControl", "4E4m4h4i4N3R498w5T9l419u3X9B"], ["46control.RouteEditor", "4E-b8w419u"], ["47control.MiniMap", "494E4m419u5j3X"], ["48control.Button", "4E4W9u"], ["49control.Base", "4E5L6f38319u4h4N4L4O7r3X"], ["4$control.ScaleLine", "4E49419u"], ["4-control.ToolBar", "4E4O42"], ["4_control.TrafficControl", "6n4E6r6h49414C7u9u4h"], ["4.control.RollupButton", "4E4N707V9u4h"], ["4!control.MapTools", "4E4N4-4041739u"], ["4*router.util", "4i4s4N4m7B4d4l4q3)4(3R"], ["4(router.restrict", "4N"], ["4)router.Editor", "3T4m4*5P6N6f6h.a_Q.c_Z.b_J"], ["4,router.Route", "5P6f316N6I797_7$7-5f5e4m4z4j4*3H"], ["4qrouter.Segment", "6f8w5h3H"], ["4jrouter.Path", "4E7R914N5e3H"], ["4zrouter.ViaPoint", "4E5e"], ["4Qrouter.preset", "5O527R4m5t5e9B"], ["4JgeoObject.geometryFactory", "4n9S9U9V9T9W"], ["4ZgeoObject.optionMapper", "5S"], ["5ageoObject.metaOptions", "5p5j"], ["5bgeoObject.Hint", "4h4c6N4Z3."], ["5cGeoObjectCollection", "6I5P4Z6f316N797_7$7-78"], ["5dgeoObject.Balloon", "4h4m6N7*5T4Z3."], ["5eGeoObject", "6I316N5P4Z6f797_7$"], ["5fGeoObjectArray", "6I5P4Z6f316N797_7$7.78"], ["5ggeoObject.View", "4h4N4L4p4I31305P5S3X7z8h4T5s8b"], ["5hlocalization.lib"], ["5iclusterer.util", "4l7O"], ["5kcluster.optionMapper", "5S"], ["5lcluster.View", "686N305s4R"], ["5mClusterer", "4m4l3M5i8F4D4E6f9S3P4E4h4O3X4N8H4c4Z6N4M"], ["5ninteractivityModel.layer", "5s4m5u"], ["5ocluster.Balloon", "4h6N317*5k5T3.6f"], ["5pinteractivityModel.geoObject", "4R5s"], ["5rinteractivityModel.opaque", "4R5s"], ["5sinteractivityModel.storage", "4n"], ["5tinteractivityModel.transparent", "4R5s"], ["5uinteractivityModel.map", "4R5s"], ["5vmapType.storage", "4n"], ["5wcomponent.ProviderObserver", "4N4O4i"], ["5xhint.fitPane", "7v7t4e"], ["5ycomponent.EventFreezer"], ["5Acomponent.ZoomRangeObserver", "5w4E4i"], ["5Bbehavior.DblClickZoom", "5D5C7S7C4U9G"], ["5Cbehavior.factory", "5L4E4m5P"], ["5Dbehavior.storage", "4n"], ["5Ebehavior.ScrollZoom", "7C5G5D5C9G7T"], ["5Fbehavior.MultiTouch", "5D5C8T9G"], ["5Gbehavior.action", "4h4E9M"], ["5Hbehavior.RouteEditor", "5D5C9G4,4N4h3T9B"], ["5Ibehavior.Drag", "5D5G4I7U$J5C9G5T"], ["5Kbehavior.Ruler", "4T4U4b4E4m4N(u(r5W3Z5C5D8U$I9U5e9B-n3q8w30"], ["5Lcollection.Item", "6N318I315P"], ["5NGeoQueryResult", "4m4D4i4h7M5m4N4l-A-y-v-x-w-B5e"], ["5Ooption.presetStorage", "4n"], ["5Poption.Manager", "4m8G5O$R31"], ["5Rpane.StaticPane", "7u6N7v"], ["5Soption.Mapper", "6N31"], ["5Toption.Monitor", "4h"], ["5Upane.ControlPane", "805R4T5W4E"], ["5Vpane.CopyrightsPane", "4E5R4T5W"], ["5Wpane.storage", "4n"], ["5Xpane.GlassPane", "4E7v4m5R4T6C5W(n7I"], ["5Ypane.FloatPane", "4E5R7v5W4T"], ["50pane.EventPane", "4E5X5W4T"], ["51pane.OuterPane", "4E5R7v5W7t5R4T"], ["52templateLayoutFactory", "53"], ["53TemplateLayoutFactory", "4E4m$23K6k6i"], ["54hotspot.Shape", "6N5P-D"], ["55hotspot.counter"], ["56hotspot.loader", "4m4h4s"], ["57hotspot.Layer", "8j30316I4h9D8*5L4E3$"], ["58hotspot.ObjectSource", "4B4h56545s5n6N-F-H-E5P9j9,9)"], ["59hotspot.Manager", "9P6N305$4S5s5p"], ["5$hotspot.ContainerList", "4D4O7O6N314m555s5p4h"], ["5-yandex.DistributionBlock", "6f524N387u6C3X4E4m4h4C"], ["5_yandex.coverage", "4s4i"], ["5.yandex.dataProvider", "5_4i4m"], ["5!yandex.enterprise.enable", "9p4(-O6J5j9b9J"], ["5*yandex.uaController", "9y8w4E4m4h7u4k5."], ["5(yandex.layers"], ["5)map.ZoomRange", "6N4h4i3X7O5A"], ["5,map.optionMapper", "5S"], ["5qmap.Copyrights", "5w9w(t6N6f4i4h5v3)3!"], ["5jmap.metaOptions", "5P3)5u"], ["5zmap.Hint", "4h4c7u6N3O5,"], ["5Jmap.Container", "7u7v7t6N3X6C314h7O4C5-"], ["5Zmap.event.Manager", "6O304E4m"], ["6amap.Balloon", "4h4c7u6N3V5,"], ["6bmap.Converter"], ["6cmap.GeneralCollection", "5P6N317-"], ["6dmap.GeoObjects", "316c4E7-785,4Z"], ["6edata.Proxy", "6f4E"], ["6fdata.Manager", "4E4m9Q4N4b"], ["6gdata.Mapper", "4m"], ["6hdata.Monitor", "6N4h31"], ["6idata.Aggregator", "4E6f"], ["6kdata.Adapter", "4E9Q"], ["6ltraffic.loader", "563W"], ["6mtraffic.weekDays"], ["6ntraffic.constants"], ["6otraffic.timeZone", "5.6n4h"], ["6ptraffic.regionData", "4h4N4s4i"], ["6rtraffic.provider.storage", "4n"], ["6straffic.balloonDataSource", "4m"], ["6ttraffic.MultiSource", "$g564E6p"], ["6utraffic.AutoUpdater"], ["6vmapEvent.override.common", "316w"], ["6wmapEvent.overrideStorage", "4n"], ["6xcoordSystem.geo", "7R"], ["6ydomEvent.TouchMapper", "4m4h6H7O_96B6D_$6A5j"], ["6AdomEvent.isEnterLeavePrevented", "314O7p4K6C"], ["6BdomEvent.Touch", "4E_,_88P"], ["6CdomEvent.manager", "4O6H4G$R$O_."], ["6DdomEvent.MultiTouch", "4E_,_*8P"], ["6EdomEvent.MultiPointer", "4E_,_)8P"], ["6FdomEvent.Pointer", "4E_,_(8P"], ["6GdomEvent.PointerMapper", "4m6F6E6A5j4h"], ["6HDomEvent", "4E_,_j8P"], ["6Ievent.globalize", "4k6N"], ["6Kevent.Group"], ["6Levent.MappingManager", "4E6N"], ["6Mevent.PriorityGroup", "$O"], ["6Nevent.Manager", "4E$R314m"], ["6Oevent.PriorityManager", "4m4D$R6M314c"], ["6Poverlay.component.CursorManager", "4m7I5T"], ["6Roverlay.component.DomView", "4m7O7u7v4o5P3X38(u(v(y(x(w"], ["6Soverlay.component.Interactivity", "3X5s3L31"], ["6Toverlay.Base", "4m6N325P3X"], ["6Uoverlay.staticGraphics.Rectangle", "$T4E3j33"], ["6Voverlay.staticGraphics.Polyline", "$T4E3j33"], ["6Woverlay.staticGraphics.Polygon", "$T4E3j333z3Q9j9q"], ["6Xoverlay.staticGraphics.Placemark", "$T686T4E4m3j339,396h$6"], ["6Yoverlay.staticGraphics.Circle", "$T4E3j33"], ["60overlay.hotspot.Rectangle", "4E6133-F"], ["61overlay.hotspot.Base", "4E8)6T6S6P545p"], ["62overlay.hotspot.Polyline", "4E6133-I"], ["63overlay.hotspot.Placemark", "4E9,6133-F"], ["64overlay.hotspot.Polygon", "4E6133-H"], ["65overlay.hotspot.Circle", "4E6133-K"], ["66overlay.html.Rectangle", "4E7v9,6T336S6R6P$V5p"], ["67overlay.html.Balloon", "4E7v31(v5P326T336S6R6P5r6h5P4N"], ["68overlay.html.Placemark", "4E7v5P32(v6T336S6R6P5p"], ["69overlay.html.Label", "4E7v6T336S6R6P5r"], ["6$overlay.interactiveGraphics.Rectangle", "4E$W6033"], ["6-overlay.interactiveGraphics.Polyline", "4E$W6233"], ["6_overlay.interactiveGraphics.Placemark", "4E$W3X649j33"], ["6.overlay.interactiveGraphics.Polygon", "4E$W6433"], ["6!overlay.interactiveGraphics.Circle", "4E$W6533"], ["6*geoXml.preset.gpx", "5O918w6x914m5h3H7u6N5P"], ["6(layout.component.clientBounds", "7v"], ["6)layout.Base", "4m316N6C4R4N"], ["6,layer.component.TilePositioner", "7R"], ["6qlayer.component.TileSource", "4a7R"], ["6jlayer.tile.DomTile", "7u7v6C6N315P8w$34H6z"], ["6zlayer.tile.storage", "4n"], ["6Qlayer.tile.CanvasTile", "6N5P4H$J7u8w6z"], ["6Jlayer.tileContainer.CanvasContainer", "4E7u7v7O7L$q5L6z7a6Q"], ["6Zlayer.tileContainer.DomContainer", "4E7u7v7L5L6z7a6j"], ["7alayer.tileContainer.storage", "4n"], ["7bgraphics.shape.base", "4E4m7v4l6N313J7e"], ["7cgraphics.layout.blankIcon", "4E"], ["7dgraphics.render.util", "4N"], ["7egraphics.render.factory"], ["7fgraphics.render.SVG", "4E4m7g7u7v"], ["7ggraphics.render.Base", "4m7u7v4l4F7e6N317l7d4o$,$)$j4H4a"], ["7hgraphics.render.Canvas", "4E4m7g7u7v4a4l"], ["7igraphics.generator.stroke", "4F3Q"], ["7kgraphics.render.VML", "4E4m7g7u7v"], ["7lgraphics.generator.clipper", "3Q7n7O"], ["7mgraphics.generator.simplify"], ["7ngraphics.generator.cohenSutherland"], ["7outil.animation.getFlyingTicks"], ["7putil.dom.getBranchDifference"], ["7rutil.dom.className", function (t) {
                return ["util.dom.ClassName.byClass" + ("classList" in e.createElement("a") ? "List" : "Name")]
            }], ["7sutil.dom.positionController", "4O"], ["7tutil.dom.viewport"], ["7uutil.dom.element", "7v"], ["7vutil.dom.style", "4m4N"], ["7wutil.dragEngine.current", function (e) {
                var t, n = e.support.browser;
                return (n.name == "MSIE" || n.name == "IEMobile") && n.documentMode < 9 ? t = "util.dragEngine.mouse" : t = "util.dragEngine.mouseTouch", [t]
            }], ["7xutil.dragEngine.mouseTouch", "316H6C4u"], ["7yutil.dragEngine.mouse", "316H4u"], ["7Autil.coordinates.encode", "4v"], ["7Butil.coordinates.decode", "4v"], ["7Cutil.coordinates.scaleInvert"], ["7Dutil.coordinates.parse"], ["7Eutil.coordinates.getClosestPixelPosition"], ["7Futil.css.selectorParser"], ["7Gutil.css.selectorMatcher", "7F"], ["7Hutil.cursor.storage", "4n4m"], ["7Iutil.cursor.Manager", "4N7v7H7K6N"], ["7Kutil.cursor.Accessor", "6N"], ["7Lutil.tile.Storage", "6N31"], ["7Mutil.ArrayIterator"], ["7Nutil.math.calculateLineIntersection"], ["7Outil.math.areEqual"], ["7Putil.math.geoBounds", "4d"], ["7Rutil.math.cycleRestrict"], ["7Sutil.math.restrict"], ["7Tutil.math.getSign"], ["7Uutil.math.cubicBezier"], ["7Vcontrol.childElementController.Rollup", "7W3X4E7r"], ["7Wcontrol.childElementController.Base", "7s7u4e"], ["7Xcontrol.ListBoxItem", "4E4W9u"], ["7Ycontrol.ListBoxSeparator", "4E499u"], ["70control.BaseRadioGroup", "4E71"], ["71control.BaseGroup", "4E4N418O7W49314h4O"], ["72control.ToolBarSeparator", "494E9u"], ["73control.mapTools.storage", "4n"], ["74router.addon.editor", "4,4)"], ["75geoObject.addon.editor", "5e$y4Z4f"], ["76geoObject.addon.hint", "4O5T5e5b3O3."], ["77geoObject.addon.balloon", "314O5T5e5d3V3."], ["78geoObject.component.BoundsAggregator", "4m4h4l7O4l"], ["79geoObject.component.castGeometry", "4J"], ["7$geoObject.component.ObjectImplementation", "314h5g8I"], ["7-geoObject.component.CollectionImplementation", "4h318K"], ["7_geoObject.component.castProperties", "6f"], ["7.geoObject.component.ArrayImplementation", "4h318O"], ["7!geoObject.balloonPositioner.point", "7*"], ["7*geoObject.balloonPositioner.storage", "4n"], ["7(geoObject.balloonPositioner.rectangle", "7*914l"], ["7)geoObject.balloonPositioner.circle", "7*"], ["7,geoObject.balloonPositioner.lineString", "7*91"], ["7qgeoObject.balloonPositioner.polygon", "7*92"], ["7jgeoObject.dragCallback.point", "7z"], ["7zgeoObject.dragCallback.storage", "4n"], ["7QgeoObject.dragCallback.rectangle", "7z"], ["7JgeoObject.dragCallback.lineString", "7z"], ["7ZgeoObject.dragCallback.polygon", "7z"], ["8ageoObject.dragCallback.circle", "7z"], ["8bgeoObject.overlayFactory.storage", "4n"], ["8cgeoObject.OverlayFactory", "4E4n"], ["8dRectangle", "4E5e"], ["8ePolygon", "4E5e"], ["8fPolyline", "4E5e"], ["8gPlacemark", "4E5e"], ["8hgeoObject.view.overlayMapping", "4m4n"], ["8iCircle", "4E5e"], ["8klocalization.units.kk"], ["8llocalization.units.tr"], ["8mlocalization.units.be"], ["8nlocalization.units.current", function (e) {
                return ["localization.units." + e.data.lang.substr(0, 2)]
            }], ["8olocalization.units.en"], ["8plocalization.units.ru"], ["8rlocalization.units.uk"], ["8slocalization.units.cs"], ["8tlocalization.units.tt"], ["8ulocalization.common.kk"], ["8vlocalization.common.tr"], ["8wlocalization.common.current", function (e) {
                return ["localization.common." + e.data.lang.substr(0, 2)]
            }], ["8xlocalization.common.be"], ["8ylocalization.common.ru"], ["8Alocalization.common.en"], ["8Blocalization.common.uk"], ["8Clocalization.common.cs"], ["8Dlocalization.common.tt"], ["8Ecluster.addon.balloon", "3M5o316h"], ["8Fclusterer.Pipe", "6N5P4D314O"], ["8Gcomponent.child.BaseChild"], ["8Hclusterer.optionMapper", "5S"], ["8Icomponent.child.MapChild", "8G"], ["8Kcomponent.collection.ParentCollection", "4h8L8M"], ["8Lcomponent.collection.BaseCollection", "4D"], ["8Mcomponent.parent.BaseParent", "4m"], ["8Ncomponent.array.BaseArray", "4N"], ["8Ocomponent.array.ParentArray", "4h8N8M"], ["8Pcomponent.event.Cacher"], ["8Rbehavior.MultiTouchEngine", "4h4g4E-u"], ["8Sbehavior.MultiPointerEngine", "4E-u"], ["8Tbehavior.CurrentMultiTouchEngine", function (e) {
                var t, n = e.support.browser;
                return n.name == "MSIE" && n.documentMode >= 10 && n.osVersion > 6.1 || n.name == "IEMobile" && n.engineVersion >= 6 ? t = "behavior.MultiPointerEngine" : t = "behavior.MultiTouchEngine", [t]
            }], ["8Ubehavior.ruler.MarkerLayout", "8V4E7O7u7v6)3X3H6k5P-)526C"], ["81option.monitor.Manager", "4m5T"], ["82pane.overlay.TransitionPane", "4E4m884T5W"], ["83pane.overlay.StepwisePane", "4E4m7v894T5W"], ["84pane.layer.TransitionPane", "884T5W4E"], ["85pane.layer.StepwisePane", "894T5W4E"], ["86pane.graphics.TransitionPane", "824T5W4E"], ["87pane.graphics.StepwisePane", "834T5W4E"], ["88pane.movable.TransitionPane", "4m7u7v6C6N"], ["89pane.movable.StepwisePane", "4m7u7v6N4o$J"], ["8$pane.movableOuter.StepwisePane", "4E4m7v894T5W"], ["8-pane.shadow.StepwisePane", "834T5W4E"], ["8_pane.movableOuter.TransitionPane", "4E4m7v884T5W"], ["8.pane.shadow.TransitionPane", "824T5W4E"], ["8!hotspot.layer.Hint", "6N314h4c9C8*3.5t4m4c"], ["8*hotspot.layer.optionMapper", "5S"], ["8(hotspot.layer.Balloon", "4h316N9E3.4m8*"], ["8)hotspot.overlayContainer", "4k8,6N4E319D"], ["8,hotspot.ShapeContainer", "8q6N554O"], ["8qhotspot.InternalShapeContainer", "6N55314O4N"], ["8jhotspot.LayerShapeContainer", "8,6N314E7R7O"], ["8zyandex.layer.Satellite", "8Q3-3)5j8J"], ["8Qyandex.layer.factory", "3I4E4m4i5.5(8w7u5*3X"], ["8Jyandex.layer.metaOptions", "5j5,4m"], ["8Zyandex.layer.Skeleton", "8Q3-3)5j8J"], ["9ayandex.layer.PublicMap", "8Q3-3)5j8J"], ["9byandex.layer.Map", "4E4h4i3I3X8Q3-3)5j5,5(8J5.5*"], ["9cyandex.layer.PublicMapSkeleton", "8Q3-3)5j8J"], ["9dyandex.mapType.satellite", "8w5v3N5j"], ["9eyandex.mapType.publicMapHybrid", "3N5v8w5j"], ["9fyandex.mapType.metaOptions", "5j"], ["9gyandex.mapType.hybrid", "8w5v3N5j"], ["9hyandex.mapType.map", "8w5v3N5j"], ["9iyandex.mapType.publicMap", "3N5v8w5j"], ["9kyandex.geocodeProvider.metaOptions", "5j9n"], ["9lyandex.geocodeProvider.storage", "4n"], ["9myandex.geocodeProvider.publicMap", "9l4i4s4d4N$X3)"], ["9nyandex.geocodeProvider.map", "9l9o4i4s4d4N$X3)"], ["9oyandex.searchToGeocodeConverter", "4N4m"], ["9pyandex.enterprise.layerRestriction", "4m4N-N-P7u7v6J4a"], ["9rtheme.browser.unknown", "5j__$L$K6Z"], ["9stheme.browser.common", "5j_z6v"], ["9tmap.layer.Manager", "3_4E3$5P5,"], ["9umap.control.optionMapper", "5S"], ["9vmap.control.Manager", "4E31(s-z42"], ["9wmap.copyrights.Layout", "4h7u7r(o9y52$-6h8w"], ["9xmap.copyrights.counter", "5q4O"], ["9ymap.copyrights.ua", "8w4m4k7u"], ["9Amap.addon.controls", "3W9v"], ["9Bmap.associate.serviceGeoObjects", "4k6d"], ["9Cmap.addon.hint", "3W5z30"], ["9Dmap.addon.hotspots", "593W"], ["9Emap.addon.balloon", "3W6a30"], ["9Fmap.addon.geoObjects", "3W6d"], ["9Gmap.behavior.optionMapper", "5S"], ["9Hmap.behavior.metaOptions", "5j"], ["9Imap.behavior.Manager", "5D9G6c7-4E"], ["9Kmap.action.Single", "4h4E_a6N"], ["9Lmap.action.Sequence", "4m9K4h"], ["9Mmap.action.Continuous", "4E_a"], ["9Nmap.action.Manager", "6N4h4l7C7U4m"], ["9Omap.pane.Manager", "5W"], ["9Pmap.hotspot.Controller", "4S"], ["9Rgeometry.defaultOptions", "3)"], ["9Sgeometry.Point", "4E5P9$9(9X.4.29R"], ["9Tgeometry.Rectangle", "4E5P9-9,9X.3_e.4.293979R95$I9Y"], ["9Ugeometry.LineString", "4E7A7B5P9_9q9X.3_h.4.5_m.293$I9R95"], ["9Vgeometry.Polygon", "4E7A985P9.9j9X.3_g.2.5_n.493$I9R959Y"], ["9Wgeometry.Circle", "4E5P9*9z9X_k.4.29R954y$I9Y"], ["9Xgeometry.component.RenderFlow", "4m4N4h5P"], ["9Ygeometry.component.pixelContains"], ["90geometry.component.FillRule"], ["91geometry.component.findClosestPathPosition", "4F"], ["92geometry.component.pointInPolygon"], ["93geometry.component.ShortestPath", "977R"], ["94geometry.component.CoordPath"], ["95geometry.component.boundsFromPixels", "4l"], ["96geometry.component.PixelGeometryShift", "4l97"], ["97geometry.component.anchor"], ["98geometry.component.closedPathDecode", "7B"], ["99geometry.component.ChildPath", "4h4N"], ["9$geometry.base.Point", "4m316N"], ["9-geometry.base.Rectangle", "316N4m_o"], ["9_geometry.base.LineString", "6N4m4h7A7B4l915y94999$"], ["9.geometry.base.Polygon", "6N4m4h7A5y98949990_p9!"], ["9!geometry.base.LinearRing", "6N4m4h7A4l92915y989499909$"], ["9*geometry.base.Circle", "6N4m5y_r"], ["9(geometry.pixel.Point", "4m"], ["9)geometry.pixel.MultiPolygon", "4m9j4l"], ["9,geometry.pixel.Rectangle", "4m_o"], ["9qgeometry.pixel.LineString", "4m4l91"], ["9jgeometry.pixel.Polygon", "4m_p"], ["9zgeometry.pixel.Circle", "4m_r"], ["9Qdata.Base", "4m4N$R315y"], ["9Jtraffic.layer.Png", "3I4E"], ["9Ztraffic.provider.optionMapper", "5S"], ["$atraffic.provider.Actual", "579J9u5,3X(l6u6n$f$d6r6p$h4E4h4s5."], ["$btraffic.provider.Forecast", "57569J9u5,3X6u6n6t$d6r6p6o$k6m4E4h4s7R5."], ["$ctraffic.provider.layoutStorage", "4n"], ["$dtraffic.provider.Base", "5P6f9Z6N"], ["$etraffic.provider.Archive", "6h57569J9u5,3X6n6t$d6r6p6o$m6m4E4h4m7R5."], ["$ftraffic.ActualMultiSource", "6t6n564E4C7u6p"], ["$gtraffic.BaseMultiSource", "584E4h564N"], ["$htraffic.view.Actual", "$l4E$c"], ["$itraffic.view.optionMapper", "5S"], ["$ktraffic.view.Forecast", "$l4E$c"], ["$ltraffic.view.Base", "6h4N3_$i"], ["$mtraffic.view.Archive", "$l4E$c"], ["$ngeometryEditor.controller.Edge", "4E_D_E"], ["$ogeometryEditor.controller.Vertex", "4E_D_F$u8w"], ["$pgeometryEditor.controller.Point", "4E_D_y_G"], ["$rgeometryEditor.controller.PolygonPath", "4E_C8w"], ["$sgeometryEditor.controller.Polygon", "4E_D$r_B8w"], ["$tgeometryEditor.controller.LineString", "4E_C_A8w"], ["$ugeometryEditor.Menu", "4k3q5e4T9B"], ["$vgeometryEditor.GuideLines", "4k4F5P6k6V9q"], ["$wgeometryEditor.component.SubEntityManager", "4m"], ["$xgeometryEditor.Point", "4E_M$y_N$p$E"], ["$ygeometryEditor.storage", "4n"], ["$AgeometryEditor.view.Edge", "4E$D8g-f5p4T_K"], ["$BgeometryEditor.LineString", "4m4E_M_O$t$F$y_I"], ["$CgeometryEditor.Polygon", "4m4E_M_P$s$G$y_I"], ["$DgeometryEditor.view.Vertex", "4E4m_64l8g-f5p4T_H$q"], ["$EgeometryEditor.view.Point", "4E_6"], ["$FgeometryEditor.view.Path", "4E_5$D$A$w"], ["$GgeometryEditor.view.MultiPath", "4E_5$F"], ["$HcoordSystem.Cartesian", "4m"], ["$IcoordSystem.cartesian", "$H"], ["$KdomEvent.touch.override", "_84K4O"], ["$LdomEvent.multiTouch.override", "_*4O4K"], ["$MdomEvent.multiPointer.override", "_)4O4K"], ["$NdomEvent.pointer.override", "_(4K4O"], ["$Oevent.ArrayGroup", "4m"], ["$Pevent.manager.Mixed", "4m4O"], ["$Revent.manager.Base", "4O4N4m$O4c"], ["$Sevent.manager.Array", "4m"], ["$Toverlay.staticGraphics.Base", "4E(r(W3Z6T"], ["$Uoverlay.interactiveGraphics.LoadingDispatcher", "4m"], ["$Voverlay.html.rectangle.Layout", "4E7v7u4N6)7d3X"], ["$Woverlay.interactiveGraphics.Base", "4E4b$U6T"], ["$XgeoXml.parser.ymapsml.geoObjects", "4N4m7B5f5e5O385234.B"], ["$YgeoXml.parser.ymapsml.MapState", "4N4i"], ["$0geoXml.parser.gpx.geoObjects", "5f5e8w5P6*"], ["$1geoXml.parser.kml.geoObjects", "4N5f5e5O38526C4i4H34"], ["$2layout.templateBased.Base", "4E6)7u7v4m4N4h7O314A6N6f6i6h6(6C4R388w"], ["$4graphics.render.svg.Shapes", "4E4m7f$57v4F"], ["$5graphics.render.abstract.Shapes"], ["$6graphics.render.canvas.Shapes", "4E4m7h$57i4H4a"], ["$7graphics.render.vml.Shapes", "4E4m7k$57v4F"], ["$9util.dom.ClassName.byClassName"], ["$$util.dom.ClassName.byClassList"], ["$-util.dom.reaction.hover", "4m6C$."], ["$_util.dom.reaction.hold", "4m6C4o$.7v"], ["$.util.dom.reaction.common", "7r4m4o"], ["$!util.scheduler.strategy.scheduled", "4E$z$Q"], ["$*util.scheduler.strategy.storage", "4n"], ["$(util.scheduler.strategy.quantum", "4E$z$Z"], ["$)util.scheduler.strategy.asap", "4E$z$Z"], ["$,util.scheduler.strategy.now", "4E$z"], ["$qutil.scheduler.strategy.Raf", "4E$z$Z"], ["$jutil.scheduler.strategy.background", "4E$z$Q"], ["$zutil.scheduler.strategy.base", "$*"], ["$Qutil.scheduler.timescheduler", "$q"], ["$Jutil.scheduler.strategy.processing", "4E$z$Q"], ["$Zutil.scheduler.asap", "4h4O6C"], ["-acontrol.mapTools.behaviorButtonFactory", "4E-b4m"], ["-bcontrol.mapTools.behaviorButton", "4E489u"], ["-ccontrol.mapTools.button.Magnifier", "-a738w"], ["-dcontrol.mapTools.button.Drag", "-a738w48"], ["-econtrol.mapTools.button.Ruler", "-a738w"], ["-fgeoObject.overlayFactory.interactive", "8c686-6.6$6!8b"], ["-ggeoObject.overlayFactory.htmlRectangle", "8c66"], ["-hgeoObject.overlayFactory.staticGraphics", "8c6X6V6W6Y6U8b"], ["-igeoObject.overlayFactory.rectangle", "8c6$"], ["-kgeoObject.overlayFactory.hotspot", "8c63626460658b"], ["-lgeoObject.overlayFactory.polyline", "8c6-"], ["-mgeoObject.overlayFactory.polygon", "8c6."], ["-ngeoObject.overlayFactory.placemark", "8c68"], ["-ogeoObject.overlayFactory.circle", "8c6!"], ["-pgeoObject.overlayFactory.interactiveGraphics", "8c6_6-6.6$6!8b"], ["-rbehavior.RightMouseButtonMagnifier", "5C-s5D9G"], ["-sbehavior.magnifier.mouse.Component", "669,6C4I4T5X3X"], ["-tbehavior.LeftMouseButtonMagnifier", "5C-s5D9G"], ["-ubehavior.BaseMultiEngine", "4U5G6H7S7C"], ["-vgeoQueryResult.component.distance", "4h4F7N4N91-B6x$I9U"], ["-wgeoQueryResult.component.util"], ["-xgeoQueryResult.component.intersect", "3)6x$I4d7N-v-y"], ["-ygeoQueryResult.component.contain", "3)4d-B-A6x$I927N"], ["-AgeoQueryResult.component.search", "-w"], ["-BgeoQueryResult.component.geometryPicker", "9W9T9U9V9S4N4J"], ["-Dhotspot.shape.geometryStorage", "4n"], ["-Ehotspot.shape.geometry.MultiPolygon", "-H5P4l-D9j6N"], ["-Fhotspot.shape.geometry.Rectangle", "9T-D4E-G"], ["-Ghotspot.shape.geometry.Base", "5P6N"], ["-Hhotspot.shape.geometry.Polygon", "-I-D-G9q4E"], ["-Ihotspot.shape.geometry.Polyline", "91-D-G4E"], ["-Khotspot.shape.geometry.Circle", "4E4l4F-D-G"], ["-Lhotspot.layer.addon.balloon", "8(576h4h3V4O"], ["-Mhotspot.layer.addon.hint", "578!6h6C4h3O4O"], ["-Nyandex.enterprise.mapRestriction.vector", "3Y"], ["-Oyandex.enterprise.mapRestriction.route", "-P-N-y-x9V9U3S3)923z3Q4F"], ["-Pyandex.enterprise.mapRestriction.imageMap", "-N9V933Q4l3)"], ["-Rtheme.browser.desktop.ie7", "_-5j_q6Z"], ["-Stheme.browser.desktop.ie8", "_-5j_q6Z"], ["-Ttheme.browser.desktop.presto", "_-5j6Z"], ["-Utheme.browser.desktop.gecko", "5j__$L$K6Z"], ["-Vtheme.browser.desktop.ie9", "5j6J__$L$K"], ["-Wtheme.browser.desktop.safari", "6Z5j__$L$K"], ["-Xtheme.browser.desktop.webkit", "6J5j__$L$K"], ["-Ytheme.browser.touch.webkit", "5j"], ["-0theme.browser.touch.common", "5j__$L$K6Z"], ["-1theme.browser.pointer.ie10", "5j_!$M$N_z6J"], ["-2theme.twirl.control.meta", "5O5j.e"], ["-3theme.twirl.clusterAccordion.layout.List", "383X522c7u6f4N7v4h"], ["-4theme.twirl.hint.preset", "5O-).T(Y(y5r4T"], ["-5theme.twirl.hint.meta", "5O5j-4"], ["-6theme.twirl.behavior.meta", "5j"], ["-7theme.twirl.control.search.Layout", "52388w7r6($_$-7u7v4h4N4e6C383X2b1f1-061Q"], ["-8theme.twirl.search.meta", "5j5O-9"], ["-9theme.twirl.search.preset", "5O5j8w-7"], ["-$theme.twirl.routeEditor.meta", "5j5O--"], ["--theme.twirl.routeEditor.preset", "5O5j(q"], ["-_theme.twirl.cluster.metaOptions", "5j-.5O"], ["-.theme.twirl.cluster.layout.preset", "5O!C!D!b.E!a!N5p.J!a.S!g.R!f-3.n.Q.Z"], ["-!theme.twirl.balloon.Layout", "52387v4N310v7r4e"], ["-*theme.twirl.balloon.meta", "5O5j-("], ["-(theme.twirl.balloon.preset", "5O-!.H!c!e!d.I.G)f5r4T"], ["-)theme.twirl.label.Layout", "52386N"], ["-,theme.twirl.label.preset", "5O-).T(Y"], ["-qtheme.twirl.label.meta", "5O5j-,"], ["-jtheme.twirl.geometryEditor.meta", "5j.1.Y.04T3q"], ["-zmap.control.manager.Layout", "3X7u7v4T7s4m"], ["_amap.action.Base", "6N"], ["_egeometry.component.pixelGeometryGeodesic.rectangle", "_h_i9q9j"], ["_ggeometry.component.pixelGeometryGeodesic.polygon", "_h_i9q"], ["_hgeometry.component.pixelGeometryGeodesic.lineString", "_i937R"], ["_igeometry.component.pixelGeometryGeodesic.storage", "4n"], ["_kgeometry.component.pixelGeometryGeodesic.circle", "_i9j934y"], ["_lgeometry.component.pixelGeometrySimplification.storage", "4n"], ["_mgeometry.component.pixelGeometrySimplification.lineString", "7m_l"], ["_ngeometry.component.pixelGeometrySimplification.polygon", "9q_m_l"], ["_ogeometry.component.commonMethods.rectangle", "4l91"], ["_pgeometry.component.commonMethods.polygon", "92914l"], ["_rgeometry.component.commonMethods.circle"], ["_straffic.provider.actual.metaOptions", "5O5j_t"], ["_ttraffic.provider.actual.preset", "5O6s3)!o)b)a!n!h"], ["_utraffic.provider.forecast.metaOptions", "5O5j_v"], ["_vtraffic.provider.forecast.preset", "5O3)"], ["_wtraffic.provider.archive.metaOptions", "5O5j_x"], ["_xtraffic.provider.archive.preset", "5O3)"], ["_ygeometryEditor.controller.PointDrawing", "4E.63X"], ["_AgeometryEditor.controller.LineStringDrawing", "4E.64p"], ["_BgeometryEditor.controller.PolygonDrawing", "4E.64p"], ["_CgeometryEditor.controller.BasePath", "4E_D$o$n8w"], ["_DgeometryEditor.controller.Base", "4m"], ["_EgeometryEditor.controller.EdgeDragging", "4E4p4f.$"], ["_FgeometryEditor.controller.VertexDragging", "4E4f.$"], ["_GgeometryEditor.controller.PointDragging", "4E.9$v"], ["_HgeometryEditor.options.vertexMapping", "_L"], ["_IgeometryEditor.options.guideLinesMapping", "_L"], ["_KgeometryEditor.options.edgeMapping", "_L"], ["_LgeometryEditor.options.mapper", "5S"], ["_MgeometryEditor.Base", "4m6N6f5P_L3X"], ["_NgeometryEditor.model.RootVertex", "4E_2_431"], ["_OgeometryEditor.model.RootLineString", "4E_2_W"], ["_PgeometryEditor.model.RootPolygon", "4E_2_X"], ["_RgeometryEditor.model.RootLinearRing", "4E_O_Y"], ["_SgeometryEditor.model.ChildVertex", "4E_0_431"], ["_TgeometryEditor.model.ChildLineString", "4E_0_W"], ["_UgeometryEditor.model.ChildLinearRing", "4E_T_Y"], ["_VgeometryEditor.model.ChildPolygon", "4E_0_X"], ["_WgeometryEditor.model.component.LineString", "4E_S..3X$w._.-31"], ["_XgeometryEditor.model.component.Polygon", "4E_U.."], ["_YgeometryEditor.model.component.LinearRing", "4E_W"], ["_0geometryEditor.model.MultiPointChild", "4E_1"], ["_1geometryEditor.model.BaseChild", "4E_3"], ["_2geometryEditor.model.BaseRoot", "4E_3"], ["_3geometryEditor.model.Base", "$R"], ["_4geometryEditor.model.mixin.Vertex"], ["_5geometryEditor.view.BasePath", "4E_75f_H_K"], ["_6geometryEditor.view.Base", "4m"], ["_7geometryEditor.view.BaseParent", "4E_6$w"], ["_8domEvent.touch.overrideStorage", "4n"], ["_9domEvent.managerComponent.mouseLeaveEnterDispatcher", "4G6H6A"], ["_$domEvent.managerComponent.wheelDispatcher", "4G6H"], ["_-domEvent.managerOverrides.desktop", "_$_9_."], ["__domEvent.managerOverrides.touches", "4G_.6y"], ["_.domEvent.managerOverrideStorage", "4n"], ["_!domEvent.managerOverrides.pointers", "4G_.6G"], ["_*domEvent.multiTouch.overrideStorage", "4n"], ["_(domEvent.pointer.overrideStorage", "4n"], ["_)domEvent.multiPointer.overrideStorage", "4n"], ["_,domEvent.Base", "4E31"], ["_qdomEvent.override.ie78", "_j"], ["_jdomEvent.overrideStorage", "4n"], ["_zdomEvent.override.common", "_j4r4K"], ["_Qrouter.editor.component.wayPoint.Editor", "4h6N4*"], ["_Jrouter.editor.component.wayPoint.Remover", "6N"], ["_Zrouter.editor.component.wayPoint.Adder", "8g6N4U4*"], [".arouter.editor.component.viaPoint.Editor", "4h6N"], [".brouter.editor.component.viaPoint.Remover", "6N"], [".crouter.editor.component.viaPoint.Adder", "6N4z914h"], [".dtheme.twirl.control.preset.geolocation", "5O39"], [".etheme.twirl.control.preset.core", "5O5j8w.d(q"], [".ftheme.twirl.control.layout.ListBox", "7u7v7r$-$_4e523X386(4O0e2z8w"], [".gtheme.twirl.control.layout.Group", "6)384E.(316(7O7u7v4h4O"], [".htheme.twirl.control.layout.Zoom", "4E7u7v7r3X6C$-4I523K38.i121b"], [".itheme.twirl.control.layout.SmallZoom", "7u7v7r3X6C$-52386(1b"], [".ktheme.twirl.control.layout.Button", "521h266h38$-$_387u7r316(7v4H3X"], [".ltheme.twirl.control.layout.ScaleLine", "52.j387u6(3H$I"], [".mtheme.twirl.control.layout.Rollup", "52236($-7u6C6H4I38"], [".ntheme.twirl.clusterAccordion.layout.ListItem", "383X522!6C7u7v4m7r4h"], [".otheme.twirl.geoObject.layout.IconContent", "3852"], [".ptheme.twirl.geoObject.layout.BalloonFooterContent", "4E386g!d"], [".rtheme.twirl.geoObject.layout.HintContent", "3852"], [".stheme.twirl.geoObject.layout.BalloonHeaderContent", "3852"], [".ttheme.twirl.geoObject.layout.StretchyIcon", "38527u7v7r3X117O"], [".utheme.twirl.geoObject.layout.BalloonBodyContent", "3852"], [".vtheme.twirl.geoObject.meta.editor", "5O5j"], [".wtheme.twirl.geoObject.meta.full", "5O5j.B.x.v"], [".xtheme.twirl.geoObject.meta.standard", "5O5j5p-f39.o.r.u.p.s.A.C.y"], [".ytheme.twirl.geoObject.preset.poiIcon", "5O39"], [".Atheme.twirl.geoObject.preset.dotIcon", "5O39"], [".Btheme.twirl.geoObject.preset.stretchyIcon", "5O.t"], [".Ctheme.twirl.geoObject.preset.blankIcon", "5O37"], [".Dtheme.twirl.hotspot.meta.hint", "5j52"], [".Etheme.twirl.cluster.layout.Icon", "7u7v6C6N31384R(J5T4a"], [".Ftheme.twirl.hotspot.meta.balloon", "5j52"], [".Gtheme.twirl.balloon.layout.CloseButton", "6C3152382J"], [".Htheme.twirl.balloon.layout.Content", "385203"], [".Itheme.twirl.balloon.layout.Shadow", "38527u7r7v5T3l"], [".Rtheme.twirl.clusterCarousel.layout.Pager", "38520m3X6f4N7u4O7v"], [".Stheme.twirl.clusterCarousel.layout.Content", "385j520.3X6f6C4N7u7v7r"], [".Ttheme.twirl.label.layout.Content", "3852"], [".Wtheme.twirl.control.layout.Traffic", "5238!m6h7v7r5O5P6f4h$c"], [".Xtheme.twirl.traffic.metaOptions.control", "5j.W"], [".Ytheme.twirl.geometryEditor.layout.Edge", "4m7u7v6C6N31384R"], [".0theme.twirl.geometryEditor.layout.Menu", "7u7v6C6N38"], [".1theme.twirl.geometryEditor.layout.Vertex", "7u7v4E6)3X6C3138"], [".2geometry.component.renderFlow.stageShift", "96"], [".3geometry.component.renderFlow.stageGeodesic", "_i"], [".4geometry.component.renderFlow.stageScale"], [".5geometry.component.renderFlow.stageSimplification", "_l"], [".6geometryEditor.controller.PathDrawing", "4E_D4h3X.7.8"], [".7geometryEditor.drawing.syncObject", "6N"], [".8geometryEditor.drawing.Tool", "4h3X4U$v"], [".9geometryEditor.controller.BaseMarkerDragging", "4E_D5P"], [".$geometryEditor.controller.BasePathMarkerDragging", "4E.9$v5P"], [".-geometryEditor.model.EdgeGeometry", "4m$R315P9($I"], ["._geometryEditor.model.Edge", "4E_231"], ["..geometryEditor.model.component.BaseParent", "4m$w31"], [".!theme.twirl.control.layout.ListBoxItem", "521x0x6(3X$-7u7v38"], [".*theme.twirl.control.layout.ListBoxSeparator", "526(1n387v"], [".)theme.twirl.control.miniMap.Layout", "6)4E387v(z5v3-3X3P7O.q7u7v7r3$6(31"], [".,control.miniMap.DragComponent", "4I9M"], [".qcontrol.miniMap.LayerPane", "6C6N313X7u7v7S7I.,"], [".ztheme.twirl.control.layout.ToolBarSeparator", "5238"], [".Qtheme.twirl.clusterAccordion.layout.ItemTitle", "383X520X7u7v5P395O"], [".Jtheme.twirl.cluster.layout.NightIconContent", "3852(Q"], [".Ztheme.twirl.clusterAccordion.layout.ItemContent", "383X522t7u7v"], ["!atheme.twirl.cluster.layout.IconContent", "3852"], ["!btheme.twirl.cluster.balloon.layout.ContentBody", "38520C3X7u"], ["!ctheme.twirl.balloon.layout.content.Header", "5238"], ["!dtheme.twirl.balloon.layout.content.Footer", "3852"], ["!etheme.twirl.balloon.layout.content.Body", "3852"], ["!ftheme.twirl.clusterCarousel.layout.PagerItem", "3852193X7u7r"], ["!gtheme.twirl.clusterCarousel.layout.ContentItem", "38523r3X7u"], ["!htheme.twirl.traffic.layout.trafficLight.balloon.ContentBody", "38527u7r8w)b)a6C6n"], ["!ktheme.twirl.traffic.layout.control.constants"], ["!ltheme.twirl.traffic.layout.control.ContentLayout", "52!k6n3y7v386(7u"], ["!mtheme.twirl.control.layout.TurnedOff", "526(6C7u0a3y7r7v$-$_"], ["!ntraffic.balloon.layout.InfoContentBody", "38527u(Z8w6C4C6n"], ["!otraffic.balloon.layout.ContentBody", "38527u7r!H)b)a6C8w3H31"], ["!ptheme.twirl.traffic.metaOptions.trafficJamLayer.hint", "5O5j"], ["!rtheme.twirl.traffic.metaOptions.trafficLight.balloon", "5O5j!h"], ["!stheme.twirl.traffic.preset.control.actual", "5O!E!F!U!T!6!4!8!O!P"], ["!ttheme.twirl.traffic.preset.control.forecast", "5O!E!F!U!T!R!W!(!9!$!8!5!q!z"], ["!utheme.twirl.traffic.preset.control.archive", "5O!E!F!U!T!V!W!,!9!$!8!7!q!z"], ["!vtheme.twirl.traffic.preset.trafficLight.icon", "5O6n"], ["!wtheme.twirl.traffic.preset.trafficLight.balloon", "5O!h"], ["!xtheme.twirl.control.miniMap.switcher.Layout", "6)4E6C7r7v8w38"], ["!Ctheme.twirl.cluster.balloon.layout.Sidebar", "38527u6f7v4h4O3X4N2S"], ["!Dtheme.twirl.cluster.balloon.layout.MainContent", "38527u3X1v"], ["!Etheme.twirl.traffic.layout.control.Header", "7u7v7r$-$_6h526C!k0a"], ["!Ftheme.twirl.traffic.layout.control.Body", "7u7v7r6h526C!k2T"], ["!Gtheme.twirl.traffic.layout.trafficJamLayer.hint.Content", "38527u8w3H"], ["!Htraffic.balloon.layout.Distance", "388w7u3H"], ["!Itheme.twirl.traffic.preset.control.actualServicesList", "5O!*"], ["!Ntheme.twirl.cluster.balloon.layout.SidebarItem", "38522_3X7u7r"], ["!Otheme.twirl.traffic.layout.control.actual.TimeHint", "527u7v8w6h"], ["!Ptheme.twirl.traffic.layout.control.actual.OpenedPanelContent", "7r52"], ["!Rtheme.twirl.traffic.layout.control.forecast.EmptyTimeHint", "6N7v"], ["!Stheme.twirl.traffic.layout.control.forecast.TimeHint", "527u7v8w6h"], ["!Ttheme.twirl.traffic.layout.control.Points", "7u7v6h3H8w522k7v"], ["!Utheme.twirl.traffic.layout.control.ChooseCity", "520*"], ["!Vtheme.twirl.traffic.layout.control.archive.TimeHint", "527u7v8w6h"], ["!Wtheme.twirl.traffic.layout.control.archive.OpenedPanelContent", "52"], ["!4theme.twirl.traffic.layout.control.actual.StateHint", "527u7v8w6h0F"], ["!5theme.twirl.traffic.layout.control.forecast.StateHint", "527u7v8w6h0F"], ["!6theme.twirl.traffic.layout.control.ActualServicesList", "527u387u5O"], ["!7theme.twirl.traffic.layout.control.archive.StateHint", "527u7v8w6h0F"], ["!8theme.twirl.traffic.layout.control.Switcher", "527u7r7v6C4I143K8w"], ["!9theme.twirl.traffic.layout.control.archive.PanelFoot", "520s7u8w"], ["!$theme.twirl.traffic.layout.control.archive.TimeControl", "527u7v7r6e6h!)!k5P"], ["!*theme.twirl.traffic.layout.control.trafficEvents", "526C7u7r6h381N"], ["!(theme.twirl.traffic.layout.control.forecast.TimeLine", "527u7v3X6C4I7R1_!k"], ["!)theme.twirl.traffic.layout.control.archive.WeekDays", "522D7u7r6C4m8w!j3X"], ["!,theme.twirl.traffic.layout.control.archive.TimeLine", "527u7v6h6C4I7S7R0u!k"], ["!qtheme.twirl.traffic.layout.control.archive.weekDays.OnTheNearestTime", "527u7r3X8w6C"], ["!jtheme.twirl.traffic.layout.control.archive.WeekDay", "527u7r3X6m6C"], ["!ztheme.twirl.traffic.layout.control.archive.weekDays.SelectButton", "527u7r6C2i8w3X"]],
            css: [["0bb-form-button_height_26"], ["0di-popup__under_color_white.ie"], ["0fb-form-radio__button.standards"], ["0gb-form-button__input.ie"], ["0hb-form-input.standards"], ["0ib-select_control_search.ie8"], ["0kb-form-button_theme_grey-sm.ie"], ["0lb-select__hint.standards"], ["0ni-popup_visibility_visible"], ["0ob-popupa_scale-slider_yes"], ["0pb-form-button_height_19"], ["0rb-traffic-balloon__line"], ["0tb-cluster-accordion.standards"], ["0wb-form-checkbox_disabled_yes.standards"], ["0yb-form-button_valign_middle"], ["0Ab-traffic-panel__msg"], ["0Bb-form-button_focused_yes"], ["0Db-traffic-balloon_type_info"], ["0Eb-ruler.ie"], ["0Gb-form-switch_theme_switch-s.standards"], ["0Hb-select_type_prognos.standards"], ["0Ib-form-radio__button_disabled_yes.standards"], ["0Kb-form-input_size_16.ie"], ["0Li-popup__under_type_paranja.ie"], ["0Mb-cluster-accordion_list_marker"], ["0Nb-form-button_type_simple"], ["0Ob-cluster-tabs"], ["0Pb-traffic-panel__level-hint"], ["0Rb-cluster-carousel_pager_numeric.standards"], ["0Sb-api-link"], ["0Ub-popupa.ie"], ["0Vb-form-button.standards"], ["0Wb-select.standards"], ["0Yb-form-radio__button_side_both.standards"], ["00b-zoom__scale.ie"], ["01b-pseudo-link.standards"], ["02b-zoom__sprite.standards"], ["04b-select__arrow.ie"], ["05b-search__button"], ["07b-dropdown-button.ie"], ["08i-popup"], ["09b-cluster-carousel_pager_marker.ie"], ["0$b-traffic-panel.standards"], ["0-b-form-switch_disabled_yes.ie"], ["0_b-cluster-carousel.standards"], ["0!b-form-checkbox_disabled_yes.ie"], ["0)b-form-button.ie"], ["0,b-popupa__shadow.standards"], ["0qb-tip.ie"], ["0jb-traffic-panel__scale.ie8"], ["0Qb-form-button_theme_simple-grey.ie"], ["0Jb-select_search.standards"], ["0Zb-traffic-week.ie8"], ["1ab-serp-url"], ["1cb-form-input__clear_visibility_visible"], ["1di-popup__under.standards"], ["1eb-popupa__tail.ie"], ["1gb-form-button_theme_grey-sm.standards"], ["1ib-traffic-balloon_type_tip"], ["1kb-select_control_traffic.ie"], ["1lb-form-button_disabled_yes"], ["1ob-cluster-carousel.ie"], ["1pb-zoom.ie"], ["1rb-zoom.standards"], ["1sb-form-button_theme_grey-no-transparent-26.standards"], ["1tb-cluster-carousel_pager_numeric.ie"], ["1ui-custom-scroll"], ["1wb-placemark"], ["1yb-form-switch.ie"], ["1Ab-form-input.ie"], ["1Bb-search.ie"], ["1Cb-cluster-accordion_list_numeric"], ["1Db-traffic-panel__scale.standards"], ["1Eb-select.ie"], ["1Fb-traffic-panel.ie"], ["1Gb-popupa.standards"], ["1Hb-form-button_pressed_yes"], ["1Ib-dropdown-button.standards"], ["1Kb-form-button_theme_grey-19.standards"], ["1Lb-form-button_theme_simple-grey.standards"], ["1Mi-popup__under.ie"], ["1Ob-balloon.standards"], ["1Rb-ico.ie"], ["1Tb-select__panel-switcher.standards"], ["1Ub-cluster-content"], ["1Vb-form-radio__button_side_both.ie"], ["1Wb-select_type_prognos.ie"], ["1Xb-form-checkbox_focused_yes.ie"], ["1Yb-select__pager.ie"], ["10b-form-radio.ie8"], ["13b-listbox-panel.standards"], ["15b-form-checkbox_focused_yes.standards"], ["16b-popupa_theme_ffffff.ie"], ["17b-form-switch.standards"], ["18b-traffic-panel__layer.ie8"], ["1$b-form-checkbox_checked_yes.standards"], ["1.b-placemark_theme"], ["1!b-select_search.ie"], ["1*b-form-input__hint.ie"], ["1(b-zoom__scale.standards"], ["1,b-form-button_hovered_yes"], ["1qb-form-button_theme_grey-19.ie"], ["1jb-form-input_has-clear_yes"], ["1zb-form-button__click.standards"], ["1Jb-balloon.ie"], ["1Zb-form-input__hint.standards"], ["2ai-popup__under_type_paranja.standards"], ["2eb-select_control_traffic.standards"], ["2fb-zoom__hint.ie"], ["2gb-form-button__click.ie"], ["2hb-form-radio__button_checked_yes.ie"], ["2lb-search__input.ie"], ["2mb-form-radio__button.ie"], ["2nb-listbox-panel.ie8"], ["2ob-form-checkbox.standards"], ["2rb-zoom__hint.standards"], ["2sb-search.standards"], ["2ub-traffic-panel__layer.standards"], ["2vb-pseudo-link.ie"], ["2wb-cluster-carousel_pager_marker.standards"], ["2xb-ruler.standards"], ["2yb-form-button_height_22"], ["2Ab-form-button_theme_grey-no-transparent-26.ie"], ["2Bb-poi-balloon-content.standards"], ["2Cb-tip.standards"], ["2Eb-form-button_theme_grey-22.ie"], ["2Fb-form-radio_size_11.standards"], ["2Gb-listbox-panel.ie"], ["2Hb-select_control_search.ie"], ["2Ib-form-button_theme_grey-22.standards"], ["2Kb-form-input_size_16.standards"], ["2Lb-form-input__clear.ie"], ["2Nb-select_control_listbox.standards"], ["2Ob-form-input__clear.standards"], ["2Pb-ico.standards"], ["2Rb-search-panel.standards"], ["2Ub-select_data_no-data"], ["2Vb-cluster-accordion.ie"], ["2Wb-form-radio__button_focused_yes"], ["2Xb-form-radio.ie"], ["2Yb-search-panel.ie"], ["20b-zoom__sprite.ie"], ["21b-form-checkbox_size_13.ie"], ["22b-traffic-week.standards"], ["24b-serp-item"], ["25b-select__arrow.standards"], ["27b-form-radio__button_disabled_yes.ie"], ["28b-select__hint.ie"], ["29b-traffic-panel__scale.ie"], ["2$b-form-radio__button.ie8"], ["2-b-form-radio__button_checked_yes.ie8"], ["2.b-popupa_theme_ffffff.standards"], ["2*b-traffic-panel__layer.ie"], ["2(b-form-checkbox.ie8"], ["2,b-select_control_listbox.ie"], ["2qb-form-switch_pressed_yes"], ["2jb-zoom__mark"], ["2Qb-select__panel-switcher.ie"], ["2Zb-traffic-balloon"], ["3ab-search__input.standards"], ["3bb-form-switch_theme_switch-s.ie8"], ["3db-form-checkbox_size_13.standards"], ["3eb-form-button_size_sm"], ["3fb-form-input__hint_visibility_visible"], ["3gb-form-button__input.standards"], ["3hb-form-switch_type_switch.ie"], ["3ib-form-radio__button_checked_yes.standards"], ["3kb-form-checkbox.ie"], ["3mb-form-switch_theme_switch-s.ie"], ["3nb-form-switch_focused_yes"], ["3ob-poi-balloon-content.ie"], ["3pb-popupa__tail.standards"], ["3sb-form-checkbox_checked_yes.ie"], ["3ti-popup__under_color_white.standards"], ["3ub-form-radio_size_11.ie"], ["3vb-traffic-panel__level"], ["3wb-form-radio.standards"], ["3xb-popupa__shadow.ie8"], ["3Ab-form-switch_disabled_yes.standards"], ["3Bb-form-switch_type_switch.standards"], ["3Cb-select_control_search.standards"], ["3Eb-popupa__shadow.ie"], ["3Fb-select__pager.standards"], ["5Mcss.common"], ["5Qmap.css"], ["8Vbehavior.ruler.css"], ["8Wcss.overlay.common"], ["8Xcss.overlay.commonIe"], ["8Ycss.overlay.label"], ["80css.control.layer"], ["$3layer.tile.domTile.css"], ["$8util.nodeSize.css.common"], ["-Cpane.GlassPane.css-ie"], ["-Qmap.copyrights.css.ie"], ["-Jmap.copyrights.css.common"], ["-Zmap.copyrights.css.standards"], ["_bmap.css.en.ie"], ["_cmap.css.en.standards"], ["_dmap.css.ru.ie"], ["_fmap.css.ru.standards"], [".Ktheme.twirl.balloon.css.ie7", ".N"], [".Ltheme.twirl.balloon.css.ie6", ".N"], [".Mtheme.twirl.balloon.css.ie8", ".N"], [".Ntheme.twirl.balloon.css.ie"], [".Otheme.twirl.balloon.css.ie9", ".P"], [".Ptheme.twirl.balloon.css.standards"], [".Utheme.twirl.label.css.ie"], [".Vtheme.twirl.label.css.common"], [".(groupControl.css"], [".jcontrol.scaleline.css"], ["!ifake.css"], ["!ycontrol.minimap.css.ie8"], ["!Acontrol.minimap.css.ie"], ["!Bcontrol.minimap.css.common"], ["!Ktheme.twirl.cluster.default.ie.css"], ["!Ltheme.twirl.clusterNightContent.common.css"], ["!Mtheme.twirl.cluster.default.common.css"], ["!Xtraffic.balloon.infoLayout.css.common"], ["!Ytraffic.balloon.infoLayout.css.ie"], ["!0traffic.balloon.tip.css.ie"], ["!1traffic.balloon.tip.css.common"], ["!2traffic.balloon.layout.css.ie"], ["!3traffic.balloon.layout.css.common"], ["!-traffic.balloon.tip.yellow.css"], ["!_traffic.balloon.tip.green.css"], ["!.traffic.balloon.tip.brown.css"], ["!!traffic.balloon.tip.red.css"]]
        }, o, u, h, p;
        (function () {
            var t = "", n = "", r;
            h = function (e, n, r) {
                n.execute ? r() : m(e, u.getDepends(n), function () {
                    t += n.source(o), n.execute = !0, r()
                })
            }, p = function () {
                if (!t) {
                    return
                }
                r || (r = e.createElement("style"), r.type = "text/css"), r.styleSheet ? (n += t, r.styleSheet.cssText = n, r.parentNode || e.getElementsByTagName("head")[0].appendChild(r)) : (r.appendChild(e.createTextNode(t)), e.getElementsByTagName("head")[0].appendChild(r), r = null), t = ""
            }
        })();
        var w = function (e, t) {
            e.prototype = E(t.prototype), e.prototype.constructor = e, e.superclass = t.prototype, e.superclass.constructor = t
        }, E = Object.create || function (e) {
                function t() {
                }

                return t.prototype = e, new t
            }, S = Object.keys ? function (e, t) {
            var n = Object.keys(t);
            for (var r = 0, i = n.length; r < i; r++) {
                e[n[r]] = t[n[r]]
            }
            return e
        } : function (e, t) {
            for (var n in t) {
                t.hasOwnProperty(n) && (e[n] = t[n])
            }
            return e
        };
        return C
    }(document, window);
    init("ymaps", "https://api-maps.yandex.ru/2.0.40/release/", false, {
        name: "Chrome",
        version: "43.0.2351",
        engine: "WebKit",
        engineVersion: "537.36",
        osFamily: "Windows",
        osVersion: "6.3",
        isMobile: false,
        cssPrefix: "Webkit",
        transitionEndEventName: "webkitTransitionEnd"
    }, "package.standard,package.geoObjects,package.regions", project_data, "ymaps2_0_40", "")
})();
$(function () {
    $(".notification-dropdown").each(function (index, el) {
        var $el = $(el);
        var $dialog = $el.find(".pop-dialog");
        var $trigger = $el.find(".trigger");
        $dialog.click(function (e) {
            e.stopPropagation()
        });
        $dialog.find(".close-icon").click(function (e) {
            e.preventDefault();
            $dialog.removeClass("is-visible");
            $trigger.removeClass("active")
        });
        $("body").click(function () {
            $dialog.removeClass("is-visible");
            $trigger.removeClass("active")
        });
        $trigger.click(function (e) {
            e.preventDefault();
            e.stopPropagation();
            $(".notification-dropdown .pop-dialog").removeClass("is-visible");
            $(".notification-dropdown .trigger").removeClass("active");
            $dialog.toggleClass("is-visible");
            if ($dialog.hasClass("is-visible")) {
                $(this).addClass("active")
            } else {
                $(this).removeClass("active")
            }
        })
    });
    $(".skins-nav .skin").click(function (e) {
        e.preventDefault();
        if ($(this).hasClass("selected")) {
            return
        }
        $(".skins-nav .skin").removeClass("selected");
        $(this).addClass("selected");
        if (!$("#skin-file").length) {
            $("head").append('<link rel="stylesheet" type="text/css" id="skin-file" href="">')
        }
        var $skin = $("#skin-file");
        if ($(this).attr("data-file")) {
            $skin.attr("href", $(this).data("file"))
        } else {
            $skin.attr("href", "")
        }
    });
    $("#dashboard-menu .dropdown-toggle").click(function (e) {
        e.preventDefault();
        var $item = $(this).parent();
        $item.toggleClass("active");
        if ($item.hasClass("active")) {
            $item.find(".submenu").slideDown("fast")
        } else {
            $item.find(".submenu").slideUp("fast")
        }
    });
    var $menu = $("#sidebar-nav");
    $(".content").click(function () {
        if ($("body").hasClass("menu")) {
            $("html").removeClass("menu_view");
            $("body").removeClass("menu");
            window.setTimeout(function () {
                $(window).resize()
            }, 500)
        }
    });
    $("#menu-toggler").click(function (e) {
        if (!$("body").hasClass("menu")) {
            setTimeout(function () {
                $("html").addClass("menu_view");
                $("body").addClass("menu")
            })
        }
    });
    $(window).resize(function () {
        $(this).width() > 1280 && $("body.menu").removeClass("menu")
    });
    $("[data-toggle='tooltip']").each(function (index, el) {
        $(el).tooltip({placement: $(this).data("placement") || "top"})
    });
    var uiDropdown = new function () {
        var self;
        self = this;
        this.hideDialog = function ($el) {
            return $el.find(".dialog").hide().removeClass("is-visible")
        };
        this.showDialog = function ($el) {
            return $el.find(".dialog").show().addClass("is-visible")
        };
        return this.initialize = function () {
            $("html").click(function () {
                $(".ui-dropdown .head").removeClass("active");
                return self.hideDialog($(".ui-dropdown"))
            });
            $(".ui-dropdown .body").click(function (e) {
                return e.stopPropagation()
            });
            return $(".ui-dropdown").each(function (index, el) {
                return $(el).click(function (e) {
                    e.stopPropagation();
                    $(el).find(".head").toggleClass("active");
                    if ($(el).find(".head").hasClass("active")) {
                        return self.showDialog($(el))
                    } else {
                        return self.hideDialog($(el))
                    }
                })
            })
        }
    };
    new uiDropdown();
    $(".table th input:checkbox").click(function () {
        $checks = $(this).closest(".table").find("tbody input:checkbox");
        if ($(this).is(":checked")) {
            $checks.prop("checked", true)
        } else {
            $checks.prop("checked", false)
        }
    })
});
var table_RU, menu, chartUtils, colorUtils, waiter, common, douHistory, string, message, log, legend;
$(function () {
    if (typeof Highcharts !== "undefined") {
        Highcharts.theme = {
            colors: ["#4aa4be", "#75b9cd", "#a0cedc", "#cde4eb"],
            title: {style: {color: "#000", font: 'bold 16px "Trebuchet MS", Verdana, sans-serif'}},
            subtitle: {style: {color: "#666666", font: 'bold 12px "Trebuchet MS", Verdana, sans-serif'}},
            legend: {
                itemStyle: {font: "9pt Trebuchet MS, Verdana, sans-serif", color: "black"},
                itemHoverStyle: {color: "gray"}
            }
        };
        Highcharts.setOptions(Highcharts.theme)
    }
    if (typeof accounting !== "undefined") {
        accounting.settings = {number: {precision: 0, thousand: " ", decimal: "."}}
    }
    table_RU = {
        sPaginationType: "full_numbers",
        oLanguage: {
            oAria: {
                sSortAscending: " - нажмите для сортировки по возрастанию",
                sSortDescending: " - нажмите для сортировки по убыванию"
            },
            oPaginate: {sFirst: "Первая", sLast: "Последняя", sNext: "Следущая", sPrevious: "Предыдущая"},
            sEmptyTable: "Нет данных",
            sInfo: "Получено _TOTAL_ записей (_START_ до _END_)",
            sInfoEmpty: "Нет записей для отображения",
            sInfoFiltered: " - фильтрация _MAX_ записей",
            sLengthMenu: "Отображать _MENU_ записей",
            sLoadingRecords: "Пожалуйста подождите - загружается...",
            sProcessing: "Таблица занята",
            sSearch: "Применить фильтр _INPUT_ к таблице",
            sZeroRecords: "Нет записей для отображения"
        }
    };
    var globalAjaxSetupObj = {cache: window.IS_PUBLIC_USER};
    $.ajaxSetup(globalAjaxSetupObj);
    $(document).ajaxError(function (event, jqxhr, settings, exception) {
        if (jqxhr.status === 901) {
            window.location.reload(true)
        }
        ajaxError(settings.url, settings.data)
    });
    $.fn.selectpicker.defaults.noneSelectedText = " - ";
    var mainMenu = $("#sidebar-nav .main_menu"), menuItems = mainMenu.find("li a"), firstMenuLink = mainMenu.find("li:first-child a"), colorMaxVal = 255, defaultFillColor = "rgb(204,204,204)", greenStatic = "rgb(110,210,100)", greenOpacityStatic = "rgba(110,210,100,0.67)", colorIntervalMin = 150, colorIntervalMax = 230;

    function setActiveMenuItem(el) {
        clearActiveMenuItem();
        el.parent().addClass("active")
    }

    function clearActiveMenuItem() {
        menuItems.parents("li").removeClass("active")
    }

    function getActiveMenuItemUrl() {
        return mainMenu.find(".active a").data("to")
    }

    function initializeMenu() {
        var content = $(".content"), wrapper = content.find("#pad-wrapper"), lockMenuHandling = false, lastOpenedPageName = "";
        $(".main_menu a[data-to]").click(menuItemCkickHandler);
        function menuItemCkickHandler(e, data) {
            if (lockMenuHandling) {
                return false
            }
            var link = $(this), contentPageUrl = link.data("to"), targetPageName = contentPageUrl.split("=")[1].split(".jsp")[0], tatgetPage = wrapper.find("#" + targetPageName);
            if (lastOpenedPageName) {
                var lastPage = wrapper.find("#" + lastOpenedPageName);
                lastPage.hide();
                lastPage.removeClass("active_content")
            }
            if (tatgetPage.length) {
                tatgetPage.show();
                tatgetPage.addClass("active_content");
                var filterObj = getFilter();
                $(".active_content").trigger("change:filter", {
                    canton: filterObj.canton,
                    state: filterObj.state,
                    municipality: filterObj.municipality
                })
            } else {
                lockMenuHandling = true;
                var pageWrapper = $("<div>").attr("id", targetPageName).addClass("active_content");
                wrapper.append(pageWrapper);
                pageWrapper.load(contentPageUrl, function () {
                    lockMenuHandling = false;
                    var filterObj = getFilter();
                    $(".active_content").trigger("change:hot", {
                        canton: filterObj.canton,
                        state: filterObj.state,
                        municipality: filterObj.municipality
                    })
                })
            }
            lastOpenedPageName = targetPageName;
            content.toggleClass("hide_top_nav_panel", !!link.data("hide-top-nav-panel"));
            content.toggleClass("hide_top_nav_municipality", !!link.data("hide-top-nav-municipality"));
            if (data === undefined) {
                var regionFilterObj = getFilter();
                saveState(contentPageUrl, regionFilterObj)
            }
            setActiveMenuItem(link);
            $(document).scrollTop(0)
        }
    }

    function triggerMenuItemClick(menuItemLink) {
        menuItemLink.trigger("click", [{doNotSaveState: true}])
    }

    function resizeHiddenCharts() {
        $(window).resize()
    }

    function resizeChartContainer(seriesCount, chartContainer) {
        var chartHeight = seriesCount > 0 ? seriesCount * 100 : 200;
        chartHeight += 100;
        chartContainer.height(chartHeight)
    }

    function limitNumber(number) {
        if (number >= 1000 && number < 1000000) {
            return (number / 1000).toFixed(1).replace(".", ",") + " тыс."
        } else {
            if (number >= 1000000) {
                return (number / 1000000).toFixed(1).replace(".", ",") + " млн."
            } else {
                return number
            }
        }
    }

    function getColor(params) {
        var value = parseInt(params.value, 10), minValue = params.minValue, maxValue = params.maxValue, isQuality = params.isQuality, isInverted = params.isInverted, isNegativeValue = false, colorIntensity, colorInterval, red, green, blue;
        if (value < 0) {
            if (!isQuality) {
                isNegativeValue = true;
                value *= -1;
                maxValue = Math.abs(minValue)
            } else {
                return defaultFillColor
            }
        }
        if (maxValue === 0) {
            colorIntensity = 0
        } else {
            if (value < maxValue) {
                colorIntensity = value / maxValue
            } else {
                colorIntensity = 1
            }
        }
        if (isInverted) {
            colorIntensity = 1 - colorIntensity
        }
        blue = colorIntervalMin;
        if (isQuality) {
            colorInterval = colorIntervalMax - colorIntervalMin;
            if (colorIntensity < 0.5) {
                red = colorIntervalMin + colorInterval * colorIntensity * 2;
                green = colorIntervalMax
            } else {
                red = colorIntervalMax;
                green = colorIntervalMax - colorInterval * (colorIntensity - 0.5) * 2
            }
        } else {
            red = isNegativeValue ? colorIntervalMax : colorIntervalMin;
            green = isNegativeValue ? colorIntervalMin : colorIntervalMax;
            red = colorMaxVal - (colorMaxVal - red) * colorIntensity;
            green = colorMaxVal - (colorMaxVal - green) * colorIntensity;
            blue = colorMaxVal - (colorMaxVal - blue) * colorIntensity
        }
        return ["rgb(", red.toFixed(0), ",", green.toFixed(0), ",", blue.toFixed(0), ")"].join("")
    }

    function showWaiter(container) {
        container = convertParamToJqueryObj(container);
        if (container.find(".loading").length === 0) {
            var el = $("<div>", {"class": "loading"});
            container.css("position", "relative");
            container.append(el)
        }
    }

    function hideWaiter(container) {
        container = convertParamToJqueryObj(container);
        container.find(".loading").remove()
    }

    function convertParamToJqueryObj(container) {
        if (typeof container === "string") {
            container = $(container)
        } else {
            if (container.nodeType) {
                container = $(container)
            }
        }
        return container
    }

    function fillAgesSelect(selectObj, callback) {
        selectObj = convertParamToJqueryObj(selectObj);
        return $.ajax({
            type: "GET",
            url: "report.htm",
            dataType: "json",
            data: {action: "getReport", id: "age_types"},
            success: function (data) {
                if (checkJson(data)) {
                    var table = data.table;
                    selectObj.empty();
                    fillSelect(selectObj, table);
                    selectObj.selectpicker("refresh");
                    selectObj.change();
                    if (callback && typeof callback === "function") {
                        callback()
                    }
                }
            }
        })
    }

    function fillMonthSelect(selectObj, callback, year, requestId) {
        selectObj = convertParamToJqueryObj(selectObj);
        year = year || new Date().getUTCFullYear();
        requestId = requestId || "monthes_asc";
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "report.htm",
            data: {action: "getReport", id: requestId, year: year},
            success: function (data) {
                if (checkJson(data)) {
                    var table = data.table;
                    var curMonth = new Date().getMonth() + 1;
                    selectObj.empty();
                    fillSelect(selectObj, table);
                    selectObj.find('option[value="' + curMonth + '"]').prop("selected", true);
                    if (callback && typeof callback === "function") {
                        callback()
                    }
                    selectObj.selectpicker("refresh")
                }
            }
        })
    }

    function fillYearSelect(selectObj, callback, requestId) {
        selectObj = convertParamToJqueryObj(selectObj);
        requestId = requestId || "years_asc";
        $.ajax({
            type: "GET",
            dataType: "json",
            url: "report.htm",
            data: {action: "getReport", id: requestId},
            success: function (data) {
                if (checkJson(data)) {
                    var table = data.table;
                    var curYear = new Date().getUTCFullYear();
                    selectObj.empty();
                    fillSelect(selectObj, table);
                    selectObj.find('option[value="' + curYear + '"]').prop("selected", true);
                    if (callback && typeof callback === "function") {
                        callback()
                    }
                    selectObj.selectpicker("refresh")
                }
            }
        })
    }

    var fillSelect = function (selectObj, table) {
        _.forOwn(table, function (v) {
            var option = $("<option/>").val(v[0]).html(v[1]);
            selectObj.append(option)
        })
    };
    var setAvailabilityOfBootstrapSelect = function (selectObj, doEnable) {
        if (doEnable === null) {
            doEnable = true
        }
        selectObj = convertParamToJqueryObj(selectObj);
        selectObj.prop("disabled", !doEnable);
        selectObj.selectpicker("refresh")
    };
    var regionSelects = $(".top_nav_panel select");
    var setAvailabilityOfRegionSelects = function (doEnable) {
        var initializedRegionSelects = regionSelects.filter(function (index, domObj) {
            return $(domObj).next().hasClass("bootstrap-select")
        });
        setAvailabilityOfBootstrapSelect(initializedRegionSelects, doEnable)
    };
    var checkJson = function (json, property) {
        property = property || "table";
        return json && json.code === 0 && json[property] && json[property].length > 0
    };
    var downloadFile = function (downloadUrl) {
        var hiddenIFrameID = "hiddenDownloader", iframe = document.getElementById(hiddenIFrameID);
        if (iframe === null) {
            iframe = document.createElement("iframe");
            iframe.id = hiddenIFrameID;
            iframe.style.display = "none";
            document.body.appendChild(iframe)
        }
        iframe.src = downloadUrl
    };
    var clearHtmlSelection = function () {
        if (document.selection && document.selection.empty) {
            document.selection.empty()
        } else {
            if (window.getSelection) {
                window.getSelection().removeAllRanges()
            }
        }
    };

    function drawNoDataBlock(container, textMarginTop) {
        var noDataBlock;
        container.children().hide();
        container.css("height", "");
        noDataBlock = container.find(".no_data_block");
        if (noDataBlock.length) {
            noDataBlock.show()
        } else {
            container.append($("<div>").css("margin-top", textMarginTop).css("text-align", "center").addClass("no_data_block").text("Нет данных"))
        }
    }

    function saveState(contentPageUrl, regionFilterObj) {
        var state = getState(contentPageUrl, regionFilterObj);
        History.pushState(state.data, state.title, state.url)
    }

    function replaceState(contentPageUrl, regionFilterObj) {
        var state = getState(contentPageUrl, regionFilterObj);
        History.replaceState(state.data, state.title, state.url)
    }

    function getState(contentPageUrl, regionFilterObj) {
        var paramObj = {content: contentPageUrl && contentPageUrl.indexOf("=") && contentPageUrl.indexOf(".jsp") ? contentPageUrl.split("=")[1].split(".jsp")[0] : ""};
        if (regionFilterObj && !$.isEmptyObject(regionFilterObj) && regionFilterObj.hasOwnProperty("canton") && regionFilterObj.hasOwnProperty("state") && regionFilterObj.hasOwnProperty("municipality")) {
            $.extend(paramObj, regionFilterObj)
        }
        if (window.IS_PUBLIC_USER) {
            delete paramObj.state;
            delete paramObj.municipality
        }
        var stateUrl = "?" + $.param(paramObj);
        var state = {
            data: {
                _index: History.getCurrentIndex(),
                menuUrl: contentPageUrl,
                regionFilterObj: regionFilterObj
            }, title: "Дошкольное образование - Федеральный сегмент", url: stateUrl
        };
        return state
    }

    function initialContentPageLoad() {
        var initUrlParams = window.location.search, contentPageName = getParameterByName(initUrlParams, "content"), menuItemLink, initRegionFilterObj;
        if (initUrlParams && contentPageName) {
            menuItemLink = mainMenu.find('a[data-to*="' + contentPageName + '"]');
            if (!menuItemLink.length) {
                menuItemLink = firstMenuLink
            }
        } else {
            menuItemLink = firstMenuLink
        }
        initRegionFilterObj = {
            canton: window.USER_CANTON_ID !== -1 ? window.USER_CANTON_ID : getFilterIntValueFromQuery(initUrlParams, "canton"),
            state: window.USER_STATE_ID !== -1 ? window.USER_STATE_ID : getFilterIntValueFromQuery(initUrlParams, "state"),
            municipality: getFilterIntValueFromQuery(initUrlParams, "municipality")
        };
        douHistory.initialRegionFilterObj = initRegionFilterObj;
        douHistory.initialMenuItemLink = menuItemLink;
        replaceState(menuItemLink.data("to"), initRegionFilterObj)
    }

    function getParameterByName(query, name) {
        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"), results = regex.exec(query);
        return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "))
    }

    function getFilterIntValueFromQuery(query, paramName) {
        var val = getParameterByName(query, paramName);
        val = parseInt(val, 10);
        if (isNaN(val)) {
            if (paramName === "canton") {
                val = window.USER_CANTON_ID
            } else {
                if (paramName === "state") {
                    val = window.USER_STATE_ID
                } else {
                    val = -1
                }
            }
        }
        return val
    }

    History.Adapter.bind(window, "statechange", function () {
        var state = History.getState();
        if (!$.isEmptyObject(state.data)) {
            var currentIndex = History.getCurrentIndex(), internal = state.data._index === currentIndex - 1;
            if (!internal) {
                var menuItemLink = mainMenu.find('a[data-to="' + state.data.menuUrl + '"]');
                douHistory.initialRegionFilterObj = state.data.regionFilterObj;
                douHistory.initialMenuItemLink = menuItemLink;
                douHistory.changeFilter = true;
                setFilter()
            }
        }
    });
    Date.prototype.addDays = function (d) {
        this.setDate(this.getDate() + d);
        return this
    };
    Date.prototype.toPointFormatDateString = function (splitter, showFullYear) {
        splitter = splitter || ".";
        showFullYear = showFullYear || false;
        var date = this.getDate().toString(), month = (this.getMonth() + 1).toString(), year = this.getFullYear().toString();
        if (date.length < 2) {
            date = "0" + date
        }
        if (month.length < 2) {
            month = "0" + month
        }
        if (!showFullYear) {
            var l = year.length;
            year = year.substring(l - 2)
        }
        return date + splitter + month + splitter + year
    };
    function htmlEncode(value) {
        if (value) {
            return $("<div>").text(value).html()
        } else {
            return ""
        }
    }

    function htmlDecode(value) {
        if (value) {
            return $("<div>").html(value).text()
        } else {
            return ""
        }
    }

    var messageContainer = $("#dooModalMessageContainer"), messageContent = $(".modal-body", messageContainer), messageType = {
        info: "info",
        success: "success",
        warning: "warning",
        error: "error"
    };

    function showMessage(params) {
        params.className = params.className || messageType.info;
        messageContainer.removeClass([messageType.info, messageType.success, messageType.warning, messageType.error].join(" "));
        messageContainer.addClass(params.className);
        messageContent.html(params.text);
        messageContainer.modal("show")
    }

    function ajaxError(url, data) {
        console.error("REQUEST ERROR. Url: %s; data: %s", url, data)
    }

    function drawLegend(params) {
        var containerSelector = params.containerSelector, minValue = params.minValue, maxValue = params.maxValue, title = params.title, isQualityIndex = params.isQuality, isInverted = params.isInverted;
        minValue = Math.min(minValue, 0);
        maxValue = Math.max(maxValue, 0);
        var legendWidth = 320, legendHeight = 60, gradientWidth = 270, gradientHeight = 16, segmentsCount = 5, segmentWidth = gradientWidth / segmentsCount, margin = {
            top: 20,
            left: 20
        }, valueRange = maxValue - minValue, startColor = getColor({
            value: 0,
            maxValue: 100,
            isQuality: isQualityIndex,
            isInverted: isInverted
        }), stopColor = getColor({
            value: 100,
            maxValue: 100,
            isQuality: isQualityIndex,
            isInverted: isInverted
        }), valueTextY = gradientHeight + 10, textData = d3.range(segmentsCount + 1);
        var svg = d3.select(containerSelector).append("svg").attr("width", legendWidth).attr("height", legendHeight).attr("style", "position: absolute; bottom: 0; right: 0;").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
        var gradient = svg.append("svg:defs").append("svg:linearGradient").attr("id", "gradient").attr("x1", "0%").attr("x2", "100%").attr("spreadMethod", "pad");
        gradient.append("svg:stop").attr("offset", "0%").attr("stop-color", startColor);
        if (isQualityIndex) {
            var middleColor = getColor({value: 50, maxValue: 100, isQuality: true, isInverted: isInverted});
            gradient.append("svg:stop").attr("offset", "50%").attr("stop-color", middleColor)
        }
        gradient.append("svg:stop").attr("offset", "100%").attr("stop-color", stopColor);
        svg.append("svg:rect").attr("width", gradientWidth).attr("height", gradientHeight).style("fill", "url(#gradient)");
        svg.selectAll("rect").data(textData).enter().append("rect").attr("x", function (d) {
            return (d - 1) * segmentWidth
        }).attr("width", segmentWidth).attr("height", gradientHeight).attr("fill-opacity", 0).attr("stroke", "#fff").attr("stroke-width", 1);
        svg.append("svg:text").attr("x", gradientWidth).attr("y", -15).attr("text-anchor", "end").attr("dy", ".35em").text(title);
        textData = d3.range(segmentsCount + 2);
        svg.selectAll("text").data(textData).enter().append("text").attr("x", function (d) {
            return (d - 1) * segmentWidth
        }).attr("y", valueTextY).attr("text-anchor", "middle").attr("dy", ".35em").attr("font-size", "0.9em").text(function (d) {
            var result = 0, roundLevel = 1;
            if (d === 1) {
                result = minValue
            } else {
                if (d === segmentsCount + 1) {
                    result = maxValue
                } else {
                    result = valueRange / segmentsCount * (d - 1) + minValue
                }
            }
            if ((maxValue - minValue) > segmentsCount) {
                result = Math.ceil(result);
                roundLevel = 0
            }
            return accounting.formatNumber(result, roundLevel)
        });
        var mark = svg.append("svg:rect").attr("width", 0).attr("height", gradientHeight + 4).style("fill", "#000").attr("y", -2).attr("x", 0);
        return function (value) {
            if (value !== null && !isNaN(value)) {
                var x = gradientWidth * (value - minValue) / (maxValue - minValue);
                mark.attr("width", 2).attr("x", x)
            } else {
                mark.attr("width", 0)
            }
        }
    }

    function clearLegend(containerSelector) {
        d3.selectAll(containerSelector + " svg").remove()
    }

    function drawTotalValueForCountry(containerSelector, value) {
        var width = 200, height = 30;
        var svg = d3.select(containerSelector).append("svg").attr("width", width).attr("height", height).attr("style", "position: absolute; bottom: 0; right: 0;");
        svg.append("svg:text").attr("x", 15).attr("y", 10).attr("dy", ".35em").text("Всего: ");
        svg.append("svg:text").attr("x", 95).attr("y", 10).attr("font-weight", "bold").attr("dy", ".35em").text(value)
    }

    ({
        init: function () {
            var lastServerUpdateText = $("#lastServerUpdateText");
            if (lastServerUpdateText.length) {
                showWaiter(lastServerUpdateText);
                setTimeout(function () {
                    $.ajax({
                        url: "report.htm",
                        data: {action: "startupDate"},
                        dataType: "json",
                        type: "GET",
                        success: function (data) {
                            if (data.code === 0 && data.message) {
                                var dateStr = data.message;
                                lastServerUpdateText.text(dateStr)
                            } else {
                                lastServerUpdateText.text("-")
                            }
                        },
                        complete: function () {
                            hideWaiter(lastServerUpdateText)
                        },
                        error: function (data) {
                            lastServerUpdateText.text("-")
                        }
                    })
                }, 5000)
            }
        }
    }.init());
    menu = {
        initialize: initializeMenu,
        setActiveItem: setActiveMenuItem,
        getActiveItemUrl: getActiveMenuItemUrl,
        triggerItemClick: triggerMenuItemClick
    };
    chartUtils = {
        resizeHiddenCharts: resizeHiddenCharts,
        resizeHorizontalColumnsContainer: resizeChartContainer,
        limitNumber: limitNumber
    };
    colorUtils = {
        get: getColor, getGreenStatic: function () {
            return greenStatic
        }, getGreenOpacityStatic: function () {
            return greenOpacityStatic
        }
    };
    waiter = {start: showWaiter, stop: hideWaiter};
    common = {
        fillSelect: fillSelect,
        fillAgesSelect: fillAgesSelect,
        fillMonthSelect: fillMonthSelect,
        fillYearSelect: fillYearSelect,
        setAvailabilityOfBootstrapSelect: setAvailabilityOfBootstrapSelect,
        setAvailabilityOfRegionSelects: setAvailabilityOfRegionSelects,
        checkJson: checkJson,
        downloadFile: downloadFile,
        clearHtmlSelection: clearHtmlSelection,
        showNoData: drawNoDataBlock
    };
    douHistory = {
        saveState: saveState,
        replaceState: replaceState,
        initialContentPageLoad: initialContentPageLoad,
        initialMenuItemLink: "",
        initialRegionFilterObj: {}
    };
    string = {htmlEncode: htmlEncode, htmlDecode: htmlDecode};
    message = {
        showInfo: function (text) {
            showMessage({className: messageType.info, text: text})
        }, showSuccess: function (text) {
            showMessage({className: messageType.success, text: text})
        }, showWarning: function (text) {
            showMessage({className: messageType.warning, text: text})
        }, showError: function (text) {
            showMessage({className: messageType.error, text: text})
        }
    };
    log = {ajaxError: ajaxError};
    legend = {draw: drawLegend, clear: clearLegend, drawTotalValueForCountry: drawTotalValueForCountry}
});
var MapRegions = function () {
    var MapRegionsInfo = function () {
        var initialized = false, federalDistrictsInfo = {}, regionsInfo = {}, regionIdOsmIdPairs = {}, callbackFunc;

        function _init() {
            _getFederalDistrictsStructure()
        }

        function _getFederalDistrictsStructure() {
            $.ajax({
                type: "GET",
                dataType: "json",
                url: "report.htm",
                data: {action: "getReport", id: "map_russia_structure"},
                success: function (data) {
                    if (common.checkJson(data)) {
                        var regionTable = data.table, i, n, item, fedDistrId, osmId, regionId, regionName;
                        for (i = 0, n = regionTable.length; i < n; i += 1) {
                            item = regionTable[i];
                            fedDistrId = window.parseInt(item[0], 10);
                            osmId = item[3];
                            regionId = window.parseInt(item[4], 10);
                            regionName = item[5];
                            if (!federalDistrictsInfo.hasOwnProperty(fedDistrId)) {
                                federalDistrictsInfo[fedDistrId] = {shortName: item[1], name: item[2], regionOsmIds: []}
                            }
                            federalDistrictsInfo[fedDistrId].regionOsmIds.push(osmId);
                            regionsInfo[osmId] = {federalDistrictId: fedDistrId, id: regionId, name: regionName};
                            regionIdOsmIdPairs[regionId] = osmId
                        }
                        initialized = true;
                        _processExternalRequest()
                    }
                }
            })
        }

        function _processExternalRequest() {
            if (callbackFunc && typeof callbackFunc === "function") {
                callbackFunc()
            }
        }

        function _getOsmIdByRegionId(regionId) {
            if (!regionId || typeof regionIdOsmIdPairs[regionId] === "undefined") {
                return null
            }
            return regionIdOsmIdPairs[regionId]
        }

        return {
            init: function (callback) {
                callbackFunc = callback;
                _init();
                this.init = function () {
                }
            }, getFederalDistrictsInfo: function () {
                return $.extend(true, {}, federalDistrictsInfo)
            }, getRegionsInfo: function (doCopy) {
                return doCopy ? $.extend(true, {}, regionsInfo) : regionsInfo
            }, getOsmIdByRegionId: _getOsmIdByRegionId, isInitialized: function () {
                return initialized
            }
        }
    };
    var MapRegionsGeometry = function (ymaps) {
        var crimeaSearchName = "крым", sevastopolSearchName = "севастополь", regionsQuality = 1, allRegionsReserve, regionsInfo, callbackFunc;

        function _start() {
            allRegionsReserve = {};
            ymaps.ready(function () {
                ymaps.regions.load("UA", {lang: "ru", quality: regionsQuality}).then(_processCrimeaRegion)
            })
        }

        function _processCrimeaRegion(result) {
            ymaps.ready(function () {
                result.geoObjects.each(function (r) {
                    if (r.properties.get("name").toLowerCase().indexOf(crimeaSearchName) > -1 || r.properties.get("name").toLowerCase().indexOf(sevastopolSearchName) > -1) {
                        _addRegionToReserve(r)
                    }
                });
                ymaps.regions.load("RU", {lang: "ru", quality: regionsQuality}).then(_processRussianRegions)
            })
        }

        function _processRussianRegions(result) {
            result.geoObjects.each(function (r) {
                _addRegionToReserve(r)
            });
            _saveInfoInRegionsGeoObjects()
        }

        function _addRegionToReserve(region) {
            var osmId = region.properties.get("osmId");
            allRegionsReserve[osmId] = region
        }

        function _saveInfoInRegionsGeoObjects() {
            var osmId, region, zIndex, regionInfo;
            if (!$.isEmptyObject(regionsInfo)) {
                for (osmId in allRegionsReserve) {
                    region = allRegionsReserve[osmId];
                    zIndex = parseInt(osmId, 10);
                    region.options.set({zIndex: zIndex, zIndexHover: zIndex});
                    if (regionsInfo.hasOwnProperty(osmId)) {
                        regionInfo = regionsInfo[osmId];
                        region.properties.set({
                            regionId: regionInfo.id,
                            federalDistrictId: regionInfo.federalDistrictId
                        })
                    }
                }
            }
            _processExternalRequest()
        }

        function _processExternalRequest() {
            if (callbackFunc && typeof callbackFunc === "function") {
                callbackFunc(allRegionsReserve)
            }
        }

        return {
            init: function (regionsInfoParam, callback) {
                regionsInfo = regionsInfoParam;
                callbackFunc = callback;
                _start()
            }
        }
    };

    function _provideResultWhenInfoIsReady(func) {
        if (MapRegionsInfo.isInitialized()) {
            func && func()
        } else {
            MapRegionsInfo.init(function () {
                func && func()
            })
        }
    }

    return {
        init: function (callback) {
            if (typeof MapRegionsInfo === "function") {
                MapRegionsInfo = MapRegionsInfo()
            }
            if (typeof MapRegionsGeometry === "function") {
                MapRegionsGeometry = MapRegionsGeometry(ymaps)
            }
            _provideResultWhenInfoIsReady(function () {
                var regionsInfo = MapRegionsInfo.getRegionsInfo(false);
                MapRegionsGeometry.init(regionsInfo, callback)
            })
        }, getFederalDistrictsInfo: function () {
            return MapRegionsInfo.isInitialized() ? MapRegionsInfo.getFederalDistrictsInfo() : null
        }, getRegionsInfo: function () {
            return MapRegionsInfo.isInitialized() ? MapRegionsInfo.getRegionsInfo(true) : null
        }, getOsmIdByRegionId: function (regionId) {
            return MapRegionsInfo.isInitialized() ? MapRegionsInfo.getOsmIdByRegionId(regionId) : null
        }
    }
};
function Map(params) {
    var paramsType = typeof params;
    if (paramsType === "undefined" || paramsType !== "object") {
        console.warn("Map init check: define params object");
        return
    }
    if (typeof params.containerId === "undefined" || !params.containerId) {
        console.warn("Map init check: define property containerId in params object");
        return
    }
    if (!this instanceof Map) {
        return new Map(params)
    }
    var self = this, mapContainerId = params.containerId, mapContainer = $("#" + mapContainerId), mapViewMargin = params.viewMargin, onMapClickCallback = params.onClick, onMapReadyCallback = params.onReady, onMapChangedCallback = params.onChanged, onMapRegionHoverCallback = params.onRegionHover, yaMap, mapDefaultViewMargin = 5, mapDefaultCenter = [64, 105], mapMinZoom = 1, mapMaxZoom = 15, mapBoundsPreciseCheckVal = 0.01, allRegionsReserve = {}, selectedRegions = [], federalDistrictsInfo = {}, regionsInfo = {}, mapViewLevels = {
        country: 0,
        federalDistrict: 1,
        region: 2,
        municipality: 3
    }, curMapViewLevel = mapViewLevels.country, prevHoveredRegion = null, defaultFillColor = "cccccc", hoverFillColor = "ff9e3f50", defaultStrokeColor = "999999", hoverStrokeColor = "ff9e3f99", initialized = false, $window = $(window), mapResizingOrdered = false, fixMapZoomBugOnlyOnce = true;

    function _init(geoObjectsDictionary) {
        _saveRegionsGeometryAndInfo(geoObjectsDictionary);
        if (mapViewMargin === undefined) {
            mapViewMargin = mapDefaultViewMargin
        }
        ymaps.ready(function () {
            var zoom = 2, osmId;
            yaMap = new ymaps.Map(mapContainerId, {
                center: mapDefaultCenter,
                type: "yandex#map",
                zoom: zoom
            }, {autoFitToViewport: "always", avoidFractionalZoom: false, minZoom: mapMinZoom, maxZoom: mapMaxZoom});
            yaMap.behaviors.disable(["drag", "dblClickZoom", "scrollZoom", "multiTouch"]);
            yaMap.controls.remove("zoomControl");
            yaMap.layers.add(new ymaps.Layer("img/layer.png", {tileTransparent: true}));
            for (osmId in allRegionsReserve) {
                var region = allRegionsReserve[osmId];
                yaMap.geoObjects.add(region);
                _setDefaultStyleForRegion(region);
                region.events.add("click", _onMapClick);
                region.events.add("mouseenter", _onMapEnter);
                region.events.add("mouseleave", _onMapLeave)
            }
            _onWindowResize(100);
            mapContainer.find(".ymaps-logotype-div").hide();
            mapContainer.find(".ymaps-copyright-legend-container").hide();
            $window.off("resize", _onWindowResize);
            $window.on("resize", _onWindowResize);
            initialized = !$.isEmptyObject(allRegionsReserve) && !$.isEmptyObject(federalDistrictsInfo) && !$.isEmptyObject(regionsInfo);
            if (onMapReadyCallback && typeof onMapReadyCallback === "function") {
                setTimeout(onMapReadyCallback, 0)
            }
        })
    }

    function _saveRegionsGeometryAndInfo(geoObjectsDictionary) {
        var osmId;
        allRegionsReserve = geoObjectsDictionary;
        for (osmId in allRegionsReserve) {
            selectedRegions.push(osmId)
        }
        federalDistrictsInfo = MapRegions.getFederalDistrictsInfo();
        regionsInfo = MapRegions.getRegionsInfo()
    }

    function _applyRegionsData(regionsData) {
        var osmId, region, regionInfo, regionData, regionValue, regionHint, hint, color;
        if (typeof regionsData !== "object" || $.isEmptyObject(regionsData)) {
            _setDefaultStyleForAllRegions();
            return
        }
        for (osmId in allRegionsReserve) {
            region = allRegionsReserve[osmId];
            _setDefaultStyleForRegion(region);
            if (regionsData.hasOwnProperty(osmId)) {
                regionData = regionsData[osmId];
                regionValue = regionData.value;
                if (!isNaN(regionValue)) {
                    regionInfo = regionsInfo[osmId];
                    regionHint = regionData.hint || regionInfo.name;
                    hint = _isCountryView() ? federalDistrictsInfo[regionInfo.federalDistrictId].name : regionHint;
                    color = regionData.color;
                    region.properties.set({hintContent: hint, regionHint: regionHint, value: regionValue});
                    region.options.set({fillColor: color, originColor: color, strokeColor: defaultStrokeColor})
                }
            }
        }
    }

    function _setDefaultStyleForRegion(region) {
        var osmId, regionInfo, hint;
        region.options.set({
            fillColor: defaultFillColor,
            originColor: defaultFillColor,
            strokeColor: defaultStrokeColor
        });
        if (initialized) {
            osmId = region.properties.get("osmId");
            if (!_doesRegionHaveInfo(osmId)) {
                return
            }
            regionInfo = regionsInfo[osmId];
            hint = _isCountryView() ? federalDistrictsInfo[regionInfo.federalDistrictId].name : regionInfo.name;
            region.properties.set({hintContent: hint, regionHint: "", value: null})
        }
    }

    function _setDefaultStyleForAllRegions() {
        var osmId, region;
        for (osmId in allRegionsReserve) {
            region = allRegionsReserve[osmId];
            _setDefaultStyleForRegion(region)
        }
    }

    function _onWindowResize(timeout) {
        if (!mapContainer.is(":visible")) {
            return
        }
        if (timeout !== 0) {
            timeout = timeout || 300
        }
        if (!mapResizingOrdered) {
            setTimeout(function () {
                _resize();
                mapResizingOrdered = false
            }, timeout);
            mapResizingOrdered = true
        }
        function _resize() {
            if (!mapContainer.is(":visible")) {
                return
            }
            try {
                var bounds = yaMap.geoObjects.getBounds();
                yaMap.setBounds(bounds, {
                    preciseZoom: true, zoomMargin: mapViewMargin, callback: function () {
                        var curZoom = yaMap.getZoom();
                        if (curZoom === mapMinZoom && fixMapZoomBugOnlyOnce) {
                            setTimeout(_onWindowResize, 0);
                            fixMapZoomBugOnlyOnce = false
                        } else {
                            fixMapZoomBugOnlyOnce = true;
                            var curBounds = yaMap.geoObjects.getBounds(), point1Diffs = Math.abs((curBounds[0][0] + curBounds[0][1]) - (bounds[0][0] + bounds[0][1])), point2Diffs = Math.abs((curBounds[1][0] + curBounds[1][1]) - (bounds[1][0] + bounds[1][1]));
                            if (point1Diffs > mapBoundsPreciseCheckVal || point2Diffs > mapBoundsPreciseCheckVal) {
                                yaMap.setBounds(curBounds, {preciseZoom: true, zoomMargin: mapViewMargin})
                            }
                        }
                        _onChanged()
                    }
                })
            } catch (ex) {
            }
        }
    }

    function _onChanged() {
        if (onMapChangedCallback && typeof onMapChangedCallback === "function") {
            onMapChangedCallback()
        }
    }

    function _onMapClick(event) {
        var region = event.get("target"), osmId = region.properties.get("osmId"), regionInfo, federalDistrictId, regionId;
        if (!_doesRegionHaveInfo(osmId)) {
            return false
        }
        _onRegionHover(prevHoveredRegion, false);
        regionInfo = regionsInfo[osmId];
        federalDistrictId = regionInfo.federalDistrictId;
        if (onMapClickCallback && typeof onMapClickCallback === "function") {
            if (_isCountryView()) {
                onMapClickCallback(federalDistrictId)
            } else {
                regionId = regionInfo.id;
                onMapClickCallback(federalDistrictId, regionId)
            }
        }
    }

    function _onMapEnter(event) {
        var region = event.get("target");
        return _onRegionHover(region, true)
    }

    function _onMapLeave() {
        return _onRegionHover(prevHoveredRegion, false)
    }

    function _onRegionHover(region, isRegionHovered) {
        var regionValue, osmId, federalDistrictId;
        if (isRegionHovered) {
            prevHoveredRegion = region;
            mapContainer.removeClass("map_disabled_pointer")
        } else {
            prevHoveredRegion = null;
            mapContainer.addClass("map_disabled_pointer")
        }
        if (!region) {
            return false
        }
        if (onMapRegionHoverCallback && typeof onMapRegionHoverCallback === "function") {
            regionValue = isRegionHovered ? region.properties.get("value") : null;
            onMapRegionHoverCallback(regionValue)
        }
        if (_isCountryView()) {
            osmId = region.properties.get("osmId");
            if (!_doesRegionHaveInfo(osmId)) {
                return false
            }
            federalDistrictId = regionsInfo[osmId].federalDistrictId;
            _highlightDistrict(federalDistrictId, isRegionHovered)
        } else {
            _highlightRegion(region, isRegionHovered)
        }
        return true
    }

    function _highlightDistrict(federalDistrictId, doHighlight) {
        var districtInfo = federalDistrictsInfo[federalDistrictId], osmIds = districtInfo.regionOsmIds, i, length, osmId, region;
        for (i = 0, length = osmIds.length; i < length; i += 1) {
            osmId = osmIds[i];
            region = allRegionsReserve[osmId];
            _highlightRegion(region, doHighlight)
        }
    }

    function _highlightRegion(region, doHighlight) {
        region.options.set("fillColor", doHighlight ? hoverFillColor : region.options.get("originColor"));
        region.options.set("strokeColor", doHighlight ? hoverStrokeColor : defaultStrokeColor)
    }

    function _isCountryView() {
        return curMapViewLevel === mapViewLevels.country
    }

    function _doesRegionHaveInfo(osmId) {
        return regionsInfo.hasOwnProperty(osmId)
    }

    function _showCountry() {
        var osmId, region, regionFederalDistrictId, hint;
        if (_isCountryView()) {
            _onWindowResize(10);
            return
        }
        for (osmId in allRegionsReserve) {
            region = allRegionsReserve[osmId];
            regionFederalDistrictId = region.properties.get("federalDistrictId");
            if (federalDistrictsInfo.hasOwnProperty(regionFederalDistrictId)) {
                hint = federalDistrictsInfo[regionFederalDistrictId].name;
                _addRegion(region, osmId, hint)
            }
        }
        curMapViewLevel = mapViewLevels.country;
        _onWindowResize(10)
    }

    function _showFederalDistrict(federalDistrictId) {
        var i, regionsLength, osmId, districtInfo = federalDistrictsInfo[federalDistrictId], osmIds = districtInfo.regionOsmIds;
        _clear(osmIds);
        for (i = 0, regionsLength = osmIds.length; i < regionsLength; i += 1) {
            osmId = osmIds[i];
            _addRegionWithHint(osmId)
        }
        curMapViewLevel = mapViewLevels.federalDistrict;
        _onWindowResize(10)
    }

    function _showRegion(regionId) {
        var osmId = this.getOsmIdByRegionId(regionId);
        if (selectedRegions.length !== 1 || selectedRegions[0] !== osmId) {
            _clear(osmId);
            _addRegionWithHint(osmId)
        }
        curMapViewLevel = mapViewLevels.region;
        _onWindowResize(200)
    }

    function _addRegionWithHint(osmId) {
        var region = allRegionsReserve[osmId], regionHint, hint;
        if (region && _doesRegionHaveInfo(osmId)) {
            regionHint = region.properties.get("regionHint");
            hint = regionHint || regionsInfo[osmId].name;
            _addRegion(region, osmId, hint)
        }
    }

    function _addRegion(region, osmId, hint) {
        var osmIdIndex = selectedRegions.indexOf(osmId);
        if (osmIdIndex === -1) {
            yaMap.geoObjects.add(region);
            selectedRegions.push(osmId)
        }
        region.properties.set("hintContent", hint)
    }

    function _clear(excludeOsmIds) {
        var i, regionsLength, osmId, region, newStateOfSelectedRegions = [];
        if (Object.prototype.toString.call(excludeOsmIds) === "[object String]") {
            excludeOsmIds = [excludeOsmIds]
        } else {
            if (Object.prototype.toString.call(excludeOsmIds) !== "[object Array]") {
                excludeOsmIds = []
            }
        }
        for (i = 0, regionsLength = selectedRegions.length; i < regionsLength; i += 1) {
            osmId = selectedRegions[i];
            if (excludeOsmIds.indexOf(osmId) > -1) {
                newStateOfSelectedRegions.push(osmId);
                continue
            }
            region = allRegionsReserve[osmId];
            yaMap.geoObjects.remove(region)
        }
        selectedRegions = newStateOfSelectedRegions
    }

    this.showCountry = _showCountry;
    this.showFederalDistrict = _showFederalDistrict;
    this.showRegion = _showRegion;
    this.isInitialized = function () {
        return initialized
    };
    this.applyRegionsData = _applyRegionsData;
    this.refresh = function () {
        _onWindowResize()
    };
    if (typeof MapRegions === "function") {
        MapRegions = MapRegions()
    }
    MapRegions.init(function (geoObjectsDictionary) {
        _init(geoObjectsDictionary);
        self.getOsmIdByRegionId = MapRegions.getOsmIdByRegionId;
        self.federalDistrictsInfo = federalDistrictsInfo;
        self.regionsInfo = regionsInfo
    })
};
